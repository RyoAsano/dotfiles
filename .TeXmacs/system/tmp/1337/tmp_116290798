(document (TeXmacs "1.99.4") (style (tuple "tmmanual" "english")) (body (document (title (concat "GNU " (TeXmacs) " user manual")) (table-of-contents "toc" (document "")) (chapter "Getting started") (section "Conventions for this manual") (paragraph* "Menu entries") (concat "Throughout the " (TeXmacs) " manual, menu entries will be typeset using a " (em "sans serif") " font, like in " (menu "Document") ", " (menu "File" "Load") " or " (menu "Format" "Font shape" "Italic") ".") (paragraph* "Keyboard modifiers") (concat (TeXmacs) " makes use of the following keyboard modifiers:") (description (document (concat (item* (prefix "S-")) "For shift key combinations.") (concat (item* (prefix "C-")) "For control key combinations.") (concat (item* (prefix "A-")) "For alternate key combinations.") (concat (item* (prefix "M-")) "For meta key combinations."))) (concat "For instance, " (key* "M-S-x") " stands for the action which consists of simultaneously pressing the three keys " (prefix "M-") ", " (prefix "S-") " and " (key "x") ".") (paragraph* "Keyboard shortcuts") (concat "More complex keyboard shortcuts are obtain by pressing several keys or modified keys in succession. For instance, the shortcut " (key "- <gtr>") " corresponds on first pressing the " (key "-") " key and then the key " (key "<gtr>") ". Inside mathematical formulas, this shortcut inserts the arrow " (math (op "<rightarrow>")) ". Similarly, the shortcut " (key* "C-x C-f") " consists of first pressing the keys " (prefix "C-") " and " (key "x") " together, and next pressing the keys " (prefix "C-") " and " (key "f") " again together. In the " (name "Emacs") " look and feel, this shortcut enables you to open a new file.") (concat "Some common keyboard prefixes are detailed in the section on " (hlink "general keyboard rules" "text/keyboard/man-general-rules.en.tm") ". In cases when " (TeXmacs) " keyboard shortcuts are superseded by shortcuts from the operating system, we notice that " (hlink "equivalents for the keyboard modifiers" "config/man-config-keyboard.en.tm#kbd-escape-table") " can be obtained using the " (key* "escape") " key. For instance, " (key* "escape") " is equivalent to " (key "escape") " and " (key* "escape escape") " is equivalent to " (key "escape escape") ".") (concat "Notice that the " (TeXmacs) " menus and keyboard behavior are " (em "contextual") ", " (abbr "i.e.") " they depend on the current mode (i.e. text mode or math mode), the current language and the position of the cursor inside your document. For instance, inside math mode, you have special keyboard shortcuts which are handy for typing mathematical formulas, but which are useless in text mode.") (paragraph* "Special keys") "On some platforms, some special keys such as the Return key are depicted by short glyphs. Below follows the table with all such special keys and there meaning." (big-table (descriptive-table (tformat (cwith "1" "-1" "3" "3" "cell-lborder" "1ln") (cwith "1" "-1" "1" "-1" "cell-halign" "l") (cwith "1" "-1" "1" "-1" "cell-row-span" "1") (cwith "1" "-1" "1" "-1" "cell-col-span" "1") (cwith "7" "11" "1" "1" "cell-lborder" "1ln") (cwith "7" "11" "1" "2" "cell-halign" "l") (cwith "7" "11" "1" "2" "cell-row-span" "1") (cwith "7" "11" "1" "2" "cell-col-span" "1") (table (row (cell "Key") (cell "Meaning") (cell "Key") (cell "Meaning")) (row (cell (key* "S-")) (cell "Shift modifier") (cell (key* "left")) (cell "Cursor left")) (row (cell (key* "capslock")) (cell "Caps lock") (cell (key* "right")) (cell "Cursor right")) (row (cell (key* "C-")) (cell "Control modifier") (cell (key* "up")) (cell "Cursor up")) (row (cell (key* "A-")) (cell "Alternate modifier") (cell (key* "down")) (cell "Cursor down")) (row (cell (key* "M-")) (cell "Meta modifier") (cell (key* "home")) (cell "Home")) (row (cell (key* "return")) (cell "Return") (cell (key* "end")) (cell "End")) (row (cell (key* "delete")) (cell "Forward delete") (cell (key* "pageup")) (cell "Page up")) (row (cell (key* "backspace")) (cell "Backspace") (cell (key* "pagedown")) (cell "Page down")) (row (cell (key* "escape")) (cell "Escape") (cell (key* "space")) (cell "Space")) (row (cell (key* "tab")) (cell "Tab") (cell "") (cell ""))))) (document "Special keys.")) (section (concat "Configuring " (TeXmacs))) (concat "When starting " (TeXmacs) " for the first time, the program automatically configures itself in a way which it thinks to be most suitable for you. For instance, " (TeXmacs) " will attempt to determine your systems settings for the language and the paper type of your printer. However, the automatic configuration may sometimes fail or you may want to use an alternative configuration. In that case, you should go to the " (menu "Edit" "Preferences") " menu and specify your preferences.") (concat "In particular, we recommend you to configure the desired look and feel of " (TeXmacs) ". By default, we use a native look and feel, which will ensure that keyboard shortcuts and menu layout are similar to other applications on your system. But we also provide an " (name "Emacs") " look and feel, which ensures a limited compatibility of the " (TeXmacs) " keyboard shortcuts with those of " (name "Emacs") ".") (section "Creating, saving and loading documents") (concat "When launching " (TeXmacs) " without any command line options, the editor automatically creates a new document for you. You may also create a new document yourself using " (menu "File" "New") ". Newly created documents do not yet carry a name. In order to give them a name, you should click on " (menu "File" "Save as") ". We recommend you to give documents a name immediately after their creation; this will avoid you to loose documents.") (concat "It is also recommended to specify the global settings for your document when necessary. First of all, you may specify a document style like article, book or seminar using " (menu "Document" "Style") ". If you write documents in several languages, then you may want to specify the language of your document using " (menu "Document" "Language") ". Similarly, you may specify a paper type using " (menu "Document" "Page" "Size") ".") (concat "For newly started documents, the style and page size can also be specified in the " (menu "Focus") " menu or buttons on the " (em "focus toolbar") ". In general, the focus menu and toolbar are useful for editing " (hlink "structured documents" "text/man-structure.en.tm") ", and their contents will be highly dependent on the current context.") (concat "After modifying your document, you may save it using " (menu "File" "Save") ". Old documents can be retrieved using " (menu "File" "Load") ".  Notice that you can edit several documents in the same window using " (TeXmacs) "; you can switch between different " (em "buffers") " using " (menu "Go") ".") (section "Printing documents") (concat "You can print the current file using " (menu "File" "Print" "Print all") ". By default, " (TeXmacs) " assumes that you have a 600dpi printer for a4 paper. These default settings can be changed in " (menu "Edit" "Preferences" "Printer") ". You can also print to a postscript file using " (menu "File" "Print" "Print all to file") " (in which case the default printer settings are used for creating the output) or " (menu "File" "Export" "Postscript") " (in which case the printer settings are ignored).") (concat "You may export to " (acronym "PDF") " using " (menu "File" "Export" "Pdf") ". Notice that you should set " (menu "Edit" "Preferences" "Printer" "Font type" "Type 1") " if you want the produced Postscript or " (acronym "PDF") " file to use " (name "Type 1") " fonts." (index "pdf") " However, only the CM fonts admit " (name "Type 1") " versions. These CM fonts are of a slightly inferior quality to the EC fonts, mainly for accented characters. Consequently, you might prefer to use the EC fonts as long as you do not need a PDF file which looks nice in " (name "Acrobat Reader") ".") (concat "When adequately configuring " (TeXmacs) ", the editor is guaranteed to be " (em "wysiwyg") ": the result after printing out is exactly what you see on your screen. In order to obtain full wysiwygness, you should in particular select " (menu "Document" "Page" "Type" "Paper") " and " (menu "Document" "Page" "Screen layout" "Margins as on paper") ". You should also make sure that the characters on your screen use the same number of dots per inch as your printer. This rendering precision of the characters may be changed using " (menu "Document" "Font" "Dpi") ". Currently, minor typesetting changes may occur when changing the dpi, which may globally affect the document through line and page breaking. In a future release this drawback should be removed.") (chapter "Writing simple documents") (section "Generalities for typing text") (concat "The usual English characters and punctuation symbols can easily be obtained on most keyboards. Most modern system also implement standard shortcuts in order to obtain accented characters and other special symbols. If necessary, accented characters can also be obtained using the " (prefix "accent") " prefix. For instance, é is obtained by typing " (key "accent:acute e") ". Similarly, we obtain à via " (key "accent:grave a") " and so on.") (concat "Long words at borders of successive lines are automatically hyphenated. In order to hyphenate foreign languages correctly, you should specify the language of the document in the menu " (menu "Document" "Language") ".") (concat "At the left hand side of the footer, you see the document style, the text properties at the current cursor position. Initially, it displays generic text roman 10, which means that you type in text mode using a 10 point roman font and the generic document style. You can change the text properties (font, font size, color, language) in the " (menu "Format") " menu. You can also change the text properties of the text you have already typed by selecting a region and then using the " (menu "Format") " menu. Some text properties can also be changed for all the document with the " (menu "Document") " menu.") "At the right hand side of the footer, the character or object (like a change in the text properties) just before the cursor is displayed. We also display all environments which are active at the cursor position. This information should help you to orient yourself in the document." (section "Typing structured text") (concat "Usually, long documents have a structure: they are organized in chapters, sections and subsections, they contain different types of text, such as regular text, citations, footnotes, theorems, etc. After selecting a " (def-index "document style") " in " (menu "Document" "Style") ", " (TeXmacs) " takes care of specific layout issues, such as numbering of sections, pages, theorems, typesetting citations and footnotes in a nice way and so on.") (concat "Currently, several standard document styles have been implemented: " (tmstyle "generic") ", " (tmstyle "article") ", " (tmstyle "book") ", " (tmstyle "letter") ", " (tmstyle "exam") ", " (tmstyle "beamer") ", " (tmstyle "seminar") ", " (tmstyle "source") ". For instance, the article style can be used for writing articles. Besides, there are styles for common journals and special purposes, such as the " (TeXmacs) " documentation.") (concat "As soon as you have selected a document style, you can organize your text into sections (see " (menu "Insert" "Section") ") and use specific " (def-index "environments") " (also called " (em "tags") "). Examples of environments are theorem, proposition, remark and so on (see " (menu "Insert" "Enunciation") "). Other examples are lists of items (see " (menu "Insert" "Itemize") ") or numbered lists (see " (menu "Insert" "Enumerate") "). Further examples of frequently used tags are " (markup "strong") " (for writing important text), " (markup "name") " (for writing names of persons), etc.") (concat "When you get more acquainted with " (TeXmacs) ", it is possible to add your own new environments in your own style file. Assume for instance that you often make citations and that you want those to appear in italic, with left and right margins of 1cm. Instead of manually changing the text and paragraph properties each time you make a citation, it is better to create a citation environment. Not only it will be faster to create a new citation when doing so, but it is also possible to systematically change the layout of your citations throughout the document just by changing the definition of the citation environment. The latter situation occurs for instance if you discover " (with "font-shape" "italic" "a posteriori") " that you prefer the citations to appear in a smaller font.") (concat "There are a few general editing principles which make it easy to manipulate structured documents using " (TeXmacs) ". One major concept is the " (em "current focus") ", which is best illustrated on an example. Assume that we are in the process of entering a classical theorem:") (quote-env (document (concat "The following theorem is due to " (name "Euler") ":") (big-envbox (document (theorem (document (concat (small-focus (math (concat "<mathe>" (rsup "<mathpi>*<mathi>") "=<um>1" (math-cursor)))) "."))))))) (concat "At the position of the cursor, the grey and cyan boxes indicate the active tags: in this case, the cursor is both inside a theorem and a formula. The innermost active tag (the formula " (math (concat "<mathe>" (rsup "<mathpi>*<mathi>") "=<um>1")) " in our example) is surrounded by a cyan box and called the " (em "current focus") ".") (concat "The contents of the " (menu "Focus") " menu and " (em "focus toolbar") " (the lowest toolbar) are highly context dependent and determined as a function of the current focus. In our example, the focus toolbar contains a" (nbsp) "popup menu button " (menu "Formula") "; when selecting " (menu "Equation") " in this menu, the text will change into") (quote-env (document (concat "The following theorem is due to " (name "Euler") ":") (big-envbox (document (theorem (document "" (big-focus (document (equation* (document (concat "<mathe>" (rsup "<mathpi>*<mathi>") "=<um>1" (math-cursor) "."))))))))))) (concat "Similarly, the arrow buttons on the left hand side of the focus toolbar allow you to jump to similar tags. In this case, they will allow you to quickly traverse all formulas and equations in your document. For more information on " (hlink "structured editing operations" "editing/man-structured-editing.en.tm") " we refer to the chapter on " (hlink "editing tools" "editing/man-editing-tools.en.tm") ".") (concat "A second important concept is the " (em "current editing mode") ". Currently, there are five major modes: text mode, mathematics mode, program mode, graphics mode and source mode. In principle, the current mode can be determined from the current focus, but the mode is likely to change less often than the focus. The " (em "mode dependent toolbar") " above the focus toolbar contains several buttons which are useful in the current mode. The contents of the " (menu "Insert") " and " (menu "Format") " menus are also mode dependent.") (section "Content-based tags") (concat "The simplest examples of structure in a text are content-based tags. In " (menu "Insert" "content tags") " you see a list of them. Content based tags indicate that a given portion of text is of a particular kind or that it serves a specific purpose. For instance, important text should be marked using the " (markup "strong") " tag. Its default rendering uses a bold type face, like in this " (strong "strong text") ". However, strong text might be rendered in a different way according to the document style. For instance, strong text may be rendered in a different color on transparencies for presentations. Here follows a short list of the most common content-based tags and their purpose:") (big-table (descriptive-table (tformat (table (row (cell "Tag") (cell "Example") (cell "Purpose")) (row (cell (markup "strong")) (cell (concat "this is " (strong "important"))) (cell "Indicate an important region of text")) (row (cell (markup "em")) (cell (concat "the " (em "real") " thing")) (cell "Emphasize a region of text")) (row (cell (markup "dfn")) (cell (concat "A " (dfn "gnu") " is a horny beast")) (cell "Definition of some concept")) (row (cell (markup "samp")) (cell (concat "the " (samp "ae") " ligature æ")) (cell "A sequence of literal characters")) (row (cell (markup "name")) (cell (concat "the " (name "Linux") " system")) (cell "The name of a particular thing")) (row (cell (markup "person")) (cell (concat "I am " (name "Joris"))) (cell "The name of a person")) (row (cell (markup "cite*")) (cell (concat "Melville's " (cite* "Moby Dick"))) (cell "A bibliographic citation")) (row (cell (markup "abbr")) (cell (concat "I work at the " (abbr "C.N.R.S."))) (cell "An abbreviation")) (row (cell (markup "acronym")) (cell (concat "the " (acronym "HTML") " format")) (cell "An acronym")) (row (cell (markup "verbatim")) (cell (concat "the program said " (verbatim "hello"))) (cell "Verbatim text like computer program output")) (row (cell (markup "kbd")) (cell (concat "Please type " (kbd "return"))) (cell "Text which should be entered on a keyboard")) (row (cell (markup "code*")) (cell (concat (code* "cout <less><less> 1+1;") " yields " (verbatim "2"))) (cell "Code of a computer program")) (row (cell (markup "var")) (cell (verbatim (concat "cp " (var "src-file") " " (var "dest-file")))) (cell "Variables in a computer program"))))) "Some of the most common content-based tags.") (section "Lists") (concat "Using " (menu "Insert" "Itemize") " you may start an unnumbered list. You may either select a particular tag like " (math "<bullet>") " (bullets), " (math (op "-")) " (dashes) or " (math (op "<rightarrow>")) " (arrows) to indicate entries in the list or the default tag. Lists may be " (em "nested") " inside other tags, like in the following list:") (itemize (document (concat (item) "First item.") (concat (item) "Now comes the sublist:") (itemize (document (concat (item) "A subitem.") (concat (item) "Another one."))) (concat (item) "A final item."))) (concat "The default tag is rendered in a different way depending on the level of nesting. At the outermost level, we used the " (math "<bullet>") " tag, at the second level " (math (op "<circ>")) ", and so on. When you are inside a list, notice that pressing " (shortcut "(kbd-return)") " automatically starts a new item. If you need items which are several paragraphs long, then you may always use " (shortcut "(kbd-shift-return)") " in order to start a new paragraph.") (concat "Enumerate environments, which are started using " (menu "Insert" "Enumerate") ", behave in a similar way as itemize, except that the items are numbered. Here follows an example of an enumeration which was started using " (menu "Insert" "Enumerate" "Roman") ":") (enumerate-Roman (document (concat (item) "A first item.") (concat (item) "A second one.") (concat (item) "And a last one."))) (concat "The last type of lists are descriptive lists. They are started using " (menu "Insert" "Description") " and allow you to describe a list of concepts:") (description (document (concat (item* "Gnu") "A hairy but gentle beast.") (concat (item* "Gnat") "Only lives in a zoo."))) (section "Environments") (concat "In a similar way as content-based tags, environments are used to mark portions of text with a special meaning. However, while " (hlink "content-based tags" "text/man-content-tags.en.tm") " usually enclose small portions of text, environments often enclose portions that are several paragraphs long. Frequently used environments in mathematics are " (markup "theorem") " and " (markup "proof") ", like in the example below:") (theorem (document (concat "There exist no positive integers " (math "a") ", " (math "b") ", " (math "c") " and " (math "n") " with " (math "n<geqslant>3") ", such that " (math (concat "a" (rsup "n") "+b" (rsup "n") "=c" (rsup "n"))) "."))) (proof (document "I do not have room here to write the proof down.")) (concat "You may enter environments using " (menu "Insert" "Environment") ". Other environments with a similar rendering as theorems are " (markup "proposition") ", " (markup "lemma") ", " (markup "corollary") ", " (markup "axiom") ", " (markup "definition") ". You may use the " (markup "dueto") " macro (entered using " (key "\\ d u e t o return") ") in order to specify the person(s) to which the theorem is due, like in") (theorem (document (concat (dueto "Pythagoras") "Under nice circumstances, we have " (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))) "."))) (concat "Other frequently used environments with a similar rendering as theorems, but which do not emphasize the enclosed text, are " (markup "remark") ", " (markup "note") ", " (markup "example") ", " (markup "warning") ", " (markup "exercise") " and " (markup "problem") ". The remaining environments " (markup "verbatim") ", " (markup "code") ", " (markup "quote") ", " (markup "quotation") " and " (markup "verse") " can be used in order to enter multiparagraph text or code, quotations or poetry.") (section "Layout issues") (concat "As a general rule, " (TeXmacs) " takes care of the layout of your text. Therefore, although we did not want to forbid this possibility, we do not encourage you to typeset your document visually. For instance, you should not insert spaces or blank lines as substitutes for horizontal and vertical spaces between words and lines; instead, additional space should be inserted explicitly using " (menu "Insert" "Space") ". This will make your text more robust in the sense that you will not have to reconsider the layout when performing some minor changes, which affect line or page breaking, or major changes, such as changing the document style.") (concat "Several types of explicit spacing commands have been implemented. First of all, you can insert rigid spaces of given widths and heights. Horizontal spaces do not have a height and are either stretchable or not. The length of a stretchable spaces depends on the way a paragraph is hyphenated. Furthermore, it is possible to insert tabular spaces. Vertical spaces may be inserted either at the start or the end of a paragraph: the additional vertical space between two paragraphs is the maximum of the vertical space after the first one and the vertical space before the second one (contrary to " (TeX) ", this prevents from superfluous space between two consecutive theorems).") "As to the paragraph layout, the user may specify the paragraph style (justified, left ragged, centered or right ragged), the paragraph margins and the left (resp. right) indentation of the first (resp. last) line of a paragraph. The user also controls the spaces between paragraphs and successive lines in paragraphs." (concat "You can specify the page layout in the " (menu "Document" "Page") " menu. First of all, you can specify the way pages are displayed on the screen: when selecting paper as page type in " (menu "Document" "Page" "Type") ", you explicitly see the page breaks. By default, the page type is papyrus, which avoids page breaking during the preparation of your document. The automatic page type assumes that your paper size is exactly the size of your window. The page margins and text width are specified in " (menu "Document" "Page" "Layout") ". Often, it is convenient to reduce the page margins for usage on the screen; this can be done in " (menu "Document" "Page" "Screen layout") ".") (section "The font selection system") (concat "In " (TeXmacs) ", the global document font can be specified using " (menu "Document" "Font") ". It is also possible to locally use another font using " (menu "Format" "Font") ". Both " (menu "Document" "Font") " and " (menu "Format" "Font") " open the " (TeXmacs) " font browser. Fonts have three main characteristics:") (description (document (concat (item* "Family") "Fonts are grouped together into " (em "families") " with a similar design.") (concat (item* "Shape") "Inside the same font family, individual fonts have different " (em "shapes") ", such as bold, italic, small capitals, etc.") (concat (item* "Size") "The font " (em "size") " in points."))) "The user may directly specify these three characteristics in the font browser, which also displays some sample text for the selected font." (concat "The font browser also provides a way to quickly select fonts based on desirable font properties. For instance, by filtering on a bold weight and sans serif, one may find a bold sans serif font which mixes as well as possible with the main font. " (TeXmacs) " allows you to filter on the following criteria:") (description (document (concat (item* "Weight") "The font " (em "weight") " corresponds to the thickness of the font:") (center (block (tformat (table (row (cell (with "font-series" "thin" "Thin")) (cell (with "font-series" "light" "Light")) (cell "Medium") (cell (with "font-series" "bold" "Bold")) (cell (with "font-series" "black" "Black"))))))) (concat (item* "Slant") "The font " (em "slant") " determines the angle of the font:") (center (block (tformat (table (row (cell (with "font-family" "normal" "Normal")) (cell (with "font-shape" "italic" "Italic")) (cell (with "font-shape" "slanted" "Oblique"))))))) (concat (item* "Stretch") "This property determines the horizontal width for a fixed vertical height:") (center (block (tformat (table (row (cell (with "font-shape" "condensed" "Condensed")) (cell (with "font-shape" "unextended" "Unextended")) (cell (with "font-shape" "wide" "Wide"))))))) (concat (item* "Case") "This property determines how lowercase letters are capitalized:") (center (block (tformat (table (row (cell (with "font-shape" "mixed" "Mixed")) (cell (with "font-shape" "small-caps" "Small capitals"))))))) (concat (item* "Serif") "This feature corresponds to the projecting features called serifs at the end of strokes:") (center (block (tformat (table (row (cell (with "font-family" "rm" "Serif")) (cell (with "font-family" "ss" "Sans Serif"))))))) (concat (item* "Spacing") "This feature corresponds to the horizontal spacing between characters:") (center (block (tformat (table (row (cell (with "font-family" "rm" "Proportional")) (cell (with "font-family" "tt" "Monospaced"))))))) (concat (item* "Device") "This property can be used to immitate specific writing devices:") (center (block (tformat (table (row (cell (with "font-family" "rm" "Print")) (cell (with "font-family" "tt" "Typewriter")) (cell (with "font-family" "digital" "Digital")) (cell (with "font-family" "pen" "Pen")) (cell (with "font-family" "artpen" "Art pen")) (cell (with "font-family" "chalk" "Chalk")) (cell (with "font-family" "marker" "Marker"))))))) (concat (item* "Category") "Various other font features:") (concat (htab "5mm") (block (tformat (table (row (cell (with "font-family" "ancient" "Ancient")) (cell (with "font-family" "attached" "Attached")) (cell (with "font-family" "calligraphic" "Calligraphic")) (cell (with "font-family" "comic" "Comic")) (cell (with "font-family" "decorative" "Decorative"))) (row (cell (with "font-family" "distorted" "Distorted")) (cell (with "font-family" "gothic" "Gothic")) (cell (with "font-family" "handwritten" "Handwritten")) (cell (with "font-family" "initials" "Initials")) (cell (with "font-family" "medieval" "Medieval"))) (row (cell (with "font-family" "miscellaneous" "Misscellaneous")) (cell (with "font-family" "outline" "Outline")) (cell (with "font-family" "retro" "Retro")) (cell (with "font-family" "scifi" "Scifi")) (cell (with "font-family" "title" "Title")))))) (htab "5mm")))) (concat "Each of the above properties really constitutes a " (em "hint") " on how the kind of font which " (em "should") " be used. If no suitable font can be found on your particular system, then setting these properties may have no effect. Whenever you apply one or more filters, the font browser indicates which fonts match the selected properties. It also indicates the closest match for the current font in use. When pressing the " (menu "Ok") " button without selecting any particular matching font, then the selected font properties will be inserted as " (TeXmacs) " markup and used as rendering hints. In that case, the rendering may change when selecting another global document font (for instance).") (concat "It should be noticed that " (TeXmacs) " comes with a limited number of preinstalled fonts, such as the " (with "font" "Stix" "Stix") " fonts and several fonts prefixed by TeXmacs. Documents which only use these fonts will be rendered the same on different systems (assuming the same version of " (TeXmacs) "). When your documents contain other fonts as well, then these fonts may be replaced by closest matches when opening your document under a different operating system.") (section "Mastering the keyboard") (concat "We recall that the section on " (hlink "general conventions" "text/start/man-conventions.en.tm") " contains explanations on the way keyboard shortcuts are printed in this manual. It may also be useful to take a look at the section on " (hlink "keyboard configuration" "config/man-config-keyboard.en.tm") ".") (subsection "General prefix rules") (concat "Since there are many keyboard shortcuts, it is important to have some ways of classifying them in several categories, in order to make it easier to memorize them. As a general rule, keyboard shortcuts which fall in the same category are identified by a common prefix. The active prefixes heavily depend on the selected look and feel in " (menu "Edit" "Preferences") ". In the current look and feel of your " (TeXmacs) " system," (space "0.4spc") "the main common prefixes are as follows:") (description (document (concat (item* (prefix "std")) "Standard shortcuts, which are similar to shortcuts used by other applications (for the selected look and feel). For instance, " (shortcut "(clipboard-paste \"primary\")") " can be used for pasting text on your system.") (concat (item* (prefix "cmd")) (TeXmacs) " shortcuts, which often rely on the current editing mode. For instance, " (key "text s") " produces " (strong "strong") " text in text mode and a square root " (math (sqrt "")) " in math mode.") (concat (item* (prefix "altcmd")) "Compound " (TeXmacs) " shortcuts. Usually, these shortcuts first indicate the kind of markup to which the command will apply and then specify the specific command. For instance, the " (key "executable") " prefix is used for insering executable markup, which is useful for " (hlink "writing style files" "../devel/style/style.en.tm") ". One example is the shortcut " (key "executable +") " for the insertion of an addition.") (concat (item* (prefix "structured:geometry")) "This prefix is used in combination with arrow keys and certain other special keys for " (hlink "positioning and resizing objects" "editing/man-structured-geometry.en.tm")) (concat (item* (prefix "structured:move")) "This prefix is used in combination with arrow keys and some other special keys for " (hlink "structured cursor movements" "editing/man-structured-move.en.tm") ".") (concat (item* (prefix "special")) "This prefix is occasionally used in combination with letters and ponctuation symbols for creating some additional easy to remind shortcuts.") (concat (item* (prefix "symbol")) "This prefix can be used in combination with normal letters for the insertion of special symbols. For instance, " (key "text:symbol s") " yields ÿ and " (key "math:symbol a") " yields " (math (op "<amalg>")) ". The " (prefix "symbol") " prefix is also used for the insertion of literal characters. For instance, " (key "symbol \\") " will always produce the \\ character, whereas the " (key "\\") " key is used for entering " (hlink "hybrid commands" "text/keyboard/man-hybrid.en.tm") "."))) (concat "Unfortunately, " (prefix "altcmd") "-based shortcuts are superseded by system shortcuts on several systems. For instance, accented characters and common special symbols are entered using this prefix under " (name "Mac OS") ". In that case, you may use the " (key* "escape") " key as an equivalent for " (key "altcmd") ". For more information, we refer to the section on " (hlink "keyboard configuration" "config/man-config-keyboard.en.tm") ".") (subsection "Keyboard shortcuts for text mode") "To write a text in an european language with a keyboard which does have the appropriate special keys, you can use the following shortcuts to create accented characters. Note that they are active regardless of the current language setting." (big-table (descriptive-table (tformat (cwith "2" "2" "2" "2" "cell-valign" "b") (cwith "1" "-1" "4" "4" "cell-rborder" "1ln") (cwith "1" "1" "3" "3" "cell-row-span" "1") (cwith "1" "1" "3" "3" "cell-col-span" "2") (cwith "1" "1" "3" "3" "cell-rborder" "1ln") (cwith "1" "1" "1" "1" "cell-row-span" "1") (cwith "1" "1" "1" "1" "cell-col-span" "2") (cwith "1" "-1" "1" "-1" "cell-halign" "c") (cwith "2" "2" "6" "6" "cell-valign" "b") (cwith "1" "1" "7" "7" "cell-row-span" "1") (cwith "1" "1" "7" "7" "cell-col-span" "2") (cwith "1" "1" "7" "7" "cell-rborder" "1ln") (cwith "1" "1" "5" "5" "cell-row-span" "1") (cwith "1" "1" "5" "5" "cell-col-span" "2") (cwith "1" "5" "5" "7" "cell-halign" "c") (cwith "4" "4" "4" "4" "cell-rborder" "1ln") (cwith "4" "4" "3" "4" "cell-halign" "c") (cwith "1" "-1" "2" "2" "cell-halign" "l") (cwith "1" "-1" "6" "6" "cell-halign" "l") (cwith "4" "4" "6" "8" "cell-halign" "c") (cwith "4" "4" "6" "7" "cell-halign" "c") (cwith "4" "4" "6" "6" "cell-halign" "l") (cwith "5" "5" "4" "4" "cell-rborder" "1ln") (cwith "5" "5" "1" "4" "cell-halign" "c") (cwith "5" "5" "4" "4" "cell-rborder" "1ln") (cwith "5" "5" "3" "4" "cell-halign" "c") (cwith "5" "5" "2" "2" "cell-halign" "l") (cwith "5" "5" "7" "8" "cell-halign" "c") (cwith "5" "5" "7" "7" "cell-halign" "c") (cwith "5" "5" "7" "8" "cell-halign" "c") (cwith "5" "5" "7" "7" "cell-halign" "c") (cwith "6" "6" "1" "8" "cell-halign" "c") (cwith "7" "7" "4" "4" "cell-rborder" "1ln") (cwith "7" "7" "1" "4" "cell-halign" "c") (cwith "7" "7" "2" "2" "cell-halign" "l") (cwith "7" "7" "4" "4" "cell-rborder" "1ln") (cwith "7" "7" "1" "4" "cell-halign" "c") (cwith "7" "7" "2" "2" "cell-halign" "l") (cwith "7" "7" "4" "4" "cell-rborder" "1ln") (cwith "7" "7" "1" "4" "cell-halign" "c") (cwith "7" "7" "4" "4" "cell-rborder" "1ln") (cwith "7" "7" "3" "4" "cell-halign" "c") (cwith "7" "7" "2" "2" "cell-halign" "l") (cwith "6" "6" "1" "4" "cell-halign" "c") (cwith "6" "6" "2" "2" "cell-halign" "l") (cwith "6" "6" "1" "4" "cell-halign" "c") (cwith "6" "6" "1" "3" "cell-halign" "c") (cwith "6" "6" "2" "2" "cell-halign" "l") (cwith "6" "6" "3" "4" "cell-halign" "c") (cwith "6" "6" "3" "3" "cell-halign" "c") (cwith "6" "6" "3" "4" "cell-halign" "c") (cwith "6" "6" "3" "3" "cell-halign" "c") (cwith "6" "6" "8" "8" "cell-rborder" "1ln") (cwith "6" "6" "5" "8" "cell-halign" "c") (cwith "6" "6" "6" "6" "cell-halign" "l") (cwith "6" "6" "5" "8" "cell-halign" "c") (cwith "6" "6" "5" "8" "cell-halign" "c") (cwith "6" "6" "6" "6" "cell-halign" "l") (cwith "6" "6" "5" "8" "cell-halign" "c") (cwith "6" "6" "5" "7" "cell-halign" "c") (cwith "6" "6" "6" "6" "cell-halign" "l") (cwith "6" "6" "7" "8" "cell-halign" "c") (cwith "6" "6" "7" "7" "cell-halign" "c") (cwith "6" "6" "7" "8" "cell-halign" "c") (cwith "6" "6" "7" "7" "cell-halign" "c") (table (row (cell "Shortcut") (cell "") (cell "Example") (cell "") (cell "Shortcut") (cell "") (cell "Example") (cell "")) (row (cell (key "accent:acute")) (cell "Acute ") (cell (key "accent:acute e")) (cell "é") (cell (key "accent:grave")) (cell "Grave `") (cell (key "accent:grave e")) (cell "è")) (row (cell (key "accent:hat")) (cell "Hat ") (cell (key "accent:hat e")) (cell "ê") (cell (key "accent:umlaut")) (cell "Umlaut ") (cell (key "accent:umlaut e")) (cell "ë")) (row (cell (key "accent:tilde")) (cell "Tilde ") (cell (key "accent:tilde a")) (cell "ã") (cell (key "accent:cedilla")) (cell "Cedilla ") (cell (key "accent:cedilla c")) (cell "ç")) (row (cell (key "accent:breve")) (cell "Breve ") (cell (key "accent:breve g")) (cell "§") (cell (key "accent:check")) (cell "Check ") (cell (key "accent:check s")) (cell "²")) (row (cell (key "accent:abovering")) (cell "Above ring ") (cell (key "accent:abovering a")) (cell "å") (cell (key "accent:abovedot")) (cell "Above dot 
") (cell (key "accent:abovedot z")) (cell "»")) (row (cell (key "accent:doubleacute")) (cell "Hungarian ") (cell (key "accent:doubleacute o")) (cell "®") (cell "") (cell "") (cell "") (cell ""))))) "Typing accented characters.") "Special characters can also be created in any language context:" (big-table (document (descriptive-table (tformat (cwith "1" "1" "1" "-1" "cell-row-span" "1") (cwith "1" "1" "1" "-1" "cell-col-span" "2") (cwith "1" "1" "1" "-1" "cell-halign" "c") (cwith "1" "-1" "3" "3" "cell-lborder" "1ln") (cwith "1" "-1" "5" "5" "cell-lborder" "1ln") (cwith "1" "-1" "7" "7" "cell-lborder" "1ln") (cwith "1" "1" "1" "1" "cell-row-span" "1") (cwith "1" "1" "1" "1" "cell-col-span" "8") (cwith "1" "-1" "2" "2" "cell-halign" "c") (cwith "1" "-1" "4" "4" "cell-halign" "c") (cwith "1" "-1" "6" "6" "cell-halign" "c") (cwith "1" "-1" "8" "8" "cell-halign" "c") (table (row (cell "Shortcuts") (cell "") (cell "") (cell "") (cell "") (cell "") (cell "") (cell "")) (row (cell (key "symbol a")) (cell "æ") (cell (key "symbol A")) (cell "Æ") (cell (key "symbol a e")) (cell "æ") (cell (key "symbol A E")) (cell "Æ")) (row (cell (key "symbol o")) (cell "ø") (cell (key "symbol O")) (cell "Ø") (cell (key "symbol o e")) (cell "÷") (cell (key "symbol O E")) (cell "×")) (row (cell (key "symbol s")) (cell "ÿ") (cell (key "symbol S")) (cell "ß") (cell "") (cell "") (cell "") (cell "")) (row (cell (key "symbol !")) (cell "½") (cell (key "symbol ?")) (cell "¾") (cell (key "symbol p")) (cell "") (cell (key "symbol P")) (cell "¿")))))) "Typing special characters.") (concat "When you press the " (key "\"") " key, an appropriate quote will be inserted. The quote character is chosen according to the current language and the surrounding text. If the chosen quoting style is not appropriate, you can change it in " (menu "Edit" "Preferences" "Keyboard" "Automatic quotes") ". You can also insert raw quotes:") (big-table (descriptive-table (tformat (cwith "1" "-1" "3" "3" "cell-lborder" "1ln") (cwith "1" "1" "1" "-1" "cell-row-span" "1") (cwith "1" "1" "1" "-1" "cell-col-span" "2") (cwith "1" "1" "1" "-1" "cell-halign" "c") (cwith "1" "1" "1" "1" "cell-row-span" "1") (cwith "1" "1" "1" "1" "cell-col-span" "4") (cwith "1" "-1" "2" "2" "cell-halign" "c") (cwith "1" "-1" "4" "4" "cell-halign" "c") (table (row (cell "Shortcuts") (cell "") (cell "") (cell "")) (row (cell (key "symbol \"")) (cell "\"") (cell (key ", ,")) (cell "")) (row (cell (key "<less> var")) (cell "") (cell (key "<gtr> var")) (cell "")) (row (cell (key "<less> <less>")) (cell "") (cell (key "<gtr> <gtr>")) (cell ""))))) "Typing raw quotes.") (concat "English quotes are considered ligatures of two successive backticks or apostrophes. They can be created with " (key "` `") " and " (key "' '") " but these are not actual keyboard commands: the result is two characters displayed specially, not a special single character.") (concat "Some shortcuts are available in specific language contexts. You can set the text language for the whole document with " (menu "Document" "Language") " or only locally with " (menu "Format" "Language") " (see " (hlink "generalities for typing text" "text/man-generalities.en.tm") ").") (big-table (descriptive-table (tformat (cwith "1" "1" "1" "-1" "cell-row-span" "1") (cwith "1" "1" "1" "-1" "cell-col-span" "2") (cwith "1" "1" "1" "-1" "cell-halign" "c") (cwith "1" "-1" "3" "3" "cell-lborder" "1ln") (cwith "1" "-1" "5" "5" "cell-lborder" "1ln") (cwith "1" "-1" "7" "7" "cell-lborder" "1ln") (cwith "6" "11" "1" "4" "cell-bborder" "0") (cwith "6" "11" "1" "4" "cell-rborder" "0") (cwith "6" "11" "3" "3" "cell-lborder" "0") (cwith "1" "1" "5" "5" "cell-row-span" "1") (cwith "1" "1" "5" "5" "cell-col-span" "4") (twith "table-lborder" "0") (cwith "1" "-1" "1" "1" "cell-lborder" "0") (twith "table-bborder" "0") (cwith "1" "1" "1" "1" "cell-lborder" "1ln") (cwith "2" "5" "1" "1" "cell-lborder" "1ln") (cwith "5" "5" "1" "4" "cell-bborder" "1ln") (cwith "11" "11" "5" "8" "cell-bborder" "1ln") (cwith "1" "-1" "2" "2" "cell-halign" "c") (cwith "1" "-1" "4" "4" "cell-halign" "c") (cwith "1" "-1" "6" "6" "cell-halign" "c") (cwith "1" "-1" "8" "8" "cell-halign" "c") (table (row (cell "Hungarian") (cell "") (cell "Spanish") (cell "") (cell "Polish") (cell "") (cell "") (cell "")) (row (cell (key "symbol o")) (cell (with "language" "hungarian" "®")) (cell (key "! var")) (cell (with "language" "spanish" "½")) (cell (key "symbol a")) (cell (with "language" "polish" "¡")) (cell (key "symbol o")) (cell (with "language" "polish" "ó"))) (row (cell (key "symbol O")) (cell (with "language" "hungarian" "")) (cell (key "? var")) (cell (with "language" "spanish" "¾")) (cell (key "symbol A")) (cell (with "language" "polish" "")) (cell (key "symbol O")) (cell (with "language" "polish" "Ó"))) (row (cell (key "symbol u")) (cell (with "language" "hungarian" "¶")) (cell (key "! `")) (cell (with "language" "spanish" "½")) (cell (key "symbol c")) (cell (with "language" "polish" "¢")) (cell (key "symbol s")) (cell (with "language" "polish" "±"))) (row (cell (key "symbol U")) (cell (with "language" "hungarian" "")) (cell (key "? `")) (cell (with "language" "spanish" "¾")) (cell (key "symbol C")) (cell (with "language" "polish" "")) (cell (key "symbol S")) (cell (with "language" "polish" ""))) (row (cell "") (cell "") (cell "") (cell "") (cell (key "symbol e")) (cell (with "language" "polish" "¦")) (cell (key "symbol x")) (cell (with "language" "polish" "¹"))) (row (cell "") (cell "") (cell "") (cell "") (cell (key "symbol E")) (cell (with "language" "polish" "")) (cell (key "symbol X")) (cell (with "language" "polish" ""))) (row (cell "") (cell "") (cell "") (cell "") (cell (key "symbol l")) (cell (with "language" "polish" "ª")) (cell (key "symbol z")) (cell (with "language" "polish" "»"))) (row (cell "") (cell "") (cell "") (cell "") (cell (key "symbol L")) (cell (with "language" "polish" "")) (cell (key "symbol Z")) (cell (with "language" "polish" ""))) (row (cell "") (cell "") (cell "") (cell "") (cell (key "symbol n")) (cell (with "language" "polish" "«")) (cell (key "symbol z var")) (cell (with "language" "polish" "¹"))) (row (cell "") (cell "") (cell "") (cell "") (cell (key "symbol N")) (cell (with "language" "polish" "")) (cell (key "symbol Z var")) (cell (with "language" "polish" "")))))) "Language-specific text shorthands.") "Language-specific shortcuts override generic shortcuts; for example, you cannot easily type ø in hungarian context." (subsection (concat "Hybrid commands and " (LaTeX) " simulation")) (concat (TeXmacs) " allows you to enter " (LaTeX) " commands directly from the keyboard as follows. You first hit the " (key "\\") "-key in order to enter the hybrid " (LaTeX) "/" (TeXmacs) " command mode. Next you type the command you wish to execute. As soon as you finished typing your command, the left footer displays something like") (verbatim (document "    <less>return<gtr>: action to be undertaken")) (concat "When you hit the " (shortcut "(kbd-return)") "-key at this stage, your command will be executed. For instance, in math-mode, you may create a fraction by typing " (key "\\ f r a c return") ".") (concat "If the command you have typed is not a (recognized) " (LaTeX) " command, then we first look whether the command is an existing " (TeXmacs) " macro, function or environment (provided by the style file). If so, the corresponding macro expansion, function application or environment application is created (with the right number of arguments). Otherwise, it is assumed that your command corresponds to an environment variable and we ask for its value. The " (key "\\") "-key is always equivalent to one of the commands " (key "inactive l") ", " (key "inactive e") ", " (key "inactive a") ", " (key "inactive #") " or " (key "inactive v") ".") (concat "To insert a literal " (kbd "\\") " (backslash) character, you can use the " (key "symbol \\") " sequence.") (subsection "Dynamic objects") (concat "Certain more complex objects can have several " (em "states") " during the editing process. Examples of such " (em "dynamic objects") " are labels and references, because the appearance of the reference depends on a dynamically determined number. Many other examples of dynamic markup can be found in the documentation about " (hlink "writing style files" "../devel/style/keyboard/style-kbd.en.tm") ".") (concat "When entering a dynamic object like a label using " (shortcut "(make-label)") ", the default state is " (em "inactive") ". This inactive state enables you to type the information which is relevant to the dynamic object, such as the name of the label in our case. Certain dynamic objects take an arbitrary number of parameters, and new ones can be inserted using " (key "var") ".") (big-figure (document (concat (with "color" "blue" (concat (math "<langle>") "label" (math "|"))) "pythagoras" (with "color" "blue" (math "<rangle>")))) "Inactive label") (concat "When you finished typing the relevant information for your dynamic object, you may type " (shortcut "(kbd-return)") " in order to " (em "activate") " the object. An active dynamic object may be deactivated by placing your cursor just behind the object and hitting " (key "backspace") ".") (subsection "Various useful keyboard shortcuts") (concat "Some assorted shortcuts which are often useful are displayed in table" (nbsp) (reference "various-useful-shortcuts") ". Notice that spaces inserted using " (shortcut "(make-space \"1em\")") ", " (shortcut "(make-space \"0.2spc\")") " and " (shortcut "(make-space \"-0.2spc\")") " can be " (hlink (concat "resized " (em "a posteriori")) "editing/man-structured-geometry.en.tm") " using the shortcuts " (shortcut "(geometry-left)") " and" (nbsp) (shortcut "(geometry-right)") ". This kind of resizing actually works for more general horizontal and vertical spaces inserted from the menu " (menu "Format" "Space") ", as well as several other objects, such as images.") (big-table (descriptive-table (tformat (table (row (cell "Shortcut") (cell "Action")) (row (cell (shortcut "(remove-structure-upwards)")) (cell "Remove the containing object or environment.")) (row (cell (shortcut "(make 'nbsp)")) (cell "Insert a non breaking space.")) (row (cell (shortcut "(make-space \"1em\")")) (cell "Insert a quad space.")) (row (cell (shortcut "(make-space \"0.2spc\")")) (cell "Insert a small space.")) (row (cell (shortcut "(make-space \"-0.2spc\")")) (cell "Insert a small negative space.")) (row (cell (shortcut "(make-htab \"5mm\")")) (cell "Insert a tab")) (row (cell (shortcut "(go-start)")) (cell "Go to the start of the document.")) (row (cell (shortcut "(go-end)")) (cell "Go to the end of the document.")) (row (cell (shortcut "(make 'line-break)")) (cell "Insert a line break.")) (row (cell (shortcut "(make-rigid)")) (cell "Insert a rigid piece of text, which cannot be line-broken."))))) (document (concat (label "various-useful-shortcuts") "Various useful keyboard shortcuts"))) (chapter "Mathematical formulas") (concat "One of the main purposes of " (TeXmacs) " is to edit mathematical formulas. If the cursor is inside a" (nbsp) "formula (" (abbr "i.e.") " inside math mode), then the mode sensitive menus and toolbars provide buttons for entering common mathematical constructs. Similarly, as will be detailed in this section, the bahaviour of the keyboard changes so as to allow for the rapid typing of mathematical symbols. For instance, typing " (key "- <gtr>") " inserts the arrow " (math "<rightarrow>") ".") (concat "Starting with version 1.0.7.10, " (TeXmacs) " also incorporates several features for the semantic editing of mathematical formulas, which will be described at the end of this section. When used appropriately, this allows you to write documents in which all formulas are at least correct from a syntactical point of view. A syntax corrector is included to assist you with this task. Documents with more semantics are for instance useful when using formulas as inputs for a computer algebra system. Such documents are also less likely to contain typos. Other interesting features, such as semantic search and replace, should be developed in the feature.") (section "Incorporating mathematical formulas into documents") (concat (TeXmacs) " provides three main ways in order to enter a mathematical formulas into the main text:") (description (document (item* (concat (menu "Insert" "Mathematics" "Inline formula") " or " (key "$"))) (concat "This entry corresponds to small " (em "inline formulas") " like " (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))) " inside a textual paragraph. Note that formulas are typeset specially so they do not take too much vertical space. For example, limits are always displayed on the right. Limits can be displayed below in formulas with " (menu "Format" "Display style" "on") ". In formulas, formula style is off by default.") (item* (concat (menu "Insert" "Mathematics" "Displayed formula") " or " (shortcut "(make-equation*)"))) (concat "This entry is used for entering bigger " (em "displayed equations") ", like") (equation* (document (concat "x" (rsup "n") "+y" (rsup "n") "=z" (rsup "n") ","))) (concat "which are typeset in a paragraph of their own. You may use the shortcut " (shortcut "(numbered-toggle (focus-tree))") " in order to give the equation a number (or to remove the number of an equation). Also, " (shortcut "(variant-circulate (focus-tree) #t)") " allows you to switch between inline formulas and displayed equations.") (item* (concat (menu "Insert" "Mathematics" "Several equations") " or " (shortcut "(make-eqnarray*)"))) (concat "This entry allows you to create an " (markup "eqnarray*") ", a three columns wide table-like environment (see " (hlink "creating tables" "math/table/man-create-table.en.tm") "). This environment is typically used for lists of multiple relations like") (eqnarray* (document (tformat (table (row (cell "x+0") (cell "=") (cell "x")) (row (cell (concat "x+" (around "(" "<um>x" ")"))) (cell "=") (cell "0")) (row (cell "x+y") (cell "=") (cell "y+x")) (row (cell (concat (around "(" "x+y" ")") "+z")) (cell "=") (cell (concat "x+" (around "(" "y+z" ")")))))))) (concat "The first column is centered to the right, the second one at the middle and the last one at the left. An other typical use of the " (markup "eqnarray*") " environment is a step by step computation") (eqnarray* (document (tformat (table (row (cell (concat (around* "(" (concat "<mathe>" (rsup "sin x") "+sin <mathe>" (rsup "x")) ")") (rprime "'"))) (cell "=") (cell (concat (around* "(" (concat "<mathe>" (rsup "sin x")) ")") (rprime "'") "+" (around* "(" (concat "sin <mathe>" (rsup "x")) ")") (rprime "'")))) (row (cell "") (cell "=") (cell (concat (around "(" "sin x" ")") (rprime "'") "*<mathe>" (rsup "sin x") "+" (around* "(" (concat "<mathe>" (rsup "x")) ")") (rprime "'") "*sin <mathe>" (rsup "x")))) (row (cell "") (cell "=") (cell (concat "<mathe>" (rsup "sin x") "*cos x+<mathe>" (rsup "x") "*sin <mathe>" (rsup "x") ","))))))) "in which many entries of the left column are left open.")) (section "Typing mathematical symbols") (concat "The Greek characters are obtained in " (TeXmacs) " using the " (prefix "math:greek") "-key. For instance, " (key "math:greek a") " yields" (nbsp) (math "<alpha>") " and " (key "math:greek G") " yields " (math "<Gamma>") ". Similarly, " (prefix "math:bold") ", " (prefix "math:cal") ", " (prefix "math:frak") " and " (prefix "math:bbb") " can be used in order to type bold, calligraphic, fraktur and blackboard bold characters. For instance, " (shortcut "<frak-m>") " yields" (nbsp) (math "<frak-m>") ", " (key "S-F6 R") " yields" (nbsp) (math "<bbb-R>") " and " (shortcut "<b-cal-Z>") " yields " (math "<b-cal-Z>") ".") (concat "Greek characters can also be obtained as variants of Latin characters using the " (key "var") "-key. For instance, " (key "p var") " yields " (math "<pi>") ". The " (key "var") "-key is also used for obtaining variants of the Greek letters themselves. For instance, both " (key "math:greek p var") " and " (key "p var var") " yield " (math "<varpi>") ". An alternative way to enter blackboard bold characters is to type the same capital twice. For instance, " (key "Z Z") " yields" (nbsp) (math "<bbb-Z>") ".") (concat "Some symbols admit many variants. For instance, " (key "<less>") " yields " (math "<less>") ", " (key "<less> var") " yields " (math "<in>") ", " (key "<less> var var") " yields " (math "<subset>") ", " (key "<less> var var var") " yields " (math "<prec>") ", and so on. You may cycle back among the variants using" (nbsp) (key "S-var") ". For instance, " (key "<less> var var S-var") " is equivalent to " (key "<less> var") ".") (concat "Many other mathematical symbols are obtained by natural key-combinations. For instance, " (key "- <gtr>") " yields " (math (op "<rightarrow>")) ", " (key "- - <gtr>") " yields " (math (op "<longrightarrow>")) " and " (key "<gtr> =") " yields " (math (op "<geqslant>")) ". Similarly, " (key "| var -") " yields " (math (op "<vdash>")) ", " (key "| - <gtr>") " yields " (math (op "<mapsto>")) " and " (key "- <gtr> <less> -") " yields " (math (op "<rightleftarrows>")) ". The following general rules hold in order to enter mathematical symbols:") (description (document (concat (item* (key "tab")) "is the main key for obtaining variants. For instance, " (key "<gtr> =") " yields " (math (op "<geqslant>")) ", but " (key "<gtr> = var") " yields" (nbsp) (math (op "<geq>")) ". Similarly, " (key "<less> var var") " yields " (math (op "<subset>")) ", " (key "<less> var var =") " yields " (math (op "<subseteq>")) " and " (key "<less> var var = var") " yields " (math (op "<subseteqq>")) ". Also, " (key "P var") " yields" (nbsp) (math "<wp>") " and " (key "e var") " yields the constant " (math (concat "<mathe>=exp" (around "(" "1" ")"))) ".") (concat (item* (key "@")) "is used for putting symbols into circles or boxes. For instance, " (key "@ +") " yields " (math (op "<oplus>")) " and " (key "@ x") " yields " (math (op "<otimes>")) ". Similarly, " (key "@ var +") " yields " (math (op "<boxplus>")) ".") (concat (item* (key "/")) "is used for negations. For instance, " (key "= /") " yields " (math (op "<neq>")) " and " (key "<less> = /") " yields " (math (neg "<leqslant>")) ". Notice that " (key "<less> = var var /") " yields " (math (op "<nleqq>")) ", while " (key "<less> = var var / var") " yields " (math (op "<lneqq>")) ".") (concat (item* (key "!")) "is used after arrows in order to force scripts to be placed above or below the arrow. For instance, " (key "- - <gtr> ^ x") " yields " (math (op (concat "<longrightarrow>" (rsup "x") " "))) ", but " (key "- - <gtr> ! ^ x") " yields " (math (concat "<longrightarrowlim>" (rsup "x"))) "."))) (concat "The logical relations " (math "<wedge>") " and " (math "<vee>") " are obtained using " (key "&") " and " (key "%") ". The operators " (math "<cap>") " and " (math "<cup>") " are natural variants " (key "& var") " and " (key "% var") ". Various miscellaneous symbols can be optained using the " (prefix "math:symbol") " prefix.") (concat "Notice that certain symbols with a different mathematical meaning are sometimes denoted in a" (nbsp) "similar way; such symbols are called " (em "homoglyphs") ". For instance, the vertical bar " (math "|") " can be used as a" (nbsp) "separator for defining sets " (math (concat "R" (rsup "<gtr>") "=" (around* "{" "x<in>R|x<gtr>0" "}"))) ", but also as the binary relation divides" (nbsp) (rigid (math "11<divides>1001")) ". Often, but not always, homoglyphs admit a different spacing. The most annoying ambiguity is between invisible multiplication " (math "x*y") " and function application " (math "sin x") ", which are entered using the shortcuts " (key "*") " " (abbr "resp.") " " (key "space") ".") (concat "In order to facilitate certain automated treatments of your documents, such as mathematical syntax checking, we incite authors to pay attention to the homoglyph problem when entering formulas. For more information on this issue and how " (TeXmacs) " can assist you to use the appropriate notations, we refer to our section on the " (hlink "semantics of mathematical symbols" "math/semantics/man-semantics-symbols.en.tm") ".") (section "Main mathematical constructs") (concat "The main mathematical objects are created using the " (key "math") " prefix as follows:") (big-table (descriptive-table (tformat (table (row (cell "Shortcut") (cell "Purpose") (cell "Example")) (row (cell (key "math $")) (cell "Text") (cell (math (concat "L=" (around "{" (concat "x|x" (text " is sufficiently large")) "}"))))) (row (cell (key "math f")) (cell "Fractions") (cell (math (frac "a" "b+c")))) (row (cell (key "math s")) (cell "Square roots") (cell (math (sqrt "x+y")))) (row (cell (key "math S")) (cell (concat (math "n") "-th Roots")) (cell (math (sqrt (concat "x" (rsup "3") "+y" (rsup "3")) "3")))) (row (cell (key "math n")) (cell "Negations") (cell (math (neg (frac "a" "b+c")))))))) "Creation of major mathematical markup.") "Primes, subscripts and superscripts are created as follows:" (big-table (descriptive-table (tformat (table (row (cell "Shortcut") (cell "Purpose") (cell "Example")) (row (cell (key "'")) (cell "Primes") (cell (concat (math (concat "f" (rprime "'"))) " or " (math (concat (around "(" "g+h" ")") (rprime "'''")))))) (row (cell (key "`")) (cell "Back-primes") (cell (math (concat (lprime "`") "f")))) (row (cell (key "_")) (cell "Subscripts") (cell (concat (math (concat "x" (rsub "n"))) " or " (math (concat "x" (rsub (concat "i" (rsub "3")))))))) (row (cell (key "^")) (cell "Superscripts") (cell (concat (math (concat "x" (rsup "2"))) ", " (math (concat "x" (rsub "n") (rsup "2"))) " or " (math (concat "<mathe>" (rsup (concat "<mathe>" (rsup "x")))))))) (row (cell (key "math l _")) (cell "Left subscripts") (cell (math (concat (lsub "2") "x")))) (row (cell (key "math l ^")) (cell "Left superscripts") (cell (concat (math (concat (lsup "<pi>") "x")) " or " (math (concat (lsub "<ast>") (lsup "<ast>") "He" (rsub "<ast>") (rsup "<ast>"))))))))) "Creation of primes, subscripts and superscripts") (concat "Some important mathematical constructs are actually " (hlink "tabular constructs" "table/man-create-table.en.tm") " and are documented separately.") (section "Typing large delimiters") (concat "Brackets inside mathematical formulas should always match: as soon as you enter an opening bracket (" (math "") ", " (TeXmacs) " will automatically insert the matching closing bracket " (math "") "). You may disable this feature using " (menu "Edit" "Preferences" "Keyboard" "Automatic brackets" "Disable") ". Attention (see also below): brackets in old documents will be automatically be upgraded to matching brackets.") (concat "Sometimes, you do not want the closing bracket, or you may want to replace it by another closing bracket. No problem: if your cursor is just before the closing bracket inside " (math (around "(" (concat "a,b" (cursor)) ")")) ", then pressing" (nbsp) (key "]") " will turn the expression into " (math (concat (around "(" "a,b" "]") (cursor))) ". Alternatively, deletion of a bracket will actually turn it into an " (hlink "invisible bracket" "math/semantics/man-semantics-symbols.en.tm#nobracket") ", after which you can replace it by an arbitrary opening or closing bracket.") (concat "By default, the sizes of the brackets are adjusted to the expression between the brackets. Small delimiters, which are created using the " (prefix "math:small") "-prefix, keep their sizes independently of the enclosed expression. Alternatively, you may use " (shortcut "(alternate-toggle (focus-tree))") " in order to toggle between large and small delimiters.") (concat "For some delimiters, such as " (math "|") ", the opening and closing delimiters coincide. For instance, entering a vertical bar " (key "|") " will produce an absolute value. The (small) bar-separator " (math "|") " is obtained using " (shortcut "|") ", or as a variant using " (key "| var") ". The big bar-separator is entered using " (shortcut "(math-separator \"|\" #t)") ". In " (TeX) " and " (LaTeX) ", such large separators do not exist; they are used for producing the vertical bars in formulas like") (equation* (document (concat (around* "<langle>" (concat (frac "a" "b+c") (mid "|") (frac "p" "q+r") (mid "|") (frac "a" "b+c")) "<rangle>") "."))) (concat "There may be as many middle delimiters between a left and a right delimiter as one wishes. Notice that there are still another number of variants of vertical bars. For instance, the binary relation divides is entered using " (shortcut "<divides>") " or " (key "| var var var var") ".") (concat "In " (TeXmacs) ", large delimiters may either be left delimiters, right delimiters or middle delimiters. By default, " (math "(,[,{") " and " (math "<langle>") " are left delimiters, " (math "),],}") " and " (math "<rangle>") " are right delimiters. But there status can be changed using the " (prefix "math:left") ", " (prefix "math:right") " and " (prefix "math:middle") " key combinations. For instance, " (key "math:left )") " produces " (math ")") ", considered as a large left delimiter.") (concat "Sometimes you may want large delimiters of a particular size, instead of self-adjusting ones. This can be achieved by resizing the expression in between the brackets using the items in " (menu "Format" "Adjust") ".") (concat "Notice that it is possible to insert a pair of invisible brackets using " (shortcut "(math-bracket-open \".\" \".\" #t)") ". This is for instance useful in computational contexts, in which formulas should admit a precise, not merely visual semantics. Alternatively, one may put the formula inside a rigid box using" (nbsp) (shortcut "(make-rigid)") ", which additionally prevents the formula from being hyphenated.") (section "Typing big operators") "The following key-combinations are used in order to create big symbols:" (big-table (document (descriptive-table (tformat (cwith "3" "7" "2" "2" "cell-halign" "c") (cwith "3" "7" "4" "4" "cell-halign" "c") (cwith "4" "7" "1" "1" "cell-rborder" "0.5ln") (cwith "4" "7" "1" "1" "cell-bborder" "0.5ln") (cwith "4" "7" "1" "1" "cell-lborder" "0.5ln") (cwith "3" "7" "1" "1" "cell-lsep" "1spc") (cwith "3" "7" "1" "1" "cell-rsep" "1spc") (cwith "3" "7" "1" "1" "cell-bsep" "1spc") (cwith "3" "7" "1" "1" "cell-tsep" "1spc") (cwith "5" "5" "1" "1" "cell-rborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-bborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-lborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-lsep" "1spc") (cwith "5" "5" "1" "1" "cell-rsep" "1spc") (cwith "5" "5" "1" "1" "cell-bsep" "1spc") (cwith "5" "5" "1" "1" "cell-tsep" "1spc") (cwith "3" "3" "1" "1" "cell-rborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-bborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lsep" "1spc") (cwith "3" "3" "1" "1" "cell-rsep" "1spc") (cwith "3" "3" "1" "1" "cell-bsep" "1spc") (cwith "3" "3" "1" "1" "cell-tsep" "1spc") (cwith "3" "3" "1" "1" "cell-rborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-bborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lsep" "1spc") (cwith "3" "3" "1" "1" "cell-rsep" "1spc") (cwith "3" "3" "1" "1" "cell-bsep" "1spc") (cwith "3" "3" "1" "1" "cell-tsep" "1spc") (cwith "4" "7" "3" "3" "cell-rborder" "0.5ln") (cwith "4" "7" "3" "3" "cell-bborder" "0.5ln") (cwith "3" "7" "3" "3" "cell-lsep" "1spc") (cwith "3" "7" "3" "3" "cell-rsep" "1spc") (cwith "3" "7" "3" "3" "cell-bsep" "1spc") (cwith "3" "7" "3" "3" "cell-tsep" "1spc") (cwith "5" "5" "3" "3" "cell-rborder" "0.5ln") (cwith "5" "5" "3" "3" "cell-bborder" "0.5ln") (cwith "5" "5" "3" "3" "cell-lsep" "1spc") (cwith "5" "5" "3" "3" "cell-rsep" "1spc") (cwith "5" "5" "3" "3" "cell-bsep" "1spc") (cwith "5" "5" "3" "3" "cell-tsep" "1spc") (cwith "3" "3" "3" "3" "cell-rborder" "0.5ln") (cwith "3" "3" "3" "3" "cell-bborder" "0.5ln") (cwith "3" "3" "3" "3" "cell-lsep" "1spc") (cwith "3" "3" "3" "3" "cell-rsep" "1spc") (cwith "3" "3" "3" "3" "cell-bsep" "1spc") (cwith "3" "3" "3" "3" "cell-tsep" "1spc") (cwith "3" "3" "3" "3" "cell-rborder" "0.5ln") (cwith "3" "3" "3" "3" "cell-bborder" "0.5ln") (cwith "3" "3" "3" "3" "cell-lsep" "1spc") (cwith "3" "3" "3" "3" "cell-rsep" "1spc") (cwith "3" "3" "3" "3" "cell-bsep" "1spc") (cwith "3" "3" "3" "3" "cell-tsep" "1spc") (cwith "2" "2" "2" "2" "cell-halign" "c") (cwith "2" "2" "4" "4" "cell-halign" "c") (cwith "2" "2" "1" "1" "cell-lsep" "1spc") (cwith "2" "2" "1" "1" "cell-rsep" "1spc") (cwith "2" "2" "1" "1" "cell-bsep" "1spc") (cwith "2" "2" "1" "1" "cell-tsep" "1spc") (cwith "2" "2" "1" "1" "cell-rborder" "0.5ln") (cwith "2" "2" "1" "1" "cell-bborder" "0.5ln") (cwith "2" "2" "1" "1" "cell-lborder" "0.5ln") (cwith "2" "2" "1" "1" "cell-lsep" "1spc") (cwith "2" "2" "1" "1" "cell-rsep" "1spc") (cwith "2" "2" "1" "1" "cell-bsep" "1spc") (cwith "2" "2" "1" "1" "cell-tsep" "1spc") (cwith "2" "2" "1" "1" "cell-rborder" "0.5ln") (cwith "2" "2" "1" "1" "cell-bborder" "0.5ln") (cwith "2" "2" "1" "1" "cell-lborder" "0.5ln") (cwith "2" "2" "1" "1" "cell-lsep" "1spc") (cwith "2" "2" "1" "1" "cell-rsep" "1spc") (cwith "2" "2" "1" "1" "cell-bsep" "1spc") (cwith "2" "2" "1" "1" "cell-tsep" "1spc") (cwith "2" "2" "3" "3" "cell-lsep" "1spc") (cwith "2" "2" "3" "3" "cell-rsep" "1spc") (cwith "2" "2" "3" "3" "cell-bsep" "1spc") (cwith "2" "2" "3" "3" "cell-tsep" "1spc") (cwith "2" "2" "3" "3" "cell-rborder" "0.5ln") (cwith "2" "2" "3" "3" "cell-bborder" "0.5ln") (cwith "2" "2" "3" "3" "cell-lsep" "1spc") (cwith "2" "2" "3" "3" "cell-rsep" "1spc") (cwith "2" "2" "3" "3" "cell-bsep" "1spc") (cwith "2" "2" "3" "3" "cell-tsep" "1spc") (cwith "2" "2" "3" "3" "cell-rborder" "0.5ln") (cwith "2" "2" "3" "3" "cell-bborder" "0.5ln") (cwith "2" "2" "3" "3" "cell-lsep" "1spc") (cwith "2" "2" "3" "3" "cell-rsep" "1spc") (cwith "2" "2" "3" "3" "cell-bsep" "1spc") (cwith "2" "2" "3" "3" "cell-tsep" "1spc") (cwith "1" "1" "2" "2" "cell-halign" "c") (cwith "1" "1" "4" "4" "cell-halign" "c") (cwith "1" "-1" "2" "2" "cell-rborder" "1ln") (table (row (cell "Shortcut") (cell "Result") (cell "Shortcut") (cell "Result")) (row (cell (key "symbol I")) (cell (math (with "math-display" "true" (big "int")))) (cell (key "symbol O")) (cell (math (with "math-display" "true" (big "oint"))))) (row (cell (key "symbol P")) (cell (math (with "math-display" "true" (big "prod")))) (cell (key "symbol A")) (cell (math (with "math-display" "true" (big "amalg"))))) (row (cell (key "symbol S")) (cell (math (with "math-display" "true" (big "sum")))) (cell (key "symbol @ +")) (cell (math (with "math-display" "true" (big "oplus"))))) (row (cell (key "symbol @ x")) (cell (math (with "math-display" "true" (big "otimes")))) (cell (key "symbol @ .")) (cell (math (with "math-display" "true" (big "odot"))))) (row (cell (key "symbol U")) (cell (math (with "math-display" "true" (big "cup")))) (cell (key "symbol N")) (cell (math (with "math-display" "true" (big "cap"))))) (row (cell (key "symbol V")) (cell (math (with "math-display" "true" (big "vee")))) (cell (key "symbol W")) (cell (math (with "math-display" "true" (big "wedge"))))))))) "Big mathematical operators.") "The scopes of big operators are indicated visually, through the light cyan boxes around the tags which contain the cursor." "The big integral signs admit two variants, depending on where you want to place subscripts and superscripts. By default, the scripts are placed as follows:" (equation* (document (concat (big "int") (rsub "0") (rsup "<infty>") (frac "<mathd> x" (concat "1+x" (rsup "2"))) "."))) "The alternative rendering with limits" (equation* (document (concat (big "intlim") (rsub "0") (rsup "<infty>") (frac "<mathd> x" (concat "1+x" (rsup "2"))) "."))) (concat "is obtained using " (key "symbol L I") ". Similarly, you may type " (key "symbol L O") " in order to obtain " (math (big "oint")) " with limits.") (section "Wide mathematical accents") "The table below how to type mathematical accents above symbols or entire formulas. Indeed, some of these accents automatically become as wide as the formulas below them." (big-table (document (descriptive-table (tformat (cwith "3" "8" "3" "3" "cell-halign" "c") (cwith "3" "8" "5" "5" "cell-halign" "c") (cwith "4" "8" "1" "1" "cell-rborder" "0.5ln") (cwith "4" "8" "1" "1" "cell-bborder" "0.5ln") (cwith "4" "8" "1" "1" "cell-lborder" "0.5ln") (cwith "3" "8" "1" "1" "cell-lsep" "1spc") (cwith "3" "8" "1" "1" "cell-rsep" "1spc") (cwith "3" "8" "1" "1" "cell-bsep" "1spc") (cwith "3" "8" "1" "1" "cell-tsep" "1spc") (cwith "3" "3" "1" "1" "cell-rborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-bborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lsep" "1spc") (cwith "3" "3" "1" "1" "cell-rsep" "1spc") (cwith "3" "3" "1" "1" "cell-bsep" "1spc") (cwith "3" "3" "1" "1" "cell-tsep" "1spc") (cwith "3" "3" "1" "1" "cell-rborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-bborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lsep" "1spc") (cwith "3" "3" "1" "1" "cell-rsep" "1spc") (cwith "3" "3" "1" "1" "cell-bsep" "1spc") (cwith "3" "3" "1" "1" "cell-tsep" "1spc") (cwith "4" "8" "4" "4" "cell-rborder" "0.5ln") (cwith "4" "8" "4" "4" "cell-bborder" "0.5ln") (cwith "3" "8" "4" "4" "cell-lsep" "1spc") (cwith "3" "8" "4" "4" "cell-rsep" "1spc") (cwith "3" "8" "4" "4" "cell-bsep" "1spc") (cwith "3" "8" "4" "4" "cell-tsep" "1spc") (cwith "5" "5" "4" "4" "cell-rborder" "0.5ln") (cwith "5" "5" "4" "4" "cell-bborder" "0.5ln") (cwith "5" "5" "4" "4" "cell-lsep" "1spc") (cwith "5" "5" "4" "4" "cell-rsep" "1spc") (cwith "5" "5" "4" "4" "cell-bsep" "1spc") (cwith "5" "5" "4" "4" "cell-tsep" "1spc") (cwith "3" "3" "4" "4" "cell-rborder" "0.5ln") (cwith "3" "3" "4" "4" "cell-bborder" "0.5ln") (cwith "3" "3" "4" "4" "cell-lsep" "1spc") (cwith "3" "3" "4" "4" "cell-rsep" "1spc") (cwith "3" "3" "4" "4" "cell-bsep" "1spc") (cwith "3" "3" "4" "4" "cell-tsep" "1spc") (cwith "3" "3" "4" "4" "cell-rborder" "0.5ln") (cwith "3" "3" "4" "4" "cell-bborder" "0.5ln") (cwith "3" "3" "4" "4" "cell-lsep" "1spc") (cwith "3" "3" "4" "4" "cell-rsep" "1spc") (cwith "3" "3" "4" "4" "cell-bsep" "1spc") (cwith "3" "3" "4" "4" "cell-tsep" "1spc") (cwith "2" "2" "3" "3" "cell-halign" "c") (cwith "2" "2" "5" "5" "cell-halign" "c") (cwith "2" "2" "1" "1" "cell-lsep" "1spc") (cwith "2" "2" "1" "1" "cell-rsep" "1spc") (cwith "2" "2" "1" "1" "cell-bsep" "1spc") (cwith "2" "2" "1" "1" "cell-tsep" "1spc") (cwith "2" "2" "1" "1" "cell-rborder" "0.5ln") (cwith "2" "2" "1" "1" "cell-bborder" "0.5ln") (cwith "2" "2" "1" "1" "cell-lborder" "0.5ln") (cwith "2" "2" "1" "1" "cell-lsep" "1spc") (cwith "2" "2" "1" "1" "cell-rsep" "1spc") (cwith "2" "2" "1" "1" "cell-bsep" "1spc") (cwith "2" "2" "1" "1" "cell-tsep" "1spc") (cwith "2" "2" "1" "1" "cell-rborder" "0.5ln") (cwith "2" "2" "1" "1" "cell-bborder" "0.5ln") (cwith "2" "2" "1" "1" "cell-lborder" "0.5ln") (cwith "2" "2" "1" "1" "cell-lsep" "1spc") (cwith "2" "2" "1" "1" "cell-rsep" "1spc") (cwith "2" "2" "1" "1" "cell-bsep" "1spc") (cwith "2" "2" "1" "1" "cell-tsep" "1spc") (cwith "2" "2" "4" "4" "cell-lsep" "1spc") (cwith "2" "2" "4" "4" "cell-rsep" "1spc") (cwith "2" "2" "4" "4" "cell-bsep" "1spc") (cwith "2" "2" "4" "4" "cell-tsep" "1spc") (cwith "2" "2" "4" "4" "cell-rborder" "0.5ln") (cwith "2" "2" "4" "4" "cell-bborder" "0.5ln") (cwith "2" "2" "4" "4" "cell-lsep" "1spc") (cwith "2" "2" "4" "4" "cell-rsep" "1spc") (cwith "2" "2" "4" "4" "cell-bsep" "1spc") (cwith "2" "2" "4" "4" "cell-tsep" "1spc") (cwith "2" "2" "4" "4" "cell-rborder" "0.5ln") (cwith "2" "2" "4" "4" "cell-bborder" "0.5ln") (cwith "2" "2" "4" "4" "cell-lsep" "1spc") (cwith "2" "2" "4" "4" "cell-rsep" "1spc") (cwith "2" "2" "4" "4" "cell-bsep" "1spc") (cwith "2" "2" "4" "4" "cell-tsep" "1spc") (cwith "1" "1" "3" "3" "cell-halign" "c") (cwith "1" "1" "5" "5" "cell-halign" "c") (cwith "1" "-1" "3" "3" "cell-rborder" "1ln") (cwith "3" "3" "3" "3" "cell-halign" "c") (cwith "3" "3" "5" "5" "cell-halign" "c") (cwith "3" "3" "1" "1" "cell-lsep" "1spc") (cwith "3" "3" "1" "1" "cell-rsep" "1spc") (cwith "3" "3" "1" "1" "cell-bsep" "1spc") (cwith "3" "3" "1" "1" "cell-tsep" "1spc") (cwith "3" "3" "1" "1" "cell-rborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-bborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lsep" "1spc") (cwith "3" "3" "1" "1" "cell-rsep" "1spc") (cwith "3" "3" "1" "1" "cell-bsep" "1spc") (cwith "3" "3" "1" "1" "cell-tsep" "1spc") (cwith "3" "3" "1" "1" "cell-rborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-bborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lsep" "1spc") (cwith "3" "3" "1" "1" "cell-rsep" "1spc") (cwith "3" "3" "1" "1" "cell-bsep" "1spc") (cwith "3" "3" "1" "1" "cell-tsep" "1spc") (cwith "3" "3" "4" "4" "cell-lsep" "1spc") (cwith "3" "3" "4" "4" "cell-rsep" "1spc") (cwith "3" "3" "4" "4" "cell-bsep" "1spc") (cwith "3" "3" "4" "4" "cell-tsep" "1spc") (cwith "3" "3" "4" "4" "cell-rborder" "0.5ln") (cwith "3" "3" "4" "4" "cell-bborder" "0.5ln") (cwith "3" "3" "4" "4" "cell-lsep" "1spc") (cwith "3" "3" "4" "4" "cell-rsep" "1spc") (cwith "3" "3" "4" "4" "cell-bsep" "1spc") (cwith "3" "3" "4" "4" "cell-tsep" "1spc") (cwith "3" "3" "4" "4" "cell-rborder" "0.5ln") (cwith "3" "3" "4" "4" "cell-bborder" "0.5ln") (cwith "3" "3" "4" "4" "cell-lsep" "1spc") (cwith "3" "3" "4" "4" "cell-rsep" "1spc") (cwith "3" "3" "4" "4" "cell-bsep" "1spc") (cwith "3" "3" "4" "4" "cell-tsep" "1spc") (cwith "3" "3" "3" "3" "cell-rborder" "1ln") (cwith "4" "4" "5" "5" "cell-halign" "c") (cwith "4" "4" "4" "4" "cell-lsep" "1spc") (cwith "4" "4" "4" "4" "cell-rsep" "1spc") (cwith "4" "4" "4" "4" "cell-bsep" "1spc") (cwith "4" "4" "4" "4" "cell-tsep" "1spc") (cwith "4" "4" "4" "4" "cell-rborder" "0.5ln") (cwith "4" "4" "4" "4" "cell-bborder" "0.5ln") (cwith "4" "4" "4" "4" "cell-lsep" "1spc") (cwith "4" "4" "4" "4" "cell-rsep" "1spc") (cwith "4" "4" "4" "4" "cell-bsep" "1spc") (cwith "4" "4" "4" "4" "cell-tsep" "1spc") (cwith "4" "4" "4" "4" "cell-rborder" "0.5ln") (cwith "4" "4" "4" "4" "cell-bborder" "0.5ln") (cwith "4" "4" "4" "4" "cell-lsep" "1spc") (cwith "4" "4" "4" "4" "cell-rsep" "1spc") (cwith "4" "4" "4" "4" "cell-bsep" "1spc") (cwith "4" "4" "4" "4" "cell-tsep" "1spc") (cwith "5" "5" "5" "5" "cell-halign" "c") (cwith "5" "5" "4" "4" "cell-lsep" "1spc") (cwith "5" "5" "4" "4" "cell-rsep" "1spc") (cwith "5" "5" "4" "4" "cell-bsep" "1spc") (cwith "5" "5" "4" "4" "cell-tsep" "1spc") (cwith "5" "5" "4" "4" "cell-rborder" "0.5ln") (cwith "5" "5" "4" "4" "cell-bborder" "0.5ln") (cwith "5" "5" "4" "4" "cell-lsep" "1spc") (cwith "5" "5" "4" "4" "cell-rsep" "1spc") (cwith "5" "5" "4" "4" "cell-bsep" "1spc") (cwith "5" "5" "4" "4" "cell-tsep" "1spc") (cwith "5" "5" "4" "4" "cell-rborder" "0.5ln") (cwith "5" "5" "4" "4" "cell-bborder" "0.5ln") (cwith "5" "5" "4" "4" "cell-lsep" "1spc") (cwith "5" "5" "4" "4" "cell-rsep" "1spc") (cwith "5" "5" "4" "4" "cell-bsep" "1spc") (cwith "5" "5" "4" "4" "cell-tsep" "1spc") (cwith "1" "-1" "1" "1" "cell-halign" "c") (cwith "1" "-1" "4" "4" "cell-halign" "c") (cwith "1" "-1" "2" "2" "cell-halign" "c") (cwith "3" "3" "3" "3" "cell-halign" "c") (cwith "3" "3" "5" "5" "cell-halign" "c") (cwith "3" "3" "1" "1" "cell-lsep" "1spc") (cwith "3" "3" "1" "1" "cell-rsep" "1spc") (cwith "3" "3" "1" "1" "cell-bsep" "1spc") (cwith "3" "3" "1" "1" "cell-tsep" "1spc") (cwith "3" "3" "1" "1" "cell-rborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-bborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lsep" "1spc") (cwith "3" "3" "1" "1" "cell-rsep" "1spc") (cwith "3" "3" "1" "1" "cell-bsep" "1spc") (cwith "3" "3" "1" "1" "cell-tsep" "1spc") (cwith "3" "3" "1" "1" "cell-rborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-bborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lborder" "0.5ln") (cwith "3" "3" "1" "1" "cell-lsep" "1spc") (cwith "3" "3" "1" "1" "cell-rsep" "1spc") (cwith "3" "3" "1" "1" "cell-bsep" "1spc") (cwith "3" "3" "1" "1" "cell-tsep" "1spc") (cwith "3" "3" "4" "4" "cell-lsep" "1spc") (cwith "3" "3" "4" "4" "cell-rsep" "1spc") (cwith "3" "3" "4" "4" "cell-bsep" "1spc") (cwith "3" "3" "4" "4" "cell-tsep" "1spc") (cwith "3" "3" "4" "4" "cell-rborder" "0.5ln") (cwith "3" "3" "4" "4" "cell-bborder" "0.5ln") (cwith "3" "3" "4" "4" "cell-lsep" "1spc") (cwith "3" "3" "4" "4" "cell-rsep" "1spc") (cwith "3" "3" "4" "4" "cell-bsep" "1spc") (cwith "3" "3" "4" "4" "cell-tsep" "1spc") (cwith "3" "3" "4" "4" "cell-rborder" "0.5ln") (cwith "3" "3" "4" "4" "cell-bborder" "0.5ln") (cwith "3" "3" "4" "4" "cell-lsep" "1spc") (cwith "3" "3" "4" "4" "cell-rsep" "1spc") (cwith "3" "3" "4" "4" "cell-bsep" "1spc") (cwith "3" "3" "4" "4" "cell-tsep" "1spc") (cwith "3" "3" "3" "3" "cell-rborder" "1ln") (cwith "3" "3" "1" "1" "cell-halign" "c") (cwith "3" "3" "4" "4" "cell-halign" "c") (cwith "3" "3" "2" "2" "cell-halign" "c") (cwith "4" "4" "5" "5" "cell-halign" "c") (cwith "4" "4" "4" "4" "cell-lsep" "1spc") (cwith "4" "4" "4" "4" "cell-rsep" "1spc") (cwith "4" "4" "4" "4" "cell-bsep" "1spc") (cwith "4" "4" "4" "4" "cell-tsep" "1spc") (cwith "4" "4" "4" "4" "cell-rborder" "0.5ln") (cwith "4" "4" "4" "4" "cell-bborder" "0.5ln") (cwith "4" "4" "4" "4" "cell-lsep" "1spc") (cwith "4" "4" "4" "4" "cell-rsep" "1spc") (cwith "4" "4" "4" "4" "cell-bsep" "1spc") (cwith "4" "4" "4" "4" "cell-tsep" "1spc") (cwith "4" "4" "4" "4" "cell-rborder" "0.5ln") (cwith "4" "4" "4" "4" "cell-bborder" "0.5ln") (cwith "4" "4" "4" "4" "cell-lsep" "1spc") (cwith "4" "4" "4" "4" "cell-rsep" "1spc") (cwith "4" "4" "4" "4" "cell-bsep" "1spc") (cwith "4" "4" "4" "4" "cell-tsep" "1spc") (cwith "4" "4" "4" "4" "cell-halign" "c") (cwith "5" "5" "5" "5" "cell-halign" "c") (cwith "5" "5" "4" "4" "cell-lsep" "1spc") (cwith "5" "5" "4" "4" "cell-rsep" "1spc") (cwith "5" "5" "4" "4" "cell-bsep" "1spc") (cwith "5" "5" "4" "4" "cell-tsep" "1spc") (cwith "5" "5" "4" "4" "cell-rborder" "0.5ln") (cwith "5" "5" "4" "4" "cell-bborder" "0.5ln") (cwith "5" "5" "4" "4" "cell-lsep" "1spc") (cwith "5" "5" "4" "4" "cell-rsep" "1spc") (cwith "5" "5" "4" "4" "cell-bsep" "1spc") (cwith "5" "5" "4" "4" "cell-tsep" "1spc") (cwith "5" "5" "4" "4" "cell-rborder" "0.5ln") (cwith "5" "5" "4" "4" "cell-bborder" "0.5ln") (cwith "5" "5" "4" "4" "cell-lsep" "1spc") (cwith "5" "5" "4" "4" "cell-rsep" "1spc") (cwith "5" "5" "4" "4" "cell-bsep" "1spc") (cwith "5" "5" "4" "4" "cell-tsep" "1spc") (cwith "5" "5" "4" "4" "cell-halign" "c") (cwith "4" "5" "3" "3" "cell-halign" "c") (cwith "4" "5" "1" "1" "cell-rborder" "0.5ln") (cwith "4" "5" "1" "1" "cell-bborder" "0.5ln") (cwith "4" "5" "1" "1" "cell-lborder" "0.5ln") (cwith "4" "5" "1" "1" "cell-lsep" "1spc") (cwith "4" "5" "1" "1" "cell-rsep" "1spc") (cwith "4" "5" "1" "1" "cell-bsep" "1spc") (cwith "4" "5" "1" "1" "cell-tsep" "1spc") (cwith "4" "4" "1" "1" "cell-rborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-bborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-lborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-lsep" "1spc") (cwith "4" "4" "1" "1" "cell-rsep" "1spc") (cwith "4" "4" "1" "1" "cell-bsep" "1spc") (cwith "4" "4" "1" "1" "cell-tsep" "1spc") (cwith "4" "5" "3" "3" "cell-rborder" "1ln") (cwith "4" "4" "3" "3" "cell-halign" "c") (cwith "4" "4" "1" "1" "cell-lsep" "1spc") (cwith "4" "4" "1" "1" "cell-rsep" "1spc") (cwith "4" "4" "1" "1" "cell-bsep" "1spc") (cwith "4" "4" "1" "1" "cell-tsep" "1spc") (cwith "4" "4" "1" "1" "cell-rborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-bborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-lborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-lsep" "1spc") (cwith "4" "4" "1" "1" "cell-rsep" "1spc") (cwith "4" "4" "1" "1" "cell-bsep" "1spc") (cwith "4" "4" "1" "1" "cell-tsep" "1spc") (cwith "4" "4" "1" "1" "cell-rborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-bborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-lborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-lsep" "1spc") (cwith "4" "4" "1" "1" "cell-rsep" "1spc") (cwith "4" "4" "1" "1" "cell-bsep" "1spc") (cwith "4" "4" "1" "1" "cell-tsep" "1spc") (cwith "4" "4" "3" "3" "cell-rborder" "1ln") (cwith "5" "5" "3" "3" "cell-halign" "c") (cwith "5" "5" "1" "1" "cell-lsep" "1spc") (cwith "5" "5" "1" "1" "cell-rsep" "1spc") (cwith "5" "5" "1" "1" "cell-bsep" "1spc") (cwith "5" "5" "1" "1" "cell-tsep" "1spc") (cwith "5" "5" "1" "1" "cell-rborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-bborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-lborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-lsep" "1spc") (cwith "5" "5" "1" "1" "cell-rsep" "1spc") (cwith "5" "5" "1" "1" "cell-bsep" "1spc") (cwith "5" "5" "1" "1" "cell-tsep" "1spc") (cwith "5" "5" "1" "1" "cell-rborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-bborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-lborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-lsep" "1spc") (cwith "5" "5" "1" "1" "cell-rsep" "1spc") (cwith "5" "5" "1" "1" "cell-bsep" "1spc") (cwith "5" "5" "1" "1" "cell-tsep" "1spc") (cwith "5" "5" "3" "3" "cell-rborder" "1ln") (cwith "4" "5" "1" "1" "cell-halign" "c") (cwith "4" "5" "2" "2" "cell-halign" "c") (cwith "4" "4" "3" "3" "cell-halign" "c") (cwith "4" "4" "1" "1" "cell-lsep" "1spc") (cwith "4" "4" "1" "1" "cell-rsep" "1spc") (cwith "4" "4" "1" "1" "cell-bsep" "1spc") (cwith "4" "4" "1" "1" "cell-tsep" "1spc") (cwith "4" "4" "1" "1" "cell-rborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-bborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-lborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-lsep" "1spc") (cwith "4" "4" "1" "1" "cell-rsep" "1spc") (cwith "4" "4" "1" "1" "cell-bsep" "1spc") (cwith "4" "4" "1" "1" "cell-tsep" "1spc") (cwith "4" "4" "1" "1" "cell-rborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-bborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-lborder" "0.5ln") (cwith "4" "4" "1" "1" "cell-lsep" "1spc") (cwith "4" "4" "1" "1" "cell-rsep" "1spc") (cwith "4" "4" "1" "1" "cell-bsep" "1spc") (cwith "4" "4" "1" "1" "cell-tsep" "1spc") (cwith "4" "4" "3" "3" "cell-rborder" "1ln") (cwith "4" "4" "1" "1" "cell-halign" "c") (cwith "4" "4" "2" "2" "cell-halign" "c") (cwith "5" "5" "3" "3" "cell-halign" "c") (cwith "5" "5" "1" "1" "cell-lsep" "1spc") (cwith "5" "5" "1" "1" "cell-rsep" "1spc") (cwith "5" "5" "1" "1" "cell-bsep" "1spc") (cwith "5" "5" "1" "1" "cell-tsep" "1spc") (cwith "5" "5" "1" "1" "cell-rborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-bborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-lborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-lsep" "1spc") (cwith "5" "5" "1" "1" "cell-rsep" "1spc") (cwith "5" "5" "1" "1" "cell-bsep" "1spc") (cwith "5" "5" "1" "1" "cell-tsep" "1spc") (cwith "5" "5" "1" "1" "cell-rborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-bborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-lborder" "0.5ln") (cwith "5" "5" "1" "1" "cell-lsep" "1spc") (cwith "5" "5" "1" "1" "cell-rsep" "1spc") (cwith "5" "5" "1" "1" "cell-bsep" "1spc") (cwith "5" "5" "1" "1" "cell-tsep" "1spc") (cwith "5" "5" "3" "3" "cell-rborder" "1ln") (cwith "5" "5" "1" "1" "cell-halign" "c") (cwith "5" "5" "2" "2" "cell-halign" "c") (cwith "6" "6" "3" "3" "cell-halign" "c") (cwith "6" "6" "1" "1" "cell-rborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-bborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-lborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-lsep" "1spc") (cwith "6" "6" "1" "1" "cell-rsep" "1spc") (cwith "6" "6" "1" "1" "cell-bsep" "1spc") (cwith "6" "6" "1" "1" "cell-tsep" "1spc") (cwith "6" "6" "3" "3" "cell-rborder" "1ln") (cwith "6" "6" "1" "1" "cell-halign" "c") (cwith "6" "6" "2" "2" "cell-halign" "c") (cwith "6" "6" "3" "3" "cell-halign" "c") (cwith "6" "6" "1" "1" "cell-rborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-bborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-lborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-lsep" "1spc") (cwith "6" "6" "1" "1" "cell-rsep" "1spc") (cwith "6" "6" "1" "1" "cell-bsep" "1spc") (cwith "6" "6" "1" "1" "cell-tsep" "1spc") (cwith "6" "6" "3" "3" "cell-rborder" "1ln") (cwith "6" "6" "3" "3" "cell-halign" "c") (cwith "6" "6" "1" "1" "cell-lsep" "1spc") (cwith "6" "6" "1" "1" "cell-rsep" "1spc") (cwith "6" "6" "1" "1" "cell-bsep" "1spc") (cwith "6" "6" "1" "1" "cell-tsep" "1spc") (cwith "6" "6" "1" "1" "cell-rborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-bborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-lborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-lsep" "1spc") (cwith "6" "6" "1" "1" "cell-rsep" "1spc") (cwith "6" "6" "1" "1" "cell-bsep" "1spc") (cwith "6" "6" "1" "1" "cell-tsep" "1spc") (cwith "6" "6" "1" "1" "cell-rborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-bborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-lborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-lsep" "1spc") (cwith "6" "6" "1" "1" "cell-rsep" "1spc") (cwith "6" "6" "1" "1" "cell-bsep" "1spc") (cwith "6" "6" "1" "1" "cell-tsep" "1spc") (cwith "6" "6" "3" "3" "cell-rborder" "1ln") (cwith "6" "6" "1" "1" "cell-halign" "c") (cwith "6" "6" "2" "2" "cell-halign" "c") (cwith "6" "6" "3" "3" "cell-halign" "c") (cwith "6" "6" "1" "1" "cell-lsep" "1spc") (cwith "6" "6" "1" "1" "cell-rsep" "1spc") (cwith "6" "6" "1" "1" "cell-bsep" "1spc") (cwith "6" "6" "1" "1" "cell-tsep" "1spc") (cwith "6" "6" "1" "1" "cell-rborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-bborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-lborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-lsep" "1spc") (cwith "6" "6" "1" "1" "cell-rsep" "1spc") (cwith "6" "6" "1" "1" "cell-bsep" "1spc") (cwith "6" "6" "1" "1" "cell-tsep" "1spc") (cwith "6" "6" "1" "1" "cell-rborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-bborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-lborder" "0.5ln") (cwith "6" "6" "1" "1" "cell-lsep" "1spc") (cwith "6" "6" "1" "1" "cell-rsep" "1spc") (cwith "6" "6" "1" "1" "cell-bsep" "1spc") (cwith "6" "6" "1" "1" "cell-tsep" "1spc") (cwith "6" "6" "3" "3" "cell-rborder" "1ln") (cwith "6" "6" "1" "1" "cell-halign" "c") (cwith "6" "6" "2" "2" "cell-halign" "c") (cwith "7" "7" "3" "3" "cell-halign" "c") (cwith "7" "7" "1" "1" "cell-rborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-bborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-lborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-lsep" "1spc") (cwith "7" "7" "1" "1" "cell-rsep" "1spc") (cwith "7" "7" "1" "1" "cell-bsep" "1spc") (cwith "7" "7" "1" "1" "cell-tsep" "1spc") (cwith "7" "7" "3" "3" "cell-rborder" "1ln") (cwith "7" "7" "1" "1" "cell-halign" "c") (cwith "7" "7" "2" "2" "cell-halign" "c") (cwith "7" "7" "3" "3" "cell-halign" "c") (cwith "7" "7" "1" "1" "cell-rborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-bborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-lborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-lsep" "1spc") (cwith "7" "7" "1" "1" "cell-rsep" "1spc") (cwith "7" "7" "1" "1" "cell-bsep" "1spc") (cwith "7" "7" "1" "1" "cell-tsep" "1spc") (cwith "7" "7" "3" "3" "cell-rborder" "1ln") (cwith "7" "7" "3" "3" "cell-halign" "c") (cwith "7" "7" "1" "1" "cell-lsep" "1spc") (cwith "7" "7" "1" "1" "cell-rsep" "1spc") (cwith "7" "7" "1" "1" "cell-bsep" "1spc") (cwith "7" "7" "1" "1" "cell-tsep" "1spc") (cwith "7" "7" "1" "1" "cell-rborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-bborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-lborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-lsep" "1spc") (cwith "7" "7" "1" "1" "cell-rsep" "1spc") (cwith "7" "7" "1" "1" "cell-bsep" "1spc") (cwith "7" "7" "1" "1" "cell-tsep" "1spc") (cwith "7" "7" "1" "1" "cell-rborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-bborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-lborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-lsep" "1spc") (cwith "7" "7" "1" "1" "cell-rsep" "1spc") (cwith "7" "7" "1" "1" "cell-bsep" "1spc") (cwith "7" "7" "1" "1" "cell-tsep" "1spc") (cwith "7" "7" "3" "3" "cell-rborder" "1ln") (cwith "7" "7" "1" "1" "cell-halign" "c") (cwith "7" "7" "2" "2" "cell-halign" "c") (cwith "7" "7" "3" "3" "cell-halign" "c") (cwith "7" "7" "1" "1" "cell-lsep" "1spc") (cwith "7" "7" "1" "1" "cell-rsep" "1spc") (cwith "7" "7" "1" "1" "cell-bsep" "1spc") (cwith "7" "7" "1" "1" "cell-tsep" "1spc") (cwith "7" "7" "1" "1" "cell-rborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-bborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-lborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-lsep" "1spc") (cwith "7" "7" "1" "1" "cell-rsep" "1spc") (cwith "7" "7" "1" "1" "cell-bsep" "1spc") (cwith "7" "7" "1" "1" "cell-tsep" "1spc") (cwith "7" "7" "1" "1" "cell-rborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-bborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-lborder" "0.5ln") (cwith "7" "7" "1" "1" "cell-lsep" "1spc") (cwith "7" "7" "1" "1" "cell-rsep" "1spc") (cwith "7" "7" "1" "1" "cell-bsep" "1spc") (cwith "7" "7" "1" "1" "cell-tsep" "1spc") (cwith "7" "7" "3" "3" "cell-rborder" "1ln") (cwith "7" "7" "1" "1" "cell-halign" "c") (cwith "7" "7" "2" "2" "cell-halign" "c") (table (row (cell "Shortcut") (cell "Example") (cell "Wide variant") (cell "Shortcut") (cell "Result")) (row (cell (key "math ~")) (cell (math (wide "x" "~"))) (cell (math (wide "x+y" "~"))) (cell (key "math '")) (cell (math (wide "x" "<acute>")))) (row (cell (key "math ^")) (cell (math (wide "x" "^"))) (cell (math (wide "x+y" "^"))) (cell (key "math `")) (cell (math (wide "x" "<grave>")))) (row (cell (key "math B")) (cell (math (wide "x" "<bar>"))) (cell (math (wide "x+y" "<bar>"))) (cell (key "math .")) (cell (math (wide "x" "<dot>")))) (row (cell (key "math V")) (cell (math (wide "x" "<vect>"))) (cell (math (wide "AB" "<vect>"))) (cell (key "math \"")) (cell (math (wide "x" "<ddot>")))) (row (cell (key "math C")) (cell (math (wide "x" "<check>"))) (cell (math (wide "x+y" "<check>"))) (cell "") (cell "")) (row (cell (key "math U")) (cell (math (wide "x" "<breve>"))) (cell (math (wide "x+y" "<breve>"))) (cell "") (cell "")))))) "Keyboard shortcuts for wide mathemarical accents.") (concat "The same accents may be inserted below the expressions using the " (prefix "math:under") " prefix. For instance, " (key "math:under B x + y") " can be used in order to enter " (math (wide* "x+y" "<bar>")) ".") (section "Semantic editing facilities") (concat "Starting with version 1.0.7.10, " (TeXmacs) " incorporates several features for the semantic editing of mathematical formulas. When used appropriately, this allows you to write documents in which all formulas are at least correct from a syntactical point of view. For instance, in the formulas " (math "a+b") ", the computer will understand that " (math "+") " is an operator which applies to the arguments " (math "a") " and " (math "b") ". Notice that our semantics does not go any further: " (TeXmacs) " is unaware of the mathematical nature of addition.") (concat "Semantic editing does require additional efforts from the user, at least a little adaptation. For instance, it is the user's job to enter multiplications using the shortcut " (key "*") " and function applications using " (key "space") ". Indeed, from the graphical point of view, these operations cannot be distinguished, since they are both printed as invisible whitespace. However, the semantics of these operations is clearly very different.") "Although semantically correct documents are usually not very different from informal presentation-oriented documents as far as typesetting is concerned, the additional user effort may pay off for several reasons:" (itemize (document (concat (item) "Documents with more semantics are for instance useful when using formulas as inputs for a computer algebra system.") (concat (item) "Syntactically correct documents are less likely to contain typos or more intricate mathematical errors.") (concat (item) "For certain editing operations, such as cut and paste, one may directly select subformulas which are meaningful from the syntactical point of view.") (concat (item) "It reduces the risk of using non standard notations, which will be difficult to understand for potential readers of your work."))) "Furthermore, other semantic facilities might be integrated in the feature, such as semantic search and replace, or semantic search on the web." (concat "In order to activate the semantic editing facilities, please toggle " (menu "Edit" "Preferences" "Mathematics" "Semantic editing") ". In the semantic editing mode, several of the structured editing features of " (TeXmacs) " apply to the syntactic structure of the formula, rather than the visual structure of the document. For instance, the " (em "semantic focus") (label "semantic-focus") " is usually a subformula of the " (hlink "current focus" "text/man-structure.en.tm") ". Similarly, only syntactically meaningful subformulas can be selected when making a selection.") "The semantic focus is useful for several reasons. First of all, it is displayed in green if the formula is syntactically correct and in red if you made an error. This allows to quickly notice any typos while entering a formula. Secondly, if you have any doubt on the precedence of a mathematical operator or relation, then the semantic focus will inform you on the default interpretation: by putting your cursor right next to your operator, the subexpression to which the operator applies will be highlighted. In the case of an addition, or a more general associative operator, all summands are highlighted." (section "Common errors and syntax correction") "By default, the semantic editing mode understands most classical mathematical notations. This is achieved through the use of a carefully designed grammar for mainstream mathematics. Obviously, the use of a fixed grammar may cause the following problems:" (itemize (document (concat (item) "Mathematical formulas frequently contain " (em "ad hoc") " notations. For instance, the formulas might contain some text or meaningful whitespace. Another example of an " (em "ad hoc") " notation is the sign sequence " (math "++-+-+") ". In such cases, the user should " (hlink "explicitly annotate" "math/semantics/man-semantic-annotation.en.tm") " the appropriate parts of the formula in order to make them semantically meaningful.") (concat (item) "The " (TeXmacs) " grammar used for the interpretation of mathematical formulas may be incomplete or inadequate for certain situations. It is possible to customize or extend the grammar using the standard " (TeXmacs) " macro mechanism. Notations for specific areas may be grouped together in dedicated style packages."))) "Besides these intrinsically hard to avoid problems, the following common and easy-to-make mistakes are a further source of trouble for associating semantics to mathematical formulas:" (itemize (document (concat (item) "Since " (TeXmacs) " is a wysiwyg editor, some of the structure of the document is invisible for the user. For instance, the presence of a mathematical formula " (math "x+y") " is indicated through the use of an italic slant and special spacing. However, in the formula " (math (concat "f" (around* "(" "x" ")"))) " it is easy to type the closing bracket outside the formula, with no visual difference.") (concat (item) "Various mathematical notations are visually ambiguous. For instance, " (math (concat "a*" (around* "(" "b+c" ")"))) " would usually be understood as " (math (concat "a<cdot>" (around* "(" "b+c" ")"))) ", whereas " (math (concat "f" (around* "(" "x+y" ")"))) " rather corresponds to a function application. In the semantic editing mode, the user is expected to resolve this ambiguity by hand by entering multiplications using " (key "*") " and spaces using " (key "space") ". The multiply/apply ambiguity is one of the main sources of syntax errors, since many users do not pay attention to invisible differences. Similarly, the " (math "<wedge>") " glyph could be the logical and or the wedge product. This homoglyph issue will be adressed in more detail in the section on the " (hlink "semantics of mathematical symbols" "math/semantics/man-semantics-symbols.en.tm") ". ") (concat (item) "It could be that a text was originally written in " (LaTeX) " or an old version of " (TeXmacs) ". In that case, the document contains no special indication on matching brackets or the scopes of big operators. For instance, in the formula " (math (around* "[" "x,y" "[")) ", should we interpret the second bracket as a closing bracket? This is indeed the standard french notation for an interval with an open right end. More generally, all problems that we have mentioned so far tend to be present simultaneously when trying to associate semantics to existing documents."))) (concat "After activation of the semantic editing mode, you may check whether a formula is correct by positioning your cursor inside it and looking at the color of the bounding box of the " (hlink "semantic focus" "math/semantics/man-semantics.en.tm#semantic-focus") ": a" (nbsp) "green color corresponds to a correct formula and a" (nbsp) "red color indicates an error in the formula. Alternatively, assuming that the focus is on a mathematical formula, you may select " (menu "Focus" "Preferences" "Highlight incorrect formulas") ", in which all incorrect formulas are highlighted inside red boxes.") (concat "For the second kind of easy-to-make errors, " (TeXmacs) " includes an automatic syntax corrector. Assuming that your cursor is inside a formula, you may use " (menu "Edit" "Correct" "Correct all") " for the correction of all formulas in your document, or the correction of the current selection. If the versioning tool is activated, then you may use " (menu "Edit" "Correct" "Correct manually") " to show the differences between the original and the corrected versions. You may then use the versioning tool to go through these differences and select the preferred versions.") (concat "The precise algorithms which are used for the correction may be enabled or disabled from " (menu "Edit" "Preferences" "Mathematics" "Manual correction") ":") (description (document (concat (item* (menu "Remove superfluous invisible operators")) "This algorithm is used in order to remove any superfluous function applications or multiplications. For instance, users who are accustomed to editing ASCII files often type spaces around binary infixes such as addition. Such function applications will be removed by this algorithm.") (concat (item* (menu "Insert missing invisible operators")) "In " (LaTeX) ", multiplications and function applications are never entered explicitly. When importing a " (LaTeX) " document, it is therefore important to detect and insert missing multiplications and function applications.") (concat (item* (menu "Homoglyph substitutions")) "This algorithm may perform some other useful substitutions of symbols by visually similar, but semantically distinct symbols. For instance, the backslash symbol" (nbsp) (math "\\") " is replaced by the binary set differences infix (as in " (math "X<setminus>Y") "), whenever appropriate."))) (concat "From the " (menu "Edit" "Preferences" "Mathematics" "Automatic correction") ", you may also select those corrections algorithms which should be applied automatically whenever you open a file. The various corrections are always carried out when importing a " (LaTeX) " file.") "After syntax correction, the remaining errors indicate genuine typos at worst or non standard or non supported notations at best. We also notice that correct formulas do not necessarily have the intended meaning. In order to check whether the operators indeed apply to the intended arguments, you should keep an eye on the current focus while typing your formulas. " (section "Semantics of mathematical symbols") (concat "The mathematical symbols in " (TeXmacs) " all come with a certain number of properties which correspond to their intended meaning. For instance, " (TeXmacs) " is aware that " (math (op "+")) " is an infix operator, whereas ! is rather a postfix, and , a separator.") (concat (TeXmacs) " has special symbols " (math "<mathe>=2.71828<cdots>") ", " (math "<mathpi>=3.14159<cdots>") " and " (math "<mathi>") " for important mathematical constants, which display differently from the mere characters " (math "e") ", " (math "<pi>") " and " (math "i") ", and which can be entered using the shortcuts " (shortcut "<mathe>") ", " (shortcut "<mathpi>") " and " (shortcut "<mathi>") ". We recommend to systematically use these shortcuts.") (concat "Inversely, semantically distinct symbols may display in a similar way. For instance, the comma separator, as in " (math (concat "f" (around "(" "x,y" ")"))) ", is different from the decimal comma, as in " (math "3<comma>14159<cdots>") ". Notice that the two symbols admit different spacing rules. Semantically distinct symbols which are rendered by the same glyph are called " (em "homoglyphs") ". Notice that our semantics is purely syntactic: for instance, the" (nbsp) (math "+") " infix is commonly used for addition, but sometimes also for the concatenation of strings. Nevertheless, these two uses do not differ from a syntactical point of view, since the" (nbsp) (math "+") " symbol remains a binary infix with the same precedence with respect to other symbols.") (concat "The most confusing homoglyphs are the various invisible symbols supported by " (TeXmacs) ":") (itemize (document (concat (item) "The multiplication, entered by " (key "*") ". Example: " (math "a*b") ".") (concat (item) "Function application, entered by " (key "space") ". Example: " (math "sin x") ".") (concat (item) "An invisible separator, entered by " (shortcut "<nocomma>") ". Example: the matrix " (math (concat "A=" (around "(" (concat "a" (rsub "i<nocomma>j")) ")"))) ".") (concat (item) "An invisible addition, entered by " (shortcut "<noplus>") ". Example: " (math (concat "17<noplus>" (frac* "3" "8"))) ".") (concat (item) "An invisible symbol, entered by " (shortcut "<nosymbol>") ". Example: the increment " (math "<nosymbol>+1") ".") (concat (item) (label "nobracket") "An invisible bracket (mainly for internal use). A matching pair of invisible brackets is entered using " (key "( var") "."))) (concat "Again it is recommended that authors carefully enter these various invisible symbols when appropriate. It is particularly important to distinguish between multiplication and function application, since there is no 100% safe automatic way to make this distinction (we already mentioned the formulas " (math (concat "a" (around "(" "b+c" ")"))) " and " (math (concat "f" (around "(" "x+y" ")"))) " before).") (concat (TeXmacs) " supports two quite general schemes for entering homoglyphs. On the one hand, we often rely on the standard variant system. For instance, " (math "<times>") " and " (math "<ast>") " are obtained using " (shortcut "<times>") " and " (shortcut "<ast>") ". In table" (nbsp) (reference "homoglyph-table") " we have given the complete list of homoglyphs supported by " (TeXmacs) ".") (big-table (block (tformat (table (row (cell "Shortcut") (cell "Glyph") (cell "Example") (cell "Semantics")) (row (cell (key "*")) (cell "") (cell (math "a*b")) (cell "Multiplication")) (row (cell (key "space")) (cell "") (cell (math "sin x")) (cell "Function application")) (row (cell (shortcut "<nocomma>")) (cell "") (cell (math (concat "a" (rsub "i<nocomma>j") "=a" (rsub "j<nocomma>i")))) (cell "Invisible separator")) (row (cell (shortcut "<noplus>")) (cell "") (cell (with "mode" "math" (concat "17<noplus>" (frac* "3" "8")))) (cell "Invisible addition")) (row (cell (shortcut "<nosymbol>")) (cell "") (cell (math "<nosymbol>+1")) (cell "Invisible symbol")) (row (cell (key "( var")) (cell "") (cell (math (concat "<Phi><equiv>" (around* "<nobracket>" (concat "<forall>x,P" (around* "(" "x" ")")) "<nobracket>")))) (cell "Invisible bracket(s)")) (row (cell (key "|")) (cell (math "|")) (cell (math (concat (around* "|" "-x" "|") "=" (around* "|" "x" "|")))) (cell "Absolute value")) (row (cell (key "| var")) (cell (math "|")) (cell (math (around* "{" "x<in><bbb-R>|x<gtr>0" "}"))) (cell "Separating bar")) (row (cell (key "| var var")) (cell (math "|")) (cell (math (around* "<langle>" (concat "a" (rsub "i") (rsup "2") (mid "|") "a" (rsub "j") (rsup "2")) "<rangle>"))) (cell "Extensible middle bar")) (row (cell (key "| var var var var")) (cell (math "|")) (cell (math "11<divides>1001")) (cell "Divides relation")) (row (cell (key ",")) (cell ",") (cell (math (concat "f" (around* "(" "x,y" ")")))) (cell "Comma separator")) (row (cell (key ", var")) (cell ",") (cell (math "123<comma>456")) (cell "Decimal comma")) (row (cell (key ".")) (cell ".") (cell (math "123.456")) (cell "Decimal point")) (row (cell (key ". var")) (cell ".") (cell (math (concat "<mathlambda>x<point>x" (rsup "2")))) (cell "Dot connector")) (row (cell (key "* var var var")) (cell (math "<cdot>")) (cell (math "<b-v><cdot><b-w>")) (cell "Dot multiplication")) (row (cell (key ". var var")) (cell (math "<cdummy>")) (cell (math "<cdummy>+1")) (cell "Dummy widcard")) (row (cell (key ":")) (cell (math ":")) (cell (math (around* "{" (concat "x<in>E:P" (around* "(" "x" ")")) "}"))) (cell "Separator")) (row (cell (shortcut "<of>")) (cell (math "<of>")) (cell (math (concat "x<of>" (math-ss "Int")))) (cell "Type satisfaction")) (row (cell (shortcut "<over>")) (cell (math "<over>")) (cell (math "121<over>11=11")) (cell "Division")) (row (cell (key "\\ var")) (cell (math "\\")) (cell (math "\\x")) (cell "Backslash")) (row (cell (key "\\ var var")) (cell (math "\\")) (cell (math (concat "<bbb-N>" (rsup "<gtr>") "=<bbb-N><setminus>" (around* "{" "0" "}")))) (cell "Set minus")) (row (cell (key "&")) (cell (math "<wedge>")) (cell (math "1=1<wedge>2=2")) (cell "Logical and")) (row (cell (key "* &")) (cell (math "<exterior>")) (cell (math "<mathd>x<exterior><mathd>y")) (cell "Wedge product"))))) (concat (label "homoglyph-table") "Homoglyphs supported by " (TeXmacs) ".")) (section "Customized mathematical semantics") "We have done our best to support most of the classical mathematical notations. Nevertheless, the user may sometimes want to define notations with a non standard semantics. Certain areas may also require special notations which are not supported by default." (concat (TeXmacs) " provides a very simple " (markup "syntax") " primitive, which allows the user to manually override the default syntactical semantics of a formula. Assuming that semantic editing was activated, you may insert the " (markup "syntax") " primitive using " (shortcut "(make 'syntax)") " or " (menu "Insert" "Semantics" "Other") ". The first argument contains the formula as it should be displayed, whereas the second argument contains the formula as it should be interpreted.") (concat "For instance, if we enter " (math "<cal-R>") " as the first argument and " (math "<less>") " as the second one, then the " (math "<cal-R>") " will be interpreted as a binary relation, exactly in the same way as " (math "<less>") ". Moreover, the spacing around " (math "<cal-R>") " will be adapted, so as to mimick the spacing around " (math "<less>") ". In this particular example, we might have obtained the same result by using the " (markup "math-relation") " primitive, which is equivalent to " (markup "syntax") " with" (nbsp) (math "<less>") " as its second argument. Most standard operator types are available from " (menu "Insert" "Semantics") ", or using the " (prefix "math:syntax") " keyboard prefix. In particular, you may use " (shortcut "(make 'math-ignore)") " to simply ignore a formula and " (shortcut "(make 'math-ordinary)") " in order to make the formula behave as an ordinary symbol (such as the letter o).") (concat "The " (markup "syntax") " primitive is especially powerful when used in combination with the " (TeXmacs) " macro language. For instance, consider the formula " (math (concat "C=1/2*<mathpi>*<mathi>*" (big "oint") "f" (around* "(" "z" ")") "*<mathd> z")) ". It is likely that the inteded interpretation of " (math "1/2*<mathpi>*<mathi>") " is " (math (concat "1/" (around* "(" "2*<mathpi>*<mathi>" ")"))) " and not " (math (concat (around* "(" "1/2" ")") "*<mathpi>*<mathi>")) ". Therefore, if we often use the constant " (math "2*<mathpi>*<mathi>") ", then we might want to define a macro" (nbsp) (markup "twopii") " by") (tm-fragment (document (inactive (assign "twopii" (inactive (macro (inactive (syntax (math "2*<pi>*<mathi>") (math "(2*<pi>*<mathi>)"))))))))) (concat "Such macros may be grouped together into a style package with the user's favourite notations. Future versions of " (TeXmacs) " might also provide style packages with notations dedicated to specific" (nbsp) "areas.") (concat "Let us finally notice that there are usually several ways for redefining the semantics of a formula. For instance, an alternative way to define the macro " (markup "twopii") " is using") (tm-fragment (document (inactive (assign "twopii" (inactive (macro (math (around* "<nobracket>" "2*<mathpi>*<mathi>" "<nobracket>")))))))) (concat "where we inserted a pair of invisible brackets around " (math "2*<mathpi>*<mathi>") ". Similarly, in the formula") (equation* (document (concat "<mathe>" (rsup (concat (sqrt "x") "+<mathe>" (rsup (concat (sqrt "log x") "+<mathe>" (rsup (concat (sqrt "log log x") "+" (math-ordinary "<udots><ddots>") "+log log log x")) "+log log x")) "+log x")) ","))) (concat "we may either select the whole formula and give it the semantics of an ordinary symbol, by pressing" (nbsp) (shortcut "(make 'math-ordinary)") ". However, a nicer solution is to only select the subformula " (math (math-ordinary "<udots><ddots>")) ", and give it the semantics of an ordinary symbol. Yet another example is the sign sequence " (math "++-+-+") " mentioned earlier. This sequence can be interpreted correctly by inserting invisible separators between the different signs using the " (key ", space") " shortcut.") (chapter "Tabular material") (concat "Tables offer a general way to align markup in complex manners. They can be useful for the presentation of data, but also for typesetting computer programs or the design of web sites. " (TeXmacs) " provides a wide variety of parameters to control the precise layout of tables and its cells.") (section "Creating tables") (concat "In order to create a table, you may either use " (menu "Insert" "Table") " or one of the following keyboard shorthands:") (description (document (concat (item* (key "table N t")) "Create a plain table.") (concat (item* (key "table N T")) "Create a table whose cells are centered.") (concat (item* (key "table N b")) "Create a block, whose cells all have a small border.") (concat (item* (key "table N B")) "Create a block whose cells are centered."))) "In math mode, a few other table-like structures are provided:" (description (document (concat (item* (key "table N m")) "Create a matrix.") (concat (item* (key "table N d")) "Create a determinant.") (concat (item* (key "table N c")) "Create a choice list."))) (concat "Examples of a plain table, a centered block and a matrix are shown below. Notice that the environments with the explanatory text below the tables were created using " (menu "Insert" "Table" "Small table") ". The use of small tables allows you to put several tables besides each other on the same line. For a single large table, one may use " (menu "Insert" "Table" "Big table") "." (vspace "0.5fn")) (with "par-mode" "center" (document (concat (small-table (tabular (tformat (table (row (cell "boom") (cell "tree")) (row (cell "hallo") (cell "hello")) (row (cell "wiskunde") (cell "mathematics"))))) "A plain table.") (small-table (block* (tformat (table (row (cell "boom") (cell "tree")) (row (cell "hallo") (cell "hello")) (row (cell "wiskunde") (cell "mathematics"))))) "A centered block.") (small-table (math (with "math-display" "true" (matrix (tformat (table (row (cell "a") (cell "b")) (row (cell "c") (cell "d"))))))) "A matrix.")))) (concat (vspace* "0.5fn") "There are several other table-like environments and new ones may be created by the user. For instance, using " (menu "Insert" "Mathematics" "Equations") " or " (key "math &") ", you may insert an " (markup "eqnarray*") " environment, which allows mathematically oriented users to align a list of equations which span over entire lines. An example of such a list of equations is") (eqnarray* (document (tformat (table (row (cell (concat "sin " (around "(" (concat "f" (around "(" "x" ")") "*g" (around "(" "x" ")")) ")") (rprime "'"))) (cell "=") (cell (concat (around "(" (concat "f" (around "(" "x" ")") "*g" (around "(" "x" ")")) ")") (rprime "'") "*cos " (around "(" (concat "f" (around "(" "x" ")") "*g" (around "(" "x" ")")) ")")))) (row (cell "") (cell "=") (cell (concat (around "(" (concat "f" (rprime "'") (around "(" "x" ")") "*g" (around "(" "x" ")") "+f" (around "(" "x" ")") "*g" (rprime "'") (around "(" "x" ")")) ")") "*cos " (around "(" (concat "f" (around "(" "x" ")") "*g" (around "(" "x" ")")) ")")))))))) (concat "When starting a new table, its size is minimal (usually " (math "1<times>1") ") and its cells are empty. New rows and columns are inserted using the " (shortcut "(structured-insert-left)") ", " (shortcut "(structured-insert-right)") ", " (shortcut "(structured-insert-up)") " and " (shortcut "(structured-insert-down)") " shorthands. For instance, " (shortcut "(structured-insert-right)") " creates a new column at the right of the current cursor position, as illustrated in the figure below. You may also start a new row below the current cursor position by hitting " (shortcut "(kbd-return)") ".") (big-figure (document (equation* (document (concat (matrix (tformat (table (row (cell (concat "a" (cursor))) (cell "b")) (row (cell "c") (cell "d"))))) (space "2em") "<longrightarrow>" (space "2em") (matrix (tformat (table (row (cell "a") (cell (cursor)) (cell "b")) (row (cell "c") (cell "") (cell "d"))))))))) (document (concat "Example of the insertion of a new column in a matrix. Assuming that the cursor is at the position indicated in the left-hand matrix, insertion of a new column using " (shortcut "(structured-insert-right)") " results in the right-hand matrix."))) (section "The formatting mode") (concat "In " (TeXmacs) ", arbitrary blocks of cells in the table may be formatted in particular ways. For instance, you may give individual cells a background color, but you may also decide an entire column to be horizontally centered. By default, formatting commands operate on individual cells, but this may be changed via " (menu "Table" "Cell operation mode") ". The following operation modes are available:") (description (document (concat (item* (key "table m c")) "Operate on individual cells.") (concat (item* (key "table m h")) "Operate on rows.") (concat (item* (key "table m v")) "Operate on columns.") (concat (item* (key "table m t")) "Operate on the entire table."))) "It is also possible to select a block of cells using the mouse and perform a single operation on that rectangle." (section "Specifying the cell and table alignment") (concat "The most frequent formatting operation is the horizontal or vertical alignment of a block of cells. You may use the " (shortcut "(positioning-left)") ", " (shortcut "(positioning-right)") ", " (shortcut "(positioning-up)") " and " (shortcut "(positioning-down)") " keystrokes to quickly align more to the left, right, top or bottom.") (concat "A specific alignment can also be selected in the " (menu "Table" "Horizontal cell alignment") " and " (menu "Table" "Vertical cell alignment") " menus. Alternatively, you may use keyboard shorthands of the types " (key "table h") (render-key (math "x")) " and " (key "table v ") (render-key (math "x")) " for horizontal resp. vertical alignment.") (concat "Similarly, you may specify how the table itself should be aligned with respect to the surrounding text. This is either done via the " (menu "Table" "Horizontal table alignment") " and " (menu "Table" "Vertical table alignment") " submenus, or using keyboard shorthands of the form " (key "table H") (render-key (math "x")) " or " (key "table V") (render-key (math "x")) ". Here " (render-key (math "x")) " represents " (key "l") " for left, " (key "c") " for centered, " (key "r") " for right, " (key "b") " for bottom and " (key "t") " for top.") (section "Specifying the cell and table size") (concat "Using " (menu "Table" "Cell width" "Set width") " resp. " (menu "Table" "Cell height" "Set height") " you may specify the width or height of a cell. In fact, the specified width (or height) may be taken into account in three different ways:") (description (document (concat (item* "Minimum mode") "The actual width of the cell will be the minimum of the specified width and the width of the box inside the cell.") (concat (item* "Exact mode") "The width of the cell will be precisely the specified one.") (concat (item* "Maximum mode") "The actual width of the cell will be the maximum of the specified width and the width of the box inside the cell."))) "The border width and the cell padding (to be explained below) are taken into account in the size of the box inside the cell." (concat "You may also specify the width and the height of the entire table in " (menu "Table" "Special table properties") ". In particular, you may specify the table to run over the entire width of a paragraph. When specifying a width (or height) for the entire table, you may specify how the unused space is distributed over the cells using " (menu "Table" "Special cell properties" "Distribute unused space") ". By default, the unused space is equally distributed.") (section "Borders, padding and background color") (concat "You may specify the border widths and padding spaces of a cell in all possible four directions: on the left, on the right, at the bottom and at the top (see " (menu "Table" "Cell border") "). You have keyboard shorthands of the forms " (key "table b") (render-key (math "x")) " and " (key "table p ") (render-key (math "x")) " in order to specify border widths and cell padding.") (concat "The default border width for cells in the block environment is " (verbatim "1ln") ", i.e. the standard line width in the current font (like the width of a fraction bar). This width occurs at the right and the bottom of each cell (except when the cell is on the first row or column). The default horizontal cell padding is " (verbatim "1spc") ": the width of a white space in the current font. The default vertical cell padding is " (verbatim "1sep") ": the standard minimal separation between two close boxes.") (concat "Cells may be given a background color via " (menu "Table" "Cell background color") ".") (concat "The entire table may also be given a border and a table padding in " (menu "Table" "Special table properties" "Border") ". In this case, the padding occurs outside the border.") (section "Advanced table features") "In the menus, you also find some other more special features for tables. Very briefly, these include the following:" (itemize (document (concat (item) "Change the span of a cell and let it run over its neighbouring cells on its right and below.") (concat (item) "Creation of entire subtables inside cells.") (concat (item) "Correction of the depth and height of text, in order to let the baselines match.") (concat (item) "Horizontal hyphenation of cell contents and vertical hyphenation of the entire table.") (concat (item) "Gluing several rows and/or columns together, so that the glued cells become part of the borders of the remaining cells.") (concat (item) "Disactivation of the table, in order to see its source code.") (concat (item) "Setting the extension center of a table. From now on, the formatting properties of this cell will be used for new cells created around this center.") (concat (item) "Specification of the minimal and maximum size of a table, which will be respected during further editing. (this is mainly useful when creating table macros)."))) (concat "Currently, all tables come inside an environment like " (markup "tabular") ", " (markup "block") ", " (markup "matrix") ", etc. When creating your own table macros, you may use " (menu "Table" "Special table properties" "Extract format") " to extract the format from a given table.") (chapter "Links and automatically generated content") (section "Creating labels, links and references") (concat "You may create a new inactive label using " (shortcut "(make-label)") " or " (menu "Insert" "Link" "Label") " and a reference to this label using " (shortcut "(make 'reference)") " or " (menu "Insert" "Link" "Reference") ". After typing the name of the label or reference, remember to hit " (shortcut "(kbd-return)") " in order to " (hlink "activate" "text/keyboard/man-hybrid.en.tm") " it. You may also type the first characters of the name of a reference and use the " (key "tab") " key in order to automatically complete it.") (concat "You should be careful to put the label at a point where its number will be correct. When labeling sections, the recommended place is just after the sectional tag. When labeling single equations (created using " (menu "Insert" "Mathematics" "Equation") "), the recommended place is at the start inside the equation. When labeling multiple equations (created using " (menu "Insert" "Mathematics" "Equations") "), you must put the labels just behind the equation numbers. Recall that you may use " (shortcut "(numbered-toggle (focus-tree))") " in order to transform an unnumbered environment or equation into a numbered one, and vice versa.") (concat "It is possible to create hyperlinks to other documents using " (key "inactive <gtr>") " or " (menu "Insert" "Link" "Hyperlink") ". The first field of the hyperlink is the associated text, which is displayed in blue when activated. The second field contains the name of a document, which may be on the web. As is usual for hyperlinks, a link of the form " (verbatim (concat "#" (with "font-shape" "italic" "label"))) " points to a label in the same document and a link of the form " (verbatim (concat (with "font-shape" "italic" "url") "#" (with "font-shape" "italic" "label"))) " points to a label in the document located at " (verbatim (with "font-shape" "italic" "url")) ".") (concat "In a similar fashion, an action may be associated to a piece of text or graphics using " (key "inactive *") " or " (menu "Insert" "Link" "Action") ". The second field now contains a Guile/Scheme script command, which is executed whenever you double click on the text, after its activation. For security reasons, such scripts are not always accepted. By default, you are prompted for acceptation; this default behaviour may be changed in " (menu "Options" "Security") ". Notice that the Guile/Scheme command ") (verbatim (document "    (system \"shell-command\")")) (concat "evaluates " (verbatim "shell-command") " as a shell command.") (concat "Finally, you may directly include other documents inside a given document using " (key "inactive i") " or " (menu "Insert" "Link" "Include") ". This allows you for instance to include the listing of a program in your text in such a way that your modifications in your program are automatically reflected in your text.") (section "Inserting images") (concat "You can include images in the text using the menu " (menu "Insert" "Image") ". Currently, " (TeXmacs) " recognizes the " (verbatim "ps") ", " (verbatim "eps") ", " (verbatim "tif") ", " (verbatim "pdf") ", " (verbatim "pdm") ", " (verbatim "gif") ", " (verbatim "ppm") ", " (verbatim "xpm") " and " (verbatim "fig") " file formats. Here, " (verbatim "gs") " (i.e. ghostscript) is used to render postscript images. If ghostscript has not yet been installed on your system, you can download this package from ") (verbatim (document "    www.cs.wisc.edu/~ghost/index.html")) (concat "Currently, the other file formats are converted into postscript files using the scripts " (verbatim "tiff2ps") ", " (verbatim "pdf2ps") ", " (verbatim "pnmtops") ", " (verbatim "giftopnm") ", " (verbatim "ppmtogif") ", " (verbatim "xpmtoppm") ". If these scripts are not available on your system, please contact your system administrator.") "By default, images are displayed at their design sizes and aligned at their bottom lines. Alternative widths, heights and alignment offsets may be specified in the image chooser dialogue window. " (itemize (document (concat (item) "When specifying a new width, but no height at the prompt (or vice versa), the image is resized so as to preserve the aspect ration. For instance, entering a width of " (verbatim "1par") " will make the image span over the entire paragraph width and adjust the height proportionally.") (concat "You may use " (verbatim "w") " and " (verbatim "h") " as special lengths for the default width and height of the image. For instance, specifying " (verbatim "2w") " and " (verbatim "2h") " for the width and the height, the image will be displayed at twice its default size.") (concat (item) "When specifying an alternative alignment, you may use the " (verbatim "w") " and " (verbatim "h") " lengths for the displayed width and height (" (abbr "i.e.") " " (verbatim "w") " and " (verbatim "h") " no longer stand for the default width and height). For instance, using " (verbatim "-0.5h") " for the " (math "y") "-offset will vertically align the image at its center."))) (concat "We also included a script to convert " (name "Xfig") " pictures, with optional " (LaTeX) " formulas in it, into encapsulated postscript. In order to include a " (LaTeX) " formula in an " (verbatim "xfig") " picture, we recall you should enter the formula as text, while selecting a " (LaTeX) " font and setting the special flag in the text flags.") (section "Generating a table of contents") (concat "It is very easy to generate a table of contents for your document. Just put your cursor at the place where you want your table of contents and click on " (menu "Insert" "Automatic" "Table of contents") ".") (concat "In order to generate the table of contents, you should be in a mode where page breaks are visible (select paper in " (menu "Document" "Page" "Type") "), so that the appropriate references to page numbers can be computed. Next, use " (menu "Document" "Update" "Table of contents") " or " (menu "Document" "Update" "All") " to generate the table of contents. You may have to do this several times, until the document does not change anymore. Indeed, the page numbers may change as a result of modifications in the table of contents!") (section "Compiling a bibliography") (subsubsection* "Editing files with bibliographic entries") (concat (TeXmacs) " uses the " (BibTeX) " model for its bibliographies. Manuals about " (BibTeX) " can easily be found at various places on the web. " (BibTeX) " files can either be entered and edited using " (TeXmacs) " itself or using an external tool. Some external tools offer possibilities to search and retrieve bibliographic entries on the web, which can be a reason to prefer such tools from time to time. " (TeXmacs) " implements good converters for " (BibTeX) " files, so several editors can easily be used in conjunction.") (concat "The built-in editor for " (BibTeX) " files is automatically used for files with the " (verbatim ".bib") " extension. New items can easily be added using " (menu "Insert" "Database entry") ". When creating a new entry, required fields appear in dark blue, alternative fields in dark green and optional fields in light blue. The special field inside the header of your entry is the name of your entry, which will be used later for references to this entry. When editing a field, you may use " (shortcut "(kbd-return)") " to confirm it and jump to the next one (blank optional fields will automatically be removed when doing this). When the cursor is inside a bibliographic entry, additional fields may also be added using " (menu "Focus" "Insert above") " and " (menu "Focus" "Insert below") ".") (concat (BibTeX) " contains a few unnatural conventions for entering names of authors and managing capitalization inside titles. When editing " (BibTeX) " files using " (TeXmacs) ", these conventions are replaced by the following more user friendly conventions:") (itemize (document (concat (item) "When entering authors (inside Author or Editor fields), use the " (markup "name") " tag for specifying last names (using " (menu "Insert" "Last name") " or " (shortcut "(make 'name)") ") For instance, Albert Einstein should be entered as Albert " (name "Einstein") " or as A. " (name "Einstein") ". Special particles such as von can be entered using " (menu "Insert" "Particle") ". Title suffices such as Jr. can be entered similarly using " (menu "Insert" "Title suffix") ".") (concat (item) "When entering titles, do not capitalize, except for the first character and names or concepts that always must be. For instance, use Riemannian geometry instead of Riemannian Geometry and Differential Galois theory instead of Differential Galois Theory."))) (subsubsection* "Inserting citations and compiling bibliographies") (concat "Assuming that you have created a " (verbatim ".bib") " file with your bibliographic references, the mechanism to automatically compile a bibliography is the following:") (itemize (document (concat (item) "Use " (menu "Insert" "Link" "Citation") " and " (menu "Insert" "Link" "Invisible citation") " to insert citations, which correspond to entries in your " (verbatim ".bib") " file.") (concat (item) "At the place where your bibliography should be compiled, click on " (menu "Insert" "Automatic" "Bibliography") ". At the prompt, you should enter a " (verbatim "bibtex") " style (such as " (verbatim "plain") ", " (verbatim "alpha") ", " (verbatim "abbrv") ", etc.) and your " (verbatim ".bib") " file.") (concat (item) "Use " (menu "Document" "Update" "Bibliography") " in order to compile your bibliography."))) (concat "Notice that additional BiB" (TeX) " styles should be put in the directory " (verbatim "~/.TeXmacs/system/bib") ".") (section "Generating an index") (concat "For the generation of an index, you first have to put index entries in your document using " (menu "Insert" "Link" "Index entry") ". At a second stage, you must put your cursor at the place where you want your index to be generated and click on " (menu "Insert" "Automatic" "Index") ". The index is than generated in a similar way as the table of contents.") (concat "In the " (menu "Insert" "Link" "Index entry") " menu, you find several types of index entries. The simplest are main, sub, subsub, which are macros with one, two and three arguments respectively. Entries of the form sub and subsub may be used to subordinate index entries with respect to other ones.") (concat "A complex index entry takes four arguments. The first one is a key how the entry has to be sorted and it must be a tuple (created using " (key "inactive <less>") ") whose first component is the main category, the second a subcategory, etc. The second argument of a complex index entry is either blank or strong, in which case the page number of your entry will appear in a bold typeface. The third argument is usually blank, but if you create two index entries with the same non-blank third argument, then this will create a range of page numbers. The fourth argument, which is again a tuple, is the entry itself.") (concat "It is also possible to create an index line without a page number using interject in " (menu "Insert" "Link" "Index entry") ". The first argument of this macro is a key for how to sort the index line. The second argument contains the actual text. This construct may be useful for creating different sections A, B, etc. in your index.") (section "Compiling a glossary") "Glossaries are compiled in a similar way as indexes, but the entries are not sorted. A regular glossary entry just contains some text and a page number will be generated for it. An explained glossary entry contains a second argument, which explains the notation. A duplicate entry may be used to create a page number for the second occurence of an entry. A glossary line creates an entry without a page number." (section "Multiple extractions") (concat (TeXmacs) " allows users to create multiple bibliographies, tables of contents, indexes, " (abbr "etc.") " inside the same document. Let us explain how to do this for bibliographies; the procedure is similar for other types of automatically generated content.") (concat "First of all, every separate bibliography is identified by a name. The default name of the bibliography is " (verbatim "bib") ". Using " (menu "Insert" "Link" "Alternate" "Bibliography") ", it is possible to specify a different bibliography (than the default one) for a certain region of text.") (concat "For instance, to specify that a given citation should appear in a second bibliography with name " (verbatim "bib2") ", you should proceed as follows:") (itemize (document (concat (item) "Click on " (menu "Insert" "Link" "Alternate" "Bibliography") " and enter " (verbatim "bib2") " on the prompt. This will insert an empty " (markup "with-bib") " tag into your document, with the cursor inside.") (concat (item) "Inside this " (markup "with-bib") " tag, enter your citation, using " (menu "Insert" "Link" "Citation") "."))) (concat "If needed, the " (markup "with-bib") " tag can be made to span over a large portion of text. All citations inside this span will be be put into the bibliography with name " (verbatim "bib2") ".") (concat "The bibliography " (verbatim "bib2") " itself should be created in a similar way: first click on " (menu "Insert" "Link" "Alternate" "Bibliography") " and enter " (verbatim "bib2") " on the prompt. Next insert the bibliography as usual, " (em "via") " " (menu "Insert" "Automatic" "Bibliography") ". Now do " (menu "Document" "Update" "All") " as many times as need in order to generate the bibliography and get all links right.") (section "Books and multifile documents") (concat "When a document gets really large, you may want to subdivide it into smaller pieces. This both makes the individual pieces more easily reusable in other works and it improves the editor's responsiveness. An entire file can be inserted into another one using " (menu "Insert" "Link" "Include") ". In order to speed up the treatment of included documents, they are being buffered. In order to update all included documents, you should use " (menu "Tools" "Update" "Inclusions") ".") (concat "When writing a book, one usually puts the individual chapters in files " (verbatim "c1.tm") ", " (verbatim "c2.tm") " until " (verbatim "cn.tm") ". One next creates one file " (verbatim "book.tm") " for the whole book, in which the files " (verbatim "c1.tm") ", " (verbatim "c2.tm") " until " (verbatim "cn.tm") " are included using the above mechanism. The table of contents, bibliography, etc. are usually put into " (verbatim "book.tm") ".") (concat "In order to see cross references to other chapters when editing a particular chapter " (verbatim "ci.tm") ", one may specify " (verbatim "book.tm") " as a master file for the files " (verbatim "c1.tm") " to " (verbatim "cn.tm") " using " (menu "Tools" "Project" "Attach master...") ". Currently, the chapter numbers themselves are not dealt with by this mechanism, so you may want to manually assign the environment variable " (src-var "chapter-nr") " at the start of each chapter file in order to get the numbering right when editing.") (chapter "Creating technical pictures") (concat "Besides the possibility to include pictures which were created using other programs, " (TeXmacs) " includes a rudimentary tool for creating your own drawings. Although this tool has less features than several most special purpose graphical editors, it does have the advantage that it is fully integrated with " (TeXmacs) ". In particular, it is easy to insert text, mathematics and hyperlinks inside your pictures. Moreover, pictures which are created in this way often look nicer, because they use the same fonts and default line width as the surrounding text.") (section "Starting a new picture") (concat "You may start drawing a new picture using " (menu "Insert" "Image" "Draw image") ". In some cases, you may also want to draw something on top of an existing image (or other kinds of content). This can be done by selecting the image or content on top of which you want to draw, and then click on " (menu "Insert" "Image" "Draw over selection") ".") (concat "By default, the inserted image spans over the whole paragraph. You may adjust its size using the keyboard shortcuts " (shortcut "(graphics-decrease-hsize)") ", " (shortcut "(graphics-increase-hsize)") ", " (shortcut "(graphics-decrease-vsize)") ", " (shortcut "(graphics-increase-vsize)") " (to adjust the size a bit faster, you may use " (shortcut "(graphics-decrease-hsize-fast)") ", " (shortcut "(graphics-increase-hsize-fast)") ", " (shortcut "(graphics-decrease-vsize-fast)") ", " (shortcut "(graphics-increase-vsize-fast)") "). You may also specify an explicit size using " (menu "Insert" "Geometry" "Size") ". After completion of your drawing, you may automatically crop the size of your picture to its actual size (plus some additional padding), using " (menu "Insert" "Geometry" "Crop") ".") (concat "For technical pictures, it is often useful to display a grid while you are drawing. This can be done using" (nbsp) (menu "Insert" "Grid" "Type" "Cartesian") ". In the menu " (menu "Insert" "Grid") " it is also possible to adjust the colors of the axes and the grid-lines, as well as the number of subunit grid-lines per unit grid-line. By default, grids will also be printed; you need to remove them after completing your drawing if you do not want this.") (concat "By default, " (TeXmacs) " places the origin of the grid at the center of the screen and uses a " (verbatim "1cm") " unit. You may scroll the picture using the arrow keys " (shortcut "(graphics-move-origin-left)") ", " (shortcut "(graphics-move-origin-right)") ", " (shortcut "(graphics-move-origin-up)") ", " (shortcut "(graphics-move-origin-down)") " (or " (shortcut "(graphics-move-origin-left-fast)") ", " (shortcut "(graphics-move-origin-right-fast)") ", " (shortcut "(graphics-move-origin-up-fast)") ", " (shortcut "(graphics-move-origin-down-fast)") " if you want to move fast). You may specify a different unit using the " (menu "Insert" "Geometry" "Unit") " menu. You may also zoom in and out using " (shortcut "(graphics-zoom-in)") " and " (shortcut "(graphics-zoom-out)") ", or from the " (menu "Insert" "Geometry" "Zoom") " menu.") (section "Inserting new objects") (concat "After insertion of a new picture or clicking inside an existing picture, the second mode dependent toolbar shows a" (nbsp) "list of icons which are useful in graphics mode. In particular, the second group of icons " (icon "tm_point_mode.xpm") ", " (icon "tm_line_mode.xpm") ", " (icon "tm_cline_mode.xpm") ", " (icon "tm_spline_mode.xpm") ", " (icon "tm_cspline_mode.xpm") ", " (icon "tm_arc_mode.xpm") ", " (icon "tm_carc_mode.xpm") ", " (icon "tm_textat_mode.xpm") ", " (icon "tm_math.xpm") " on this toolbar allows you to select the kind of objects that you want to insert. " (TeXmacs) " currently implements the following primitive graphical objects:") (description (document (concat (item* "Points") "When selecting point mode using " (icon "tm_point_mode.xpm") " or " (menu "Insert" "Point") ", you may insert simple points with the left mouse button.") (concat (item* "Lines and polygons") "When selecting line mode using " (icon "tm_line_mode.xpm") " or " (menu "Insert" "Line") ", you may insert a new broken line with the left mouse button: at every new click a new point is inserted and the last point is inserted using a double click. Polygon mode (" (icon "tm_cline_mode.xpm") " or " (menu "Insert" "Polygon") ") is a variant of line mode, with this difference that an additional segment is inserted between the first and the last points.") (concat (item* "Splines and closed splines") "Spline mode is selected using " (icon "tm_spline_mode.xpm") " or " (menu "Insert" "Spline") ". This mode is similar to line mode, except that we now draw a smooth curve through the specified points. Again, this mode admits a closed variant (" (icon "tm_cspline_mode.xpm") " or " (menu "Insert" "Closed spline") ").") (concat (item* "Arcs and circles") "Arc mode is selected using " (icon "tm_arc_mode.xpm") " or " (menu "Insert" "Arc") ". In this mode, you may insert arcs going through three points specified through left mouse clicks. Similarly, you may use circle mode (" (icon "tm_carc_mode.xpm") " or " (menu "Insert" "Circle") ") for drawing circles.") (concat (item* "Text and mathematics") "When selecting text mode (" (icon "tm_textat_mode.xpm") " or " (menu "Insert" "Text") ") or mathematics mode (" (icon "tm_math.xpm") " or " (menu "Insert" "Mathematics") "), you may enter text (or mathematics) at an arbitrary position in the picture, again using the left mouse button."))) "Typical examples of these basic objects are shown in the figures below:" (center (document (tabular* (tformat (table (row (cell (small-figure (with "gr-mode" "point" "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "3cm" "3cm" "center") (graphics "" (point "0.499041" "-0.00699497") (point "-0.919136" "-0.23983") (point "0.329706" "-1.19234"))) "Points.")) (cell (small-figure (with "gr-mode" (tuple "edit" "line") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "3cm" "3cm" "center") (graphics "" (line (point "-0.926313" "0.839678") (point "0.809366318296071" "0.564509194337875") (point "-0.862812541341447" "-0.13399589892843") (point "1.04220134938484" "-0.260996824976849") (point "-0.121973806059003" "-1.17117012832385")))) "Lines.")) (cell (small-figure (with "gr-mode" (tuple "edit" "cline") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "3cm" "3cm" "center") (graphics "" (cline (point "-0.742988" "0.839678") (point "0.844523085064162" "0.691510120386294") (point "0.886856727080302" "-0.769000529170525") (point "-0.425486175420029" "-1.2770042333642") (point "-1.25099219473475" "-0.13399589892843")))) "Polygons.")))))) "" (tabular* (tformat (table (row (cell (small-figure (with "gr-mode" (tuple "edit" "spline") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "3cm" "3cm" "center") (graphics "" (spline (point "-1.1308" "1.0844") (point "0.880043656568329" "0.661066278608281") (point "-0.855635666093399" "-0.0374388146580235") (point "0.901210477576399" "-0.48194205582749") (point "-0.516966529964281" "-1.1804471490938")))) "Splines.")) (cell (small-figure (with "gr-mode" (tuple "edit" "cspline") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "3cm" "3cm" "center") (graphics "" (cspline (point "-0.651144" "0.788067") (point "0.89403360232835" "0.322397142479164") (point "0.640031750231512" "-0.905278475988887") (point "-0.566477047228469" "-1.20161397010187") (point "-1.15914803545443" "-0.206773382722582")))) "Closed splines.")) (cell (small-figure (with "gr-mode" (tuple "edit" "arc") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "3cm" "3cm" "center") (graphics "" (arc (point "-0.827656" "-1.15928") (point "0.865689906072232" "-0.5454425188517") (point "-0.806488953565286" "0.87273448868898")))) "Arcs.")))))) "" (tabular* (tformat (table (row (cell (small-figure (with "gr-mode" (tuple "edit" "carc") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "3cm" "3cm" "center") (graphics "" (carc (point "-0.262964677867443" "0.990458393967456") (point "1.02821140362482" "-0.0467158354279667") (point "-0.0724632887948141" "-1.1473905278476")))) "Circles.")) (cell (small-figure (with "gr-mode" (tuple "edit" "text-at") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "3cm" "3cm" "center") (graphics "" (text-at "Hello" (point "-0.164307" "0.545955")))) "Text.")) (cell (small-figure (with "gr-mode" (tuple "edit" "math-at") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "3cm" "3cm" "center") (graphics "" (math-at (concat "<mathe>" (rsup "<mathpi>*<mathi>") "=-1") (point "-1.08166" "-0.533553")))) "Mathematics.")))))))) (htab "5mm") (section "Editing objects") "Any of the modes which allows for the insertion of new objects (points, lines, polygons, etc.) also allows you to directly edit existing objects. More precisely, as soon as you go over an existing object with your mouse, then the control points for that object will be highlighted automatically. Several editing operations are supported:" (description (document (concat (item* "Moving control points") "When your mouse is sufficiently close to a control point, then it will be possible to drag and drop the control point to somewhere else using the left mouse button.") (concat (item* "Inserting new control points") "For objects with an arbitrary number of control points, such as broken lines, polygons, splines and closed splines, it is possible to insert new points on existing edges. In order to do so, move the mouse pointer on the edge where you want to insert a new point; the two neighbouring control points should be highlighted. Then insert a new point drag and move it around using drag and drop for the first mouse button.") (concat (item* "Removing control points") "Using the middle mouse button, it is possible to remove control points (and eventually the object itself).") (concat (item* "Removing the entire object") "Using the middle mouse button while simultaneously pressing the shift key " (key "S-") " removes the entire object which is currently highlighted."))) (concat "While editing, it should also be noticed that " (TeXmacs) " attempts to automatically " (em "snap") " the mouse pointer to control points or edges of existing objects, as well as to intersection points of two curves and points on the grid. This makes it possible to quickly draw complex pictures which are exact, and not merely exact up to one or more pixels (and ugly when magnified or printed). Around boxes with text or mathematical formulas, there are also eight invisible control points to which " (TeXmacs) " will attempt to snap the mouse pointer. This makes it easier to draw diagrams as in figure" (nbsp) (reference "diagram-fig") " below.") (concat "Graphical objects are drawn in a specific " (em "stacking order") " which has the effect that certain objects may be hidden by other objects. Using " (shortcut "(graphics-zmove 'closer)") " and " (shortcut "(graphics-zmove 'farther)") ", you may move the currently highlighted object closer to or farther away from the eye for this stacking order. In a similar vein, certain control points may become unaccessible, because hidden by closer control points. In that case, you may use " (key "tab") " to cycle through all possibilities for the current cursor position.") (big-figure (with "gr-mode" (tuple "edit" "spline") "gr-frame" (tuple "scale" "1cm" (tuple "0.729978gw" "0.140033gh")) "gr-geometry" (tuple "geometry" "1par" "0.6par") "gr-grid" (tuple "empty") "gr-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-edit-grid-aspect" (tuple (tuple "axes" "none") (tuple "1" "none") (tuple "10" "none")) "gr-edit-grid" (tuple "empty") "gr-edit-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-text-at-halign" "center" "gr-arrow-end" "<gtr>" "gr-auto-crop" "true" (graphics "" (with "text-at-halign" "center" (math-at "A" (point "-5" "3"))) (with "text-at-halign" "center" (math-at "B" (point "-3.5" "3"))) (with "text-at-halign" "center" (math-at "C" (point "-5" "2"))) (with "text-at-halign" "center" (math-at "D" (point "-3.5" "2"))) (with "text-at-halign" "center" (math-at "X" (point "-2" "3"))) (with "text-at-halign" "center" (math-at "Y" (point "-2" "2"))) (with "arrow-end" "<gtr>" (line (point "-4.75015" "3.12052") (point "-3.75133946289192" "3.1205185871147"))) (with "arrow-end" "<gtr>" (line (point "-5" "2.88244") (point "-5.0" "2.35861225029766"))) (with "arrow-end" "<gtr>" (line (point "-4.75637" "2.12052") (point "-3.76357653128721" "2.1205185871147"))) (with "arrow-end" "<gtr>" (line (point "-3.5" "2.88244") (point "-3.5" "2.35861225029766"))) (with "arrow-end" "<gtr>" (line (point "-3.24864" "3.12052") (point "-2.26367575076068" "3.1205185871147"))) (with "arrow-end" "<gtr>" (line (point "-3.23641" "2.12052") (point "-2.21995303611589" "2.1205185871147"))) (with "arrow-end" "<gtr>" (line (point "-2" "2.88244") (point "-2.0" "2.35861225029766"))) (with "arrow-end" "<gtr>" (spline (point "-4.75015" "3.35861") (point "-2.87767892578383" "3.71332186797195") (point "-1.31133417118666" "3.26881862680249") (point "-1.7800304273052" "2.35861225029766"))))) (document (concat (label "diagram-fig") "Example of a diagram which was drawn by using snapping to the eight control points around each box with a mathematical formula. Notice also that we cropped the graphics to its actual size."))) (section "Specification of style properties") "Each of the fundamental types of graphical objects also admits a certain number of style properties which affect the rendering. The following style properties exist:" (concat (paragraph "Color") "This property applies to any of the graphical object types and specifies the color.") (concat (paragraph "Fill color") "This property applies to all graphical object types except text and mathematics. It specifies a fill color for the object.") (big-figure (with "gr-mode" (tuple "edit" "cspline") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "1par" "0.6par") "gr-fill-color" "pastel red" "gr-color" "dark magenta" "gr-auto-crop" "true" (graphics "" (cspline (point "-4.82503" "-0.183391") (point "-4.54985778542135" "2.12379282973938") (point "-3.34334898796137" "1.57345548352957") (point "-2.623677073687" "0.070611191956608") (point "-3.89368633417119" "0.790283106230983")) (with "fill-color" "pastel yellow" (cspline (point "-1.75584" "2.22963") (point "-2.24267429554174" "1.23478634740045") (point "-1.62883648630771" "0.324613044053446") (point "-1.88283833840455" "1.21361952639238"))) (with "color" "dark blue" "fill-color" "pastel orange" (cspline (point "-0.0201581" "1.78512") (point "-0.845664109009128" "1.36178727344887") (point "-0.464661330863871" "0.493947612118005") (point "0.424345151475063" "0.917284032279402"))) (with "color" "dark magenta" "fill-color" "pastel red" (cspline (point "2.11769" "1.99679") (point "2.81619592538696" "0.811449927239053") (point "1.56735348591083" "0.769116285222913"))))) (document "Examples of a few closed splines with different colors and fill colors.")) (concat (paragraph "Opacity") "This property also applies to any of the graphical object types and specifies an opacity between 0% and 100%. The default is 100% and lower opacities will make the object more transparent.") (big-figure (with "gr-mode" (tuple "edit" "carc") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "1par" "0.6par") "gr-grid" (tuple "empty") "gr-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-edit-grid-aspect" (tuple (tuple "axes" "none") (tuple "1" "none") (tuple "10" "none")) "gr-edit-grid" (tuple "empty") "gr-edit-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-fill-color" "pastel green" "gr-color" "dark green" "gr-opacity" "20%" "gr-auto-crop" "true" (graphics "" (with "color" "dark brown" "fill-color" "brown" (cline (point "-5" "1") (point "-5.0" "-1.0") (point "5.0" "-1.0") (point "5.0" "1.0"))) (with "color" "dark green" "fill-color" "pastel green" (carc (point "4" "-1.5") (point "4.5" "-1.0") (point "4.0" "-0.5"))) (with "color" "dark green" "opacity" "80%" "fill-color" "pastel green" (carc (point "2" "-1.5") (point "2.5" "-1.0") (point "2.0" "-0.5"))) (with "color" "dark green" "opacity" "60%" "fill-color" "pastel green" (carc (point "0" "-1.5") (point "0.5" "-1.0") (point "0.0" "-0.5"))) (with "color" "dark green" "opacity" "40%" "fill-color" "pastel green" (carc (point "-2" "-1.5") (point "-1.5" "-1.0") (point "-2.0" "-0.5"))) (with "color" "dark green" "opacity" "20%" "fill-color" "pastel green" (carc (point "-4" "-1.5") (point "-3.5" "-1.0") (point "-4.0" "-0.5"))))) "Examples of the same object with increasing opacities on top of another object.") (concat (paragraph "Point style") "A few different point styles are supported for displaying points: solid disks, round circles and squares.") (big-figure (with "gr-mode" (tuple "edit" "text-at") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "1par" "0.6par") "gr-fill-color" "red" "gr-grid" (tuple "empty") "gr-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-edit-grid-aspect" (tuple (tuple "axes" "none") (tuple "1" "none") (tuple "10" "none")) "gr-edit-grid" (tuple "empty") "gr-edit-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-point-style" "square" "gr-text-at-halign" "center" "gr-auto-crop" "true" (graphics "" (with "fill-color" "red" (point "-2" "0")) (with "fill-color" "red" "point-style" "round" (point "0" "0")) (with "fill-color" "red" "point-style" "square" (point "2" "0")) (with "text-at-halign" "center" (text-at "Square" (point "2" "0.5"))) (with "text-at-halign" "center" (text-at "Round" (point "0" "0.5"))) (with "text-at-halign" "center" (text-at "Disk" (point "-2" "0.5"))))) "The different point styles for black color and red fill color.") (concat (paragraph "Line width") "The line width property applies to all curves (that is, to broken lines, polygons, splines, closed splines, arcs and circles). By default it is " (verbatim "1ln") ", the width of the fraction bar in mathematical formulas, but any " (TeXmacs) " length unit can be used instead.") (big-figure (with "gr-mode" (tuple "edit" "text-at") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "1par" "0.6par") "gr-grid" (tuple "empty") "gr-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-edit-grid-aspect" (tuple (tuple "axes" "none") (tuple "1" "none") (tuple "10" "none")) "gr-edit-grid" (tuple "empty") "gr-edit-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-line-width" "5ln" "gr-auto-crop" "true" (graphics "" (spline (point "-3" "0") (point "-2.0" "0.3") (point "0.0" "-0.3") (point "2.0" "0.3") (point "3.0" "0.0")) (with "line-width" "0.5ln" (spline (point "-3" "1") (point "-2.0" "1.3") (point "0.0" "0.7") (point "2.0" "1.3") (point "3.0" "1.0"))) (with "line-width" "2ln" (spline (point "-3" "-1") (point "-2.0" "-0.7") (point "0.0" "-1.3") (point "2.0" "-0.7") (point "3.0" "-1.0"))) (with "line-width" "5ln" (spline (point "-3" "-2") (point "-2.0" "-1.7") (point "0.0" "-2.3") (point "2.0" "-1.7") (point "3.0" "-2.0"))) (text-at "0.5ln" (point "3.5" "1")) (text-at "1ln" (point "3.5" "0")) (text-at "2ln" (point "3.5" "-1")) (text-at "5ln" (point "3.5" "-2")))) (document "The same curve using different line widths.")) (concat (paragraph "Line dashes") "Various dash styles are available for curves in " (menu "Focus" "Line dashes") ".") (big-figure (with "gr-mode" (tuple "edit" "line") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "1par" "0.6par") "gr-grid" (tuple "empty") "gr-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-edit-grid-aspect" (tuple (tuple "axes" "none") (tuple "1" "none") (tuple "10" "none")) "gr-edit-grid" (tuple "empty") "gr-edit-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-line-width" "2ln" "gr-dash-style" "11100" "gr-dash-style-unit" "20ln" "gr-auto-crop" "true" (graphics "" (with "line-width" "2ln" (line (point "-3" "1") (point "-2.0" "1.5") (point "0.0" "0.5") (point "2.0" "1.5") (point "3.0" "1.0"))) (with "dash-style" "10" "line-width" "2ln" (line (point "-3" "0.5") (point "-2.0" "1.0") (point "0.0" "0.0") (point "2.0" "1.0") (point "3.0" "0.5"))) (with "dash-style" "11100" "line-width" "2ln" (line (point "-3" "0") (point "-2.0" "0.5") (point "0.0" "-0.5") (point "2.0" "0.5") (point "3.0" "0.0"))) (with "dash-style" "1111010" "line-width" "2ln" (line (point "-3" "-0.5") (point "-2.0" "0.0") (point "0.0" "-1.0") (point "2.0" "0.0") (point "3.0" "-0.5"))) (with "dash-style" "1111010" "line-width" "2ln" "dash-style-unit" "10ln" (line (point "-3" "-1") (point "-2.0" "-0.5") (point "0.0" "-1.5") (point "2.0" "-0.5") (point "3.0" "-1.0"))) (with "dash-style" "11100" "line-width" "2ln" "dash-style-unit" "20ln" (line (point "-3" "-1.5") (point "-2.0" "-1.0") (point "0.0" "-2.0") (point "2.0" "-1.0") (point "3.0" "-1.5"))))) (document "The same curve using different dashing styles.")) (concat (paragraph "Line arrows") "Various arrows at the ends of curves are supported in " (menu "Focus" "Line arrows") ".") (big-figure (with "gr-mode" (tuple "edit" "line") "gr-frame" (tuple "scale" "1cm" (tuple "0.5gw" "0.5gh")) "gr-geometry" (tuple "geometry" "1par" "0.6par") "gr-grid" (tuple "empty") "gr-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-edit-grid-aspect" (tuple (tuple "axes" "none") (tuple "1" "none") (tuple "10" "none")) "gr-edit-grid" (tuple "empty") "gr-edit-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-line-width" "2ln" "gr-arrow-begin" "|" "gr-arrow-end" "|" "gr-auto-crop" "true" (graphics "" (with "line-width" "2ln" (line (point "-4" "2") (point "-1.0" "2.0"))) (with "arrow-end" "<gtr>" "line-width" "2ln" (line (point "-4" "1.5") (point "-1.0" "1.5"))) (with "arrow-end" "|<gtr>" "line-width" "2ln" (line (point "-4" "1") (point "-1.0" "1.0"))) (with "arrow-end" "<gtr><gtr>" "line-width" "2ln" (line (point "-4" "0.5") (point "-1.0" "0.5"))) (with "arrow-end" "<less>" "line-width" "2ln" (line (point "-4" "0") (point "-1.0" "0.0"))) (with "arrow-end" "<less>|" "line-width" "2ln" (line (point "-4" "-0.5") (point "-1.0" "-0.5"))) (with "arrow-end" "<less><less>" "line-width" "2ln" (line (point "-4" "-1") (point "-1.0" "-1.0"))) (with "arrow-end" "|" "line-width" "2ln" (line (point "-4" "-1.5") (point "-1.0" "-1.5"))) (with "arrow-end" "o" "line-width" "2ln" (line (point "-4" "-2") (point "-1.0" "-2.0"))) (with "arrow-end" "|<gtr>" "line-width" "2ln" "arrow-begin" "<less>|" (line (point "0" "2") (point "3.0" "2.0"))) (with "arrow-end" "|<gtr>" "line-width" "2ln" "arrow-begin" "<gtr>" (line (point "0" "1.5") (point "3.0" "1.5"))) (with "arrow-end" "o" "line-width" "2ln" "arrow-begin" "o" (line (point "0" "1") (point "3.0" "1.0"))) (with "arrow-end" "<less>|" "line-width" "2ln" "arrow-begin" "|<gtr>" (line (point "0" "0.5") (point "3.0" "0.5"))) (with "arrow-end" "<less>" "line-width" "2ln" "arrow-begin" "<gtr>" (line (point "0" "0") (point "3.0" "0.0"))) (with "line-width" "2ln" "arrow-begin" "<gtr>" (line (point "0" "-0.5") (point "3.0" "-0.5"))) (with "arrow-end" "<gtr><gtr>" "line-width" "2ln" "arrow-begin" "<gtr>" (line (point "0" "-1") (point "3.0" "-1.0"))) (with "arrow-end" "<gtr><gtr>" "line-width" "2ln" "arrow-begin" "<gtr><gtr>" (line (point "0" "-1.5") (point "3.0" "-1.5"))) (with "arrow-end" "|" "line-width" "2ln" "arrow-begin" "|" (line (point "0" "-2") (point "3.0" "-2.0"))))) (document "The same segment using different types of arrows at the extremities.")) (concat (paragraph "Text alignment") "For textual and mathematical boxes, its is possible to specifiy the horizontal and vertical alignement properties, as indicated in the figure below:") (big-figure (with "gr-mode" (tuple "edit" "line") "gr-frame" (tuple "scale" "1cm" (tuple "0.420008gw" "0.5gh")) "gr-geometry" (tuple "geometry" "1par" "0.6par") "gr-grid" (tuple "empty") "gr-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-edit-grid-aspect" (tuple (tuple "axes" "none") (tuple "1" "none") (tuple "10" "none")) "gr-edit-grid" (tuple "empty") "gr-edit-grid-old" (tuple "cartesian" (point "0" "0") "1") "gr-line-width" "2ln" "gr-text-at-halign" "center" "gr-text-at-valign" "top" "gr-auto-crop" "true" (graphics "" (with "color" "light grey" "line-width" "2ln" (line (point "-3" "2") (point "-3.0" "-2.0"))) (with "text-at-valign" "center" (text-at "Left" (point "-3" "1"))) (with "text-at-valign" "center" "text-at-halign" "center" (text-at "Center" (point "-3" "0"))) (with "text-at-valign" "center" "text-at-halign" "right" (text-at "Right" (point "-3" "-1"))) (with "color" "light grey" "line-width" "2ln" (line (point "-1" "0") (point "7.0" "0.0"))) (with "text-at-valign" "bottom" "text-at-halign" "center" (text-at (concat "Bottom " (math "y")) (point "0" "0"))) (with "text-at-halign" "center" (text-at (concat "Base " (math "y")) (point "1.5" "0"))) (with "text-at-valign" "axis" "text-at-halign" "center" (text-at (concat "Axis " (math "y")) (point "3" "0"))) (with "text-at-valign" "center" "text-at-halign" "center" (text-at (concat "Center " (math "y")) (point "4.5" "0"))) (with "text-at-valign" "top" "text-at-halign" "center" (text-at (concat "Top " (math "y")) (point "6" "0"))))) (document "Illustration of horizontal and vertical alignment of text boxes.")) "" (section "Editing groups of objects") "The rightmost series of icons on the second mode dependent toolbar is used for editing groups of graphical objects. In group editing mode, you may select or unselect objects using right mouse clicks. You may also select all objects in a rectangle by dragging using the right mouse button. When pressing the left mouse button, the current group operation is performed jointly on all selected objects." "The following kinds of group operations are supported:" (description (document (concat (item* "Changing properties") "Selected using " (icon "tm_edit_props.xpm") " or " (menu "Insert" "Set properties") ". The current properties (as indicated in the focus bar) are applied to the selected objects.") (concat (item* "Move objects") "Selected using " (icon "tm_group_move.xpm") " or " (menu "Insert" "Move objects") ". The selected objects are moved until you press the left mouse button a second time.") (concat (item* "Resize objects") "Selected using " (icon "tm_group_zoom.xpm") " or " (menu "Insert" "Resize objects") ". The selected objects are resized until you press the left mouse button a second time.") (concat (item* "Rotate objects") "Selected using " (icon "tm_group_rotate.xpm") " or " (menu "Insert" "Rotate objects") ". The selected objects are rotated until you press the left mouse button a second time.") (concat (item* "Group or ungroup objects") "Selected using " (icon "tm_group_group.xpm") " or " (menu "Insert" "Group/ungroup") ". The selected objects are grouped together into a single object. If you selected one grouped object, then this object will be ungrouped."))) "In the group editing mode, it is also possible to copy and paste groups of objects." (chapter "Advanced layout features") (section "Flows") (concat "Complex documents often contain footnotes or floating objects, which appear differently on pages as the main text. In fact, the content of such complex documents use several " (with "font-shape" "italic" "flows") ", one for the main text, one for the footnotes, one for floats, and still another one for two column text. The different flows are broken across pages in a quite independent way.") (concat "In order to insert a footnote, you may use " (menu "Format" "Page insertion" "Footnote") ". The number of columns of the text may be changed in " (menu "Paragraph" "Number of columns") ".") (section "Floating objects") (concat "Floating objects are allowed to move on the page independently from the main text. Usually they contain figures or tables which are too large to nicely fit into the main text. A floating object may be inserted using " (menu "Insert" "Note" "Floating object") ".") (concat "You may also create a floating object and directly insert a figure or table inside it using " (menu "Insert" "Note" "Floating figure") " resp. " (menu "Insert" "Note" "Floating table") ". However, sometimes you might want to insert several smaller figures or tables inside one floating object. You may do this using " (menu "Insert" "Image" "Small figure") " resp. " (menu "Insert" "Table" "Small table") ".") (concat "After creating a floating object, you may control its position using " (menu "Focus" "Allowed positions") " (when inside the float). You may specify whether you allow the floating object to appear at the top of the page, at the bottom, directly in the text, or on the next page. By default, the float may appear everywhere. However, a floating object will never appear inside the main text at less than three lines from the bottom or the top of a page.") (section "Page breaking") (concat "The page breaking may be controlled very precisely by the user inside " (menu "Document" "Page" "Breaking") ". In the submenu " (menu "Algorithm") ", you may specify the algorithm being used. Professional page breaking is best in print, but may slow down the editing when being used interactively in paper mode. Sloppy page breaking is fastest and medium is professional except for multicolumn material, for which the professional algorithm is significantly slower.") (concat "You may also allow the page breaking algorithm to enlarge or reduce the length of pages in exceptional cases in the submenu " (menu "Limits") ". The stretchability of vertical space between paragraphs and so may be specified in " (menu "Flexibility") ". The factor " (math "1") " is default; a smaller factor enforces a more rigid spacing, but the quality of the breaks may decrease.") (chapter "Editing tools") (concat "In this chapter, we discuss the general editing facilities present in " (TeXmacs) ". Besides classical features, like cut and paste, search and replace, " (abbr "etc.") ", " (TeXmacs) " also supports additional functionality which exploits the document structure. Examples of such features are  structured cursor movement and structured variants. It should be noticed that more traditional functions like search and replace also attempt to exploit the structure. For instance, when searching " (math "x") " in math mode, you will only find matches which are also in math mode.") (section "Cut and paste") (concat "You can select text and formulas by maintaining the left mouse button. In order to delete the selected region, use " (menu "Edit" "Cut") ". In order to copy the selected region, first click on " (menu "Edit" "Copy") ". Next, paste it as many times as you want to the location of your cursor, using " (menu "Edit" "Paste") ". Alternatively, you may copy a selected region using the middle mouse button.") (concat "It is also possible to the change text properties of a selected region. For instance, in order to transform some black text in red, you select it using the left mouse button and click on " (menu "Format" "Color" "Red") ". Similarly, if you select a formula and you click on " (menu "Insert" "Fraction") ", then the formula becomes the numerator of some fraction.") (concat "When using the copy and paste mechanism to communicate with other applications, text is copied and pasted using the " (TeXmacs) " data format. You may specify other import and export formats using " (menu "Edit" "Import") " resp. " (menu "Edit" "Export") ". By default, copying and pasting uses the primary text buffer. Using " (menu "Edit" "Copy to") " and " (menu "Edit" "Paste from") ", you may specify as many other buffers as you like.") (concat "There are two ways to make selections using the keyboard. When using the cursor keys " (key "left") ", " (key "right") ", " (abbr "etc.") " while holding down the " (prefix "S-") " button, you may select text while moving around the cursor. Alternatively, you may press " (shortcut "(kbd-select-enlarge)") " once to fix a starting position. When moving around using the cursor keys, the text between the starting position and the current position keeps being selected. The selection gets cleared when pressing " (shortcut "(selection-cancel)") ".") (concat "Notice that the " (shortcut "(kbd-select-enlarge)") " shortcut also allows you to make " (em "structured selections") ". You may select the current word you are in by pressing" (nbsp) (shortcut "(kbd-select-enlarge)") " twice. Each additional time you press " (shortcut "(kbd-select-enlarge)") " results in the selection of the smallest structure which englobes the current selection. Ultimately, when the entire document gets selected, pressing " (shortcut "(kbd-select-enlarge)") " once more clears the selection.") (section "Search and replace") (concat "You can start searching text by pressing " (key "C-s") " or " (menu "Edit" "Search") ". Doing this, a new special search toolbar will appear below the main text, just above the footer. When typing text in the search field of the toolbar, all occurrences of this text will be highlighted in the main document. Moreover, one principal occurrence will be highlighted in red and you may navigate through all occurrences using " (key "pageup") " and " (key "pagedown") " (or " (key "up") " and " (key "down") ", or " (key "return") "). Using " (key "home") " and " (key "end") ", you may jump to the first and last occurrences respectively. As soon as you press the escape key " (key "escape") ", the search toolbar will be closed, searching stops and focus returns to the main document.") (concat "During a search, only text in the same mode and the same language will be found, as those which are active at the position where you started your search. In other words, when searching an " (math "x") " in math-mode, you will not find any x's in the ordinary text. As a current limitation, the search string can only contain ordinary text and no math-symbols or more complicated structured text.") (concat "In order to replace text, you should use " (menu "Edit" "Replace") " or press " (key "C-=") ". This will cause a special replace toolbar to appear below the main text, just above the footer. You are prompted for a string which is to be replaced and the string by which to replace. Again, you may use the " (key "pageup") " and " (key "pagedown") " keys in order to navigate through the occurrences of the search string. When pressing " (key "tab") " or " (key "return") " in the search field, focus will be moved to the replace field. You may still use the " (key "pageup") " and " (key "pagedown") " keys in order to navigate through the occurrences of the search string. In addition, pressing " (key "return") " will replace the principal occurrence of the search string by the replace string. Using " (key "S-return") ", you may undo the last replacement. You may replace all remaining occurrences by pressing " (key "C-return") ". Like in the case of searching, the query-replace command is mode and language sensitive.") (concat "The search and replace toolbars are quite rudimentary in the sense that they only allow for searching and replacing plain text. By pressing the " (icon "tm_expand_tool.xpm") " icon on either of these toolbars, you may expand the toolbar into a full blown widget with larger search and replace fields which may contain arbitrary markup. Searching and replacing can be done using more or less the same keyboard shortcuts as in the case of the toolbars, but you may now search and replace arbitrary content.") (concat "When searching non textual content, the conditions for having a hit are somewhat released. For instance, assume that you are just starting a new search with an empty search field. Then typing" (nbsp) (key "F6") " inserts the " (markup "strong") " tag with no text inside yet. Instead of looking only for strong empty strings, " (TeXmacs) " will rather look for all strong markup in your document. If you next enter the letter a, then " (TeXmacs) " will look for all strong text which contains the letter a. In a" (nbsp) "similar way, when searching for the formula " (math (frac "x" "")) ", " (TeXmacs) " will highlight all fractions in which the numerator contains the variable " (math "x") ". Yet another example: a search for " (math (frac "" (sqrt "x"))) " will highlight all formulas in which the denominator contains a square root which contains the variable " (math "x") ". For instance, the fraction " (math (frac "a+b" (concat "c+" (sqrt "x+y")))) " will be highlighted, but not " (math (frac (sqrt "x+y") (concat "a+" (sqrt "y")))) ".") (concat "When using the structured text and replace widgets, " (TeXmacs) " also implements a few additional special tags for enhancing structured searching. First of all, it can happen that you would like to search for certain content " (em "inside") " a special context. For instance, you might want to search for all occurrences of the letter a inside a " (markup "strong") " tag. When searching for " (strong "a") ", as above, " (TeXmacs) " will highlight all " (markup "strong") " tags which contain the letter a. In order to highlight the letters a themselves, you should first enter the " (markup "strong") " tag inside an empty search field using " (key "F6") ". You next enter a special " (markup "select-region") " tag using " (key "std ?") ", and finally insert the letter a inside this tag. Other special markup which can be used inside search fields are the wildcards " (math "x") ", " (math "y") " and " (math "z") " which are entered using " (key "std 1") ", " (key "std 2") " and " (key "std 3") ".") (concat "As soon as you start using the structured text and replace widgets instead of the toolbars, this will be remembered as a user preference: any subsequent searches or replacements will again use the widgets. In order to switch back to the less intrusive toolbar methods for searching and replacing, you should press the " (icon "tm_compress_tool.xpm") " icon.") (section "Spell checking") (concat "If the program " (verbatim "ispell") " has been installed on your system, then you may use it to check your text for misspelled words by pressing " (shortcut "(spell-start)") " or " (menu "Edit" "Spell") ". Notice that you might have to verify that the dictionaries corresponding to the languages in which your texts have been written have been installed on your system; this is usually the case for English.") "When you launch the spell checker (either on the whole text or a selected region), you will be prompted at each misspelled word and the footer displays the available options:" (description (document (concat (item* "a)") "Accepts the misspelled word and all its future occurrences in the text.") (concat (item* "r)") "Replace the misspelled word by a correction you have to enter.") (concat (item* "i)") "Indicate that the misspelled word is actually correct and that it has to be inserted in your personal dictionary.") (concat (item* "1-9)") "Several suggested corrections for your misspelled word."))) (concat "Notice that " (verbatim "ispell") " just checks for misspelled words. No grammatical faults will be detected.") "When starting the spell checker, it will use the dictionary of the language which is active at the current cursor position (or the start of a selection). Only text in that language will be checked for. If your document contains text in several languages, then you will have to launch the spell checker once for each language being used." (section "Undo and redo") (concat "It is possible to gradually undo the changes you made in a document from the moment that you launched " (TeXmacs) ". This can be done via " (menu "Edit" "Undo") " or using the keystrokes " (shortcut "(undo 0)") " or " (shortcut "(undo 0)") ". Undone changes can be redone using " (menu "Edit" "Redo") " or " (shortcut "(redo 0)") ".") "In order to save memory, the number of successive actions which can be undone is limited to 100 (by default). It is possible to increase this number by adding a command like " (verbatim (document "    (set-maximal-undo-depth 1000)")) (concat "in our personal initialization file (see " (menu "Help" "Scheme") "). When specifying a negative number as your maximal undo depth, any number of actions can be undone.") (section "Structured editing") (concat "As a general rule, the behaviour of most structured editing operations is conditioned by the " (em (rigid "current focus")) ". By default, the innermost tag which contains the cursor. Whenever some selection is active, the current focus is the innermost tag which contains the selection. During structured operations, such as navigating among similar tags, the current focus may temporarily be set to something else. The current focus is visually indicated by the innermost cyan box around the cursor.") (concat "For instance, the " (em "structured insertion") " commands " (shortcut "(structured-insert-left)") ", " (shortcut "(structured-insert-right)") ", " (shortcut "(structured-insert-up)") " and " (shortcut "(structured-insert-down)") " have a particular meaning both inside tables and trees. Inside tables, they allow you to insert new rows and columns (see figure" (nbsp) (reference "matrix-insert-fig") "). Inside trees, they correspond to the insertion of new nodes (see figure" (nbsp) (reference "tree-insert-fig") "). Whenever you inside a tree inside a table, then the innermost tag is a tree, and node insertions will take precedence over the insertion of new rows and columns.") (concat "In many cases, a default particular behaviour has been defined for all tags minus some exceptional ones. In our example of structured insertion, the default behaviour of " (shortcut "(structured-insert-left)") " and " (shortcut "(structured-insert-right)") " is to insert a new argument to the tag at the left or at the right (when allowed).") (big-figure (document (equation* (document (concat (matrix (tformat (table (row (cell "a") (cell (concat "b" (cursor))) (cell "c")) (row (cell "d") (cell "e") (cell "f"))))) (space "5em") (matrix (tformat (table (row (cell "a") (cell "b") (cell (cursor)) (cell "c")) (row (cell "d") (cell "e") (cell "") (cell "f"))))) (space "2em") (matrix (tformat (table (row (cell "a") (cell (cursor)) (cell "b") (cell "c")) (row (cell "d") (cell "") (cell "e") (cell "f"))))) (space "2em") (matrix (tformat (table (row (cell "a") (cell "b") (cell "c")) (row (cell "") (cell (cursor)) (cell "")) (row (cell "d") (cell "e") (cell "f"))))) (space "2em") (matrix (tformat (table (row (cell "") (cell (cursor)) (cell "")) (row (cell "a") (cell "b") (cell "c")) (row (cell "d") (cell "e") (cell "f"))))))))) (document (concat (label "matrix-insert-fig") "Assume that the cursor is at the position of " (cursor) " inside the left-most matrix. Then the four other matrices respectively correspond to the insertion of a new column at the left" (nbsp) "(" (shortcut "(structured-insert-left)") ") or right" (nbsp) "(" (shortcut "(structured-insert-right)") "), " (abbr "resp.") " a new row above" (nbsp) "(" (shortcut "(structured-insert-up)") ") or below" (nbsp) "(" (shortcut "(structured-insert-down)") ")."))) (big-figure (concat (tree "a" "b" (concat "c" (cursor)) "d") (space "3em") (space "3em") (tree "a" "b" (cursor) "c" "d") (space "3em") (tree "a" "b" "c" (cursor) "d") (space "3em") (tree "a" "b" (tree (cursor) "c") "d") (space "3em") (tree "a" "b" (tree "c" (cursor)) "d")) (document (concat (label "tree-insert-fig") "Assume that the cursor is at the position of " (cursor) " inside the left-most tree. Then the four other trees respectively correspond to the insertion of a new node at the left" (nbsp) "(" (shortcut "(structured-insert-left)") "), at the right" (nbsp) "(" (shortcut "(structured-insert-right)") "), above" (nbsp) "(" (shortcut "(structured-insert-up)") ") or below" (nbsp) "(" (shortcut "(structured-insert-down)") ")."))) (concat "Similarly, in the case of matrices, the keys " (shortcut "(structured-insert-start)") ", " (shortcut "(structured-insert-end)") ", " (shortcut "(structured-insert-top)") " and " (shortcut "(structured-insert-bottom)") " can be used for inserting a new first or last column, " (abbr "resp.") " a new first or last row. The keys " (shortcut "(structured-remove-left)") " and " (shortcut "(structured-remove-right)") " are mapped to the commands for backward " (abbr "resp.") " forward " (em "structured deletion") ". In the case of matrices, this will result in the removal of the column before or after the cursor (see figure" (nbsp) (reference "matrix-remove-fig") "). In order to remove the enclosing environment you may use " (shortcut "(remove-structure-upwards)") " or " (shortcut "(remove-structure-upwards)") ".") (big-figure (document (equation* (document (concat (matrix (tformat (table (row (cell "a") (cell (concat "b" (cursor))) (cell "c")) (row (cell "d") (cell "e") (cell "f"))))) (space "5em") (matrix (tformat (table (row (cell (concat "b" (cursor))) (cell "c")) (row (cell "e") (cell "f"))))) (space "2em") (matrix (tformat (table (row (cell "a") (cell (concat (cursor) "c"))) (row (cell "d") (cell "f"))))) (space "2em") "b" (cursor))))) (document (concat (label "matrix-remove-fig") "Assume that the cursor is at the position of " (cursor) " inside the left-most matrix. Then pressing the keys" (nbsp) (shortcut "(structured-remove-left)") " and " (shortcut "(structured-remove-right)") " respectively result in the next two matrices. Pressing either" (nbsp) (shortcut "(remove-structure-upwards)") " or " (shortcut "(remove-structure-upwards)") " replaces the matrix by the content of the cell in which you are, leaving you with the " (math "b") " at the right-hand side."))) (section "Structured cursor movement") (concat (TeXmacs) " implements the three main mechanisms for " (em "structured cursor movement") ":") (enumerate (document (concat (item) "Traversal of the entire structure of the document.") (concat (item) "Traversal of tags which are similar to the innermost tag.") (concat (item) "Movements inside the innermost tag."))) (concat "Most keyboard shortcuts for structured cursor movements can be used in combination with the" (nbsp) (prefix "S-") "-key so as to similtaneously select text while moving around.") (todo "customizing the behaviour") (paragraph* "Structured traversal of the document") (concat "The " (shortcut "(traverse-left)") ", " (shortcut "(traverse-right)") ", " (shortcut "(traverse-up)") " and " (shortcut "(traverse-down)") " keys are used for the structured traversal of the entire document. Inside plain text, " (shortcut "(traverse-left)") " and " (shortcut "(traverse-right)") " allow you to move in a word-by-word manner, while " (shortcut "(traverse-up)") " and " (shortcut "(traverse-down)") " correspond to paragraph-by-paragraph motion.") (concat "In the presence of other markup, the " (shortcut "(traverse-left)") " and " (shortcut "(traverse-right)") " keys allow you to visit all accessible cursor positions of the document, except that we keep moving in a word-by-word manner inside plain text. The behaviour of the " (shortcut "(traverse-up)") " and " (shortcut "(traverse-down)") " keys is more context-dependent. Inside matrices, they typically allow you to move one row up or down.") (paragraph* "Traversal of tags which are similar to the innermost tag") (concat "This type of cursor movement allows you to quickly visit all other tags in the document which are " (em "similar") " to the innermost tag. The " (shortcut "(traverse-previous)") " and " (shortcut "(traverse-next)") " keys allow you move to the previous or next similar tags, whereas " (shortcut "(traverse-first)") " and " (shortcut "(traverse-last)") " directly jump to the first or last similar tags.") (concat "For instance, when you are inside a section title, you may move to the previous sectional title (which could also be the title of a subsection or a chapter, for instance) using " (shortcut "(traverse-previous)") ". Notice that you may use " (key "C-") " to jump to the previous section title.") (paragraph* "Movements inside the innermost tag") (concat "It is also possible to quickly move inside the innermost tag without quitting it. The shortcuts " (shortcut "(structured-left)") ", " (shortcut "(structured-right)") ", " (shortcut "(structured-start)") " and " (shortcut "(structured-end)") " provide a way to move to the previous, next, first or last argument of the innermost tag. Furthermore, the shortcuts " (shortcut "(structured-exit-left)") " and " (shortcut "(structured-exit-right)") " may be used to exit the innermost tag on the left or on the right.") (concat "This default behaviour may be overridden in special contexts. For instance, inside tables or trees, they rather correspond to cell-by-cell or node-by-node cursor movement. In addition, these cases associate vertical cursor movements to " (shortcut "(structured-up)") ", " (shortcut "(structured-down)") ", " (shortcut "(structured-top)") " and" (nbsp) (shortcut "(structured-bottom)") ".") (section "Structured variants") (concat "When creating an environment like a theorem, an equation or a list, it frequently happens that one would like to change the environment " (em "a posteriori") ". This can be done using the keyboard shortcuts " (shortcut "(variant-circulate (focus-tree) #t)") " and " (shortcut "(variant-circulate (focus-tree) #f)") " for cycling through the list of " (em "structured variants") " of the innermost tag in a direct or inverse manner.") (concat "For instance, assuming that you are inside a theorem, pressing " (shortcut "(variant-circulate (focus-tree) #t)") " several times will change the theorem into a proposition, a lemma, a corollary, a conjecture and back into a theorem. The " (shortcut "(variant-circulate (focus-tree) #f)") " key allows you to cycle in the inverse direction: theorem" (nbsp) (math (op "<rightarrow>")) " conjectur" (nbsp) (math (op "<rightarrow>")) " corollary" (nbsp) (math (op "<rightarrow>")) " lemma" (nbsp) (math (op "<rightarrow>")) " proposition" (nbsp) (math (op "<rightarrow>")) " theorem.") (concat "In the case of mathematical formulas, the " (shortcut "(variant-circulate (focus-tree) #t)") " shortcuts allows you to change an inline formula like " (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))) " into a displayed formula like") (equation* (document (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2")))) "while taking care of potential trailing spaces and punctuation signs." (concat (TeXmacs) " also provides the " (shortcut "(numbered-toggle (focus-tree))") " shortcut for turning numbered environments into unnumbered environments and " (em "vice versa") ". This works for most common environments like theorems, remarks, tables, equations, etc. Notice that " (shortcut "(numbered-toggle (focus-tree))") " also turns an unnumbered itemize environment into an enumeration and " (em "vice versa") ", whereas " (shortcut "(variant-circulate (focus-tree) #t)") " allows you to cycle between the available kinds of list items (bullets, dashes, arrows, " (abbr "etc.") ").") (section "Positioning and resizing objects") (concat "The " (prefix "structured:geometry") " prefix may be used for positioning and resizing objects. For instance, inside a cell of a" (nbsp) "table, you may use " (key "structured:geometry right") " to align the cell more to the right. Behind a space introduced " (em "via") " " (menu "Format" "Space") ", the same key allows you to increase the width of space. More generally, the following shortcuts are implemented:") (description (document (concat (item* (shortcut "(geometry-left)")) "Decrease the horizontal size of an object, or align more to the left.") (concat (item* (shortcut "(geometry-right)")) "Increase the horizontal size of an object, or align more to the right.") (concat (item* (shortcut "(geometry-down)")) "Decrease/increase the vertical size of an object, or align more to the bottom.") (concat (item* (shortcut "(geometry-up)")) "Increase/decrease the vertical size of an object, or align more to the top.") (concat (item* (shortcut "(geometry-start)")) "Decrease the horizontal offset of an object, or left align.") (concat (item* (shortcut "(geometry-end)")) "Increase the horizontal offset of an object, or right align.") (concat (item* (shortcut "(geometry-bottom)")) "Decrease the vertical offset of an object, or align at the bottom.") (concat (item* (shortcut "(geometry-top)")) "Increase the vertical offset of an object, or align at the top.") (concat (item* (shortcut "(geometry-reset)")) "Revert the geometry (size, position, alignment) to the defaults.") (concat (item* (concat (shortcut "(geometry-circulate #t)") ", " (shortcut "(geometry-circulate #f)"))) "Circulate among available length units for specifying the geometry.") (concat (item* (concat (shortcut "(geometry-slower)") ", " (shortcut "(geometry-faster)"))) "Decrease or increase the step size when positioning or resizing."))) "Particular tags to which the shortcuts apply are the following" (description (document (concat (item* "Spaces") "Both horizontal and vertical spaces from the " (menu "Format" "Space") " menu. You should put the cursor just after the space tag for the shortcuts to apply.") (concat (item* "Box modifiers") "The tags " (markup "move") ", " (markup "shift") ", " (markup "resize") ", " (markup "extend") ", " (markup "clipped") ", " (markup "smashed") ", " (markup "swell") " from the " (menu "Format" "Adjust") " menu.") (concat (item* "Animations") "The durations of animations can be modified using " (shortcut "(geometry-left)") " and " (shortcut "(geometry-right)") ".") (concat (item* "Images") "The size and alignment of images can be changed."))) (section "Versioning tools") (concat "When writing documents in collaboration with other authors, it frequently arises that one wants to go through changes made by the other authors, and either accept, discard or further correct them. After enabling the versioning tool through " (menu "Edit" "Preferences" "Utilities" "Versioning tool") ", a" (nbsp) "special menu " (menu "Version") " appears in the main menu bar, which makes this process automatic. Below, we will describe in more detail how this tool works.") (concat "In addition, there exist many stand-alone programs for maintaining several versions of a same file, such as " (hlink (name "Subversion") "http://subversion.tigris.org/") ", " (hlink (name "Git") "http://git-scm.com/") ", " (hlink (name "Darcs") "http://darcs.net/") ", " (hlink (name "GNU Arch") "http://www.gnu.org/software/gnu-arch/") ", just to mention a few of them. " (TeXmacs) " currently provides a rudimentary support for " (name "Subversion") ", but interfaces for the other systems could easily be added.") (paragraph* "Comparing two versions") (concat "Assume that we have two versions " (verbatim "old.tm") " and " (verbatim "new.tm") " of the same document. In order to see the changes, first load the newer version " (verbatim "new.tm") ", then click on " (menu "Version" "Compare" "With older version") " and select the older version " (verbatim "old.tm") ". The buffer will still be named " (verbatim "new.tm") ", and the changes between both versions will be indicated by special markup. If there are any changes, then the cursor will be positioned at the first difference. In a similar way, you may compare the current buffer to a" (nbsp) "newer version on disk using " (menu "Version" "Compare" "With newer version") ".") (concat "It is possible to go through all the differences between the old and new versions either from the items in the submenu " (menu "Version" "Move") ", or using the keyboard shortcuts " (shortcut "(version-previous-difference)") " and " (shortcut "(version-next-difference)") ". One may also use the more general structured navigation shortcuts " (shortcut "(traverse-first)") ", " (shortcut "(traverse-last)") ", " (shortcut "(traverse-previous)") " and " (shortcut "(traverse-next)") ".") (paragraph* "Visualization of the differences") "Differences between the two versions can be displayed in three ways: by showing only the old version, only the new version, or both versions simultaneously. In all cases, the old version is displayed in dark red and the new version in dark green." (concat "The visualization style can be specified individually for each individual change, via " (menu "Version" "Show") " or the keyboard shortcuts " (shortcut "(version-show 'version-old)") " (old version), " (shortcut "(version-show 'version-new)") " (new version) and " (shortcut "(version-show 'version-both)") " (both versions). One may also cycle through the different style using the structured variant key " (shortcut "(variant-circulate (focus-tree) #t)") ". If you selected some text, then the above actions will apply to the whole selection. In particular, by selecting the entire file, you can visualize the older or the newer version, or both versions.") (paragraph* "Retaining a specific version") (concat "It often occurs that we want to go through the changes between two versions and progressively retain either one or the other version for each individual difference. Assuming that the cursor is inside a given difference, this can be done from entries in the submenu " (menu "Version" "Retain") ". Alternatively, one may use the shortcuts " (shortcut "(version-retain 0)") ", " (shortcut "(version-retain 1)") " and " (shortcut "(version-retain 'current)") " to retain the old, new and currently displayed version, respectively. If both versions are displayed, then " (shortcut "(version-retain 'current)") " retains the new version. After retaining one of the versions, we automatically jump to the next difference, which can then be processed.") (concat "If you selected some text, then any of the above action will retain the appropriate version for each of the differences in the selection. This applies in particular to the case when you select the entire document. A convenient alternative way to process all differences is to use " (shortcut "(version-previous-difference)") " and " (shortcut "(version-next-difference)") " to go through the differences, use " (shortcut "(version-show 'version-old)") " and " (shortcut "(version-show 'version-new)") " to select the preferred version. As soon as all differences have been processed, you select the entire document and click on " (menu "Version" "Retain" "Current version") ".") (paragraph* "Grain control and reactualizing the differences") (concat "The entries in the submenu " (menu "Version" "Grain") " allow you to control the grain with which differences between versions are computed. By default, we use the finest grain " (menu "Detailed") ". It is also possible to compute differences on a paragraph-based level, using " (menu "Block") ". In that case, the entire paragraphs in which a change occurs will be highlighted. The roughest grain " (menu "Rough") " will highlight the entire text, if a change occurs somewhere inside.") (concat "The grain is used when comparing two documents using " (menu "Version" "File" "Compare") ", but it is also possible to change the grain for a selected portion of text: simply select the text and choose the new grain in the submenu " (menu "Version" "Grain") ". This can in particular be applied on the entire buffer. Similarly, if you change the grain inside a difference, then the difference will be recomputed using the new grain.") (concat "Notice that you may also change the grain to the current grain. This has the effect of reactualizing the differences of a selected portion or of the current difference at the cursor position. This may be useful, if you made some changes to one of the versions. For instance, assume that the old version contained a theorem and that we changed it into a lemma in the new version and also modified part of its inside text. When visualizing the changes, the whole theorem will be highlighted, since there is no appropriate markup to indicate that we just changed from a" (nbsp) "theorem to a lemma. Nevertheless, if we want to compare the inside texts, we may turn the old theorem into a lemma and then reactualize.") (paragraph* (concat "Using external programs for version control such as " (name "Subversion"))) (concat "If the file you are editing belongs to a directory which is under version control (only " (name "Subversion") " is currently supported, although other systems might follow), then the first part of the " (menu "Version") " menu will contain some clickable entries.") (concat "First of all, if the current buffer is under version control, then you may take a look at its history using " (menu "Version" "History") ". The history contains a list of hyperlinks to older revisions, together with short information about who changed what and when. Older revisions cannot be saved, but you may compare them to the current user version (on disk or being edited) using " (menu "Version" "Compare" "With current user version") ".") (concat "After making some changes to a file under version control, the version inside the editor or on disk no longer corresponds to the version in the repository. Using" (nbsp) (menu "Version" "Commit") ", the current user's version can be committed to the repository. When doing so, you will be prompted for a small explanatory message about the changes that you have made. A file which is not yet under version control can be added to the version control system using " (menu "Version" "Register") ". Registering a file does " (em "not") " commit it to the repository; you still have to use " (menu "Version" "Commit") " in order to do so.") (concat "If, while you were editing, changes to the file were made in the repository, then you may merge the result with your current version using " (menu "Version" "Update") ". At the moment, no conflict resolution has been implemented yet, although this is planned for the future.") (chapter "Laptop presentations") (concat (TeXmacs) " features a presentation mode, for making presentations from a laptop. The presentation mode is activated/deactivated using " (menu "View" "Presentation mode") " or " (shortcut "(toggle-full-screen-mode)") ". In this chapter, we describe several dedicated style packages and markup elements which can be used for making slick presentations.") (concat "Several types of remote controllers are supported for laptop presentations. Some of them (such as Apple infrared controllers) should work out of the box (at least for the Qt version). Others map the buttons on the remote controller to certain keys on your keyboard, and you will need to toggle " (menu "View" "Remote control") " in order to remap these keys to the right actions during presentations. If necessary, the appropriate mappings may be specified in " (menu "Edit" "Preferences" "Keyboard" "Remote control") ". By activating the debugging tool " (menu "Tools" "Debugging tool") " and " (menu "Debug" "keyboard") ", you may find out the particular mappings used by your remote control.") (section "Beamer styles") (concat "In order to start writing a laptop presentation, you should first select the " (tmstyle "beamer") " style using " (menu "Document" "Style" "beamer") ". There are several main themes for presentations, such as " (subsubmenu "Document" "Beamer theme" "Bluish") ", " (subsubmenu "Document" "Beamer theme" "Ice") ", " (subsubmenu "Document" "Beamer theme" "Metal") ", " (subsubmenu "Document" "Beamer theme" "Reddish") ", " (subsubmenu "Document" "Beamer theme" "Ridged paper") ", which can be selected from the " (menu "Document" "Beamer theme") " menu.") (concat "The presentation style includes the " (tmstyle "alt-colors") " style package, which features the use of colors for mathematical formulas, enunciations, etc. Additional customizations of the presentation style are available in the " (menu "Focus" "Preferences") " menus for the various tags to which they apply. For instance, the rendering of slide titles and theorems can be further customized.") (section "Traversal of a presentation") (concat "One major family of markup tags for presentations concerns the traversal of the document during a presentation. The keys " (key "F10") " and " (key "F11") " are used respectively for going back and forth in the presentation. The keys " (key "F9") " and " (key "F12") " are used to go to the start " (abbr "resp.") " end of the presentation. When using the " (tmstyle "beamer") " style or when enabling the presentation tool in the " (menu "Tools") " menu, a " (menu "Dynamic") " menu and additional icons will appear, which can also be used for the traversal of your presentation.") (concat "The most basic traversal tag is called a switch, and allows the user to show different pieces of text in successive and mutually exclusive manner. The entire presentation itself usually consists of a " (markup "screens") " switch, where the pieces are the successive slides of the presentation. After selection of the " (tmstyle "beamer") " style, this switch can be inserted using " (menu "Focus" "Screens") " or " (menu "Insert" "Fold" "Switch" "Screens") ". You may jump from one screen to another one using " (key "pageup") " and " (key "pagedown") ".") (concat "Inside a switch, new branches can be inserted after or before the currently visible branch using " (menu "Focus" "Insert argument after") " or " (menu "Focus" "Insert argument before") ". Besides the " (markup "screens") " switch, you may use " (menu "Insert" "Fold" "Switch" "Standard") " to insert paragraph-wide switches, and " (menu "Insert" "Fold" "Switch" "Standard") " to insert inline switches (similarly to displayed and inline formulas).") (concat "Another popular way to traverse is presentation is to progressively unroll content. This can be done by inserting an " (markup "unroll") " tag using " (menu "Insert" "Fold" "Unroll") ". Using a hack this tag can be combined with the " (markup "itemize") " and " (markup "enumerate") " tags: first create the list environment, but remove the first (automatically inserted) " (markup "item") " tag. Next insert the unroll tag. When pressing " (key "enter") " inside the unroll tag, new items are created; you still have to use " (menu "Focus" "Insert argument after") " for inserting new branches to the unroll structure (in particular, several items could be unrolled at once).") (concat "A variant of unrolling is unfolding. This is basically an unroll tag with exactly two branches, but different variants are available in " (menu "Insert" "Fold" "Folded") " depending on the desired rendering. In particular, some of the renderings display a button which may be pushed in order to fold or unfold some content. The input-output fields inside computer algebra sessions are also foldable. Similarly, the tags in " (menu "Insert" "Fold" "Summarize") " are switches with two branches, again with different kinds of rendering.") (concat "When using " (TeXmacs) " in combination with an external plug-in, such as a computer algebra system, you will notice that all input-output fields in " (hlink "sessions" "interface/man-session-basic.en.tm") " are foldable. In addition, you can create so called " (hlink "executable switches" "interface/man-scripting-language.en.tm") " using the items in the " (menu "Insert" "Fold" "Executable") " submenu. This allows you to switch back and forth between a given input to the system and the corresponding output.") (concat "All markup for the traversal of presentations may be nested in a natural way. In the " (menu "Insert" "Fold" "Traversal") " menu, you may specify whether unrolled and folded structures should be folded back after traversal.") (section "Overlays") "The standard fold, unroll and switch tags implement the most frequent kinds of traversal of a slideshow. However, there are cases in which more complex successions are needed." (big-figure (concat (block (tformat (cwith "1" "1" "1" "1" "cell-hyphen" "t") (twith "table-width" "0.333par") (twith "table-hmode" "exact") (table (row (cell (document (compact (document (concat "Elimination of " (math "x") " from") (equation* (document "x*sin y-3*x*y=<alpha>")) "yields" (equation* (document (concat "x=" (frac "<alpha>" "sin y-3*y") "."))))))))))) (space "2em") (block (tformat (cwith "1" "1" "1" "1" "cell-hyphen" "t") (twith "table-width" "0.333par") (twith "table-hmode" "exact") (table (row (cell (document (compact (document (concat "Elimination of " (math (with "color" "red" "x")) " from") (equation* (document (concat (with "color" "red" "x") "*sin y-3*" (with "color" "red" "x") "*y=<alpha>"))) "yields" (equation* (document (concat (with "color" "red" "x") "=" (frac "<alpha>" "sin y-3*y") ".")))))))))))) (document (concat (label "red-x-fig") "Example of highlighting a variable " (math "x") " when switching from one slide to a next one."))) (concat "For instance, imagine that we are given a slide, and that we wish to highlight all occurrences of some variable " (math "x") " in red on the next slide (see figure" (nbsp) (reference "red-x-fig") "). This could be achieved by using a switch tag: we just copy the whole slide both in the first and in the second branch of the switch, and next color all instances of " (math "x") " red in the second branch. However, this solution has the disadvantage that any " (em "a posteriori") " modification on the slide has to be made both in the first and in the second branch.") (concat (TeXmacs) " provides a so called overlay mechanism for this kind of more complex successions of slides. You may insert a pile of overlays using " (menu "Insert" "Fold" "Overlays" "Standard") ". At the start, the pile contains a unique overlay, but new overlays can then be added using the standard keyboard shortcuts " (shortcut "(structured-insert-right)") " and " (shortcut "(structured-insert-left)") " for " (hlink "structured insertion" "editing/man-structured-editing.en.tm") ". When applied to overlays, the standard keys " (key "F10") " and " (key "F11") " for traversing the presentation have the effect of going up and down in the pile of overlays.") (concat "By default, all text which is typed by the user will be visible on all overlays. But, using the filters in the menu " (menu "Insert" "Fold" "Overlay") ", it is also possible to create text which is only visible on specified overlays of the pile. There are four basic types of filters:") (description (document (concat (item* (subsubsubmenu "Insert" "Fold" "Overlay" "Visible from here on")) "Text that will be visible on this and all subsequent overlays.") (concat (item* (subsubsubmenu "Insert" "Fold" "Overlay" "Visible until here")) "Text that will be visible on this and all previous overlays.") (concat (item* (subsubsubmenu "Insert" "Fold" "Overlay" "Visible only here")) "Text that will be visible only on this overlay.") (concat (item* (subsubsubmenu "Insert" "Fold" "Overlay" "Visible except here")) "Text that will be visible on all but the current overlays."))) (concat "In a similar way, " (TeXmacs) " provides tags for alternate views: depending on whether a certain predicate is met, we show the main content on certain overlays and the alternate content on the remaining overlays. We use the same four types of predicates:") (description (document (concat (item* (subsubsubmenu "Insert" "Fold" "Overlay" "Alternate from here on")) "The alternate text will be used on this and all subsequent overlays.") (concat (item* (subsubsubmenu "Insert" "Fold" "Overlay" "Alternate until here")) "The alternate text will be used on this and all previous overlays.") (concat (item* (subsubsubmenu "Insert" "Fold" "Overlay" "Alternate only here")) "The alternate text will only be used on this overlay.") (concat (item* (subsubsubmenu "Insert" "Fold" "Overlay" "Alternate except here")) "The alternate text will be used on all but the current overlays."))) (concat (TeXmacs) " finally provides a means of customizing the way that hidden and shown content should be rendered: user determined coloring schemes can be used using the " (markup "alter-colors") " tag which can be inserted from " (menu "Insert" "Fold" "Overlay" "Specify color alternation") ". For instance, in order to achieve the effect mentioned in the example from Figure" (nbsp) (reference "red-x-fig") ", you may specify a black to red color alternation, and then use a " (subsubsubmenu "Insert" "Fold" "Overlay" "Visible from here on") " type of overlay.") (section "Decorations") (concat "In order to decorate your laptop presentations, " (TeXmacs) " provides a few extra markup elements: " (markup "granite") ", " (markup "manila-paper") ", " (markup "metal") ", " (markup "pine") ", " (markup "ridged-paper") " and " (markup "rough-paper") ". These tags will put your content on a nice, natural background, as illustrated in the figure below. You may also use the " (markup "tit") " tag for giving individual slides a title.") (big-figure (document (concat (use-package "ornaments") (tabular* (tformat (table (row (cell (concat (granite (tabular* (tformat (twith "table-lsep" "0.5em") (twith "table-rsep" "0.5em") (twith "table-bsep" "0.5em") (twith "table-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (table (row (cell (large (strong "Granite")))) (row (cell (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))))))))) (space "1em") (metal (tabular* (tformat (twith "table-lsep" "0.5em") (twith "table-rsep" "0.5em") (twith "table-bsep" "0.5em") (twith "table-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (table (row (cell (large (strong "Metal")))) (row (cell (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))))))))) (space "1em") (pine (tabular* (tformat (twith "table-lsep" "0.5em") (twith "table-rsep" "0.5em") (twith "table-bsep" "0.5em") (twith "table-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (table (row (cell (large (strong "Pine")))) (row (cell (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2")))))))))))) (row (cell "")) (row (cell (concat (manila-paper (tabular* (tformat (twith "table-lsep" "0.5em") (twith "table-rsep" "0.5em") (twith "table-bsep" "0.5em") (twith "table-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (table (row (cell (large (strong "Manila paper")))) (row (cell (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))))))))) (space "1em") (ridged-paper (tabular* (tformat (twith "table-lsep" "0.5em") (twith "table-rsep" "0.5em") (twith "table-bsep" "0.5em") (twith "table-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (table (row (cell (large (strong "Ridged paper")))) (row (cell (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))))))))) (space "1em") (rough-paper (tabular* (tformat (twith "table-lsep" "0.5em") (twith "table-rsep" "0.5em") (twith "table-bsep" "0.5em") (twith "table-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (table (row (cell (large (strong "Rough paper")))) (row (cell (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2")))))))))))))))) "") (document (concat (label "ornament-fig") "Some standard ornaments for decorating your presentations."))) (section "Animations") (concat (TeXmacs) " provides some rudimentary support for animations inside laptop presentations. This support is likely to be further improved in future " (TeXmacs) " distributions.") (concat "The simplest animations are available from the menus " (menu "Insert" "Animation" "Translate") " and " (menu "Insert" "Animation" "Progressive") ". Using the first menu, it is possible to create moving content: you first specify a duration for the full animation and then enter the content which has to be moved. The different kinds of moving content are illustrated in figure" (nbsp) (reference "translate-fig") ". Similarly, using the second menu, it is possible to create content which only progressively appears on the screen. The various kinds of progressive content are illustrated in figure" (nbsp) (reference "progressive-fig") ". The duration of the animations can be " (hlink (concat "modified " (em (concat "a" (nbsp) "posteriori"))) "editing/man-structured-geometry.en.tm") " by putting your cursor inside them and using the shortcuts " (shortcut "(geometry-left)") " and" (nbsp) (shortcut "(geometry-right)") ".") (big-figure (concat (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (anim-translate (large "Hello world") "2sec" (tuple "-1.0" "0.0") ""))) (row (cell (menu "Rightwards")))))) (space "1em") (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (anim-translate (large "Hello world") "2sec" (tuple "1.0" "0.0") ""))) (row (cell (menu "Leftwards")))))) (space "1em") (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (anim-translate (large "Hello world") "2sec" (tuple "0.0" "-1.0") ""))) (row (cell (menu "Upwards")))))) (space "1em") (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (anim-translate (large "Hello world") "2sec" (tuple "0.0" "1.0") ""))) (row (cell (menu "Downwards"))))))) (concat (label "translate-fig") "Moving content, as inserted from " (menu "Insert" "Animation" "Translate") ".")) (big-figure (concat (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (anim-progressive (large (concat "Hello" (anim-progressive "" "2sec" (tuple "0.0" "0.0" "0.0" "1.0") ""))) "2sec" (tuple "0.0" "0.0" "0.0" "1.0") ""))) (row (cell (menu "Rightwards")))))) (space "1em") (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (anim-progressive (large "Hello") "2sec" (tuple "1.0" "0.0" "1.0" "1.0") ""))) (row (cell (menu "Leftwards")))))) (space "1em") (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (anim-progressive (large (concat "Hello wo" (anim-progressive "" "2sec" (tuple "0.0" "0.0" "0.0" "1.0") "") "rld")) "2sec" (tuple "0.5" "0.5" "0.5" "0.5") ""))) (row (cell (menu "From center")))))) (space "1em") (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (anim-progressive (large "Hello") "2sec" (tuple "0.0" "0.0" "1.0" "0.0") ""))) (row (cell (menu "Upwards")))))) (space "1em") (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (anim-progressive (large "Hello") "2sec" (tuple "0.0" "1.0" "1.0" "1.0") ""))) (row (cell (menu "Downwards"))))))) (concat (label "progressive-fig") "Progressive content, as inserted from " (menu "Insert" "Animation" "Progressive") ".")) (concat "Other basic animations are animated gif pictures, which can be inserted from " (menu "Insert" "Animation" "Animation") ", and sounds, which can be inserted from " (menu "Insert" "Animation" "Sound") ". Support for movies should be added later.") (concat "It is also possible to combine animation, so as to form larger animations. For instance, using " (menu "Insert" "Animation" "Compose") " you can play several animations one after another. Often the individual elements of a composed animations are fixed animation of a given duration, which can be inserted using " (menu "Insert" "Animation" "Fixed") ". Of course, you may also use moving or progressive content or even composed animations as building blocks. An animation can be repeated indefinitely using " (menu "Insert" "Animation" "Repeat") ". This may for instance be used to create a blinking effect. Some examples of the various possibilities can be found in figure" (nbsp) (reference "compose-fig") ". " (rsub (math ""))) (big-figure (concat (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (anim-compose (anim-constant (large "Hello") "2sec") (anim-constant (large "World") "2sec")))) (row (cell "Compose"))))) (space "1em") (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (anim-repeat (anim-compose (anim-constant (large (concat (space "0.6spc") "Hello")) "1sec") (anim-constant (large "World") "1sec"))))) (row (cell "Blinking"))))) (space "1em") (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (large (anim-repeat (anim-compose (anim-constant (concat (with "color" "brown" (concat "T" (space "-0.2spc") (rsub (with "math-level" "0" "font-shape" "small-caps" "e")) "X" (space "-0.2spc"))) (with "color" "dark green" (rsub (with "math-level" "0" "font-shape" "small-caps" (concat "m" (space "-0.2spc") "a" (space "-0.4spc") "c" (space "-0.2spc") "s"))))) "1sec") (anim-constant (concat (with "color" "dark green" (concat "T" (space "-0.2spc") (rsub (with "color" "brown" (with "math-level" "0" "font-shape" "small-caps" "e"))) "X" (space "-0.2spc"))) (with "color" "brown" (rsub (with "math-level" "0" "font-shape" "small-caps" (concat "m" (space "-0.2spc") "a" (space "-0.4spc") "c" (space "-0.2spc") "s"))))) "1sec")))))) (row (cell (concat (TeXmacs) " logo")))))) (space "1em") (tabular* (tformat (cwith "1" "1" "1" "1" "cell-lsep" "0.5em") (cwith "1" "1" "1" "1" "cell-rsep" "0.5em") (cwith "1" "1" "1" "1" "cell-bsep" "0.5em") (cwith "1" "1" "1" "1" "cell-tsep" "0.5em") (cwith "1" "1" "1" "1" "cell-background" "pastel yellow") (cwith "2" "2" "1" "1" "cell-tsep" "0.5em") (table (row (cell (anim-repeat (large (name (anim-compose (concat (anim-progressive (with "color" "dark green" (concat "Mathe" (rsub (math "")))) "2sec" (tuple "0.0" "0.0" "0.0" "1.0") "") (phantom "magiX")) (anim-constant (concat (with "color" "dark green" (concat "Mathe" (rsub (math "")))) (with "color" "dark magenta" "magiX")) "1sec"))))))) (row (cell (concat (name "Magix") " animation"))))))) (concat (label "compose-fig") "Different kinds of composed animations.")) (section "Exporting beamer presentations") (concat "Once you have created a file with the " (tmstyle "beamer") " style you may want to export it to " (abbr "PDF") " in order to be able to give your presentation without using " (TeXmacs) ". There are two ways in which this can be done: " (em "expanded") " and " (em "unexpanded") ".") (enumerate (document (concat (item) (em "Expanded") " means that " (markup "fold") "s of all kinds are flattened out before they are exported. This is useful if you intend the resulting " (abbr "PDF") " file to be distributed and printed, since it will have exactly as many pages as slides your presentation.") (concat (item) (em "Unexpanded") " means that the " (abbr "PDF") " file will have as many pages as " (em "steps") " your presentation, which depending on your use of " (markup "fold") ", " (markup "switch") ", " (markup "overlay") ", etc. will typically result in many more pages."))) (concat "You can select which of these methods will be used with " (menu "Preferences" "Converters" "TeXmacs-<gtr>Pdf/Postscript" "Expand beamer slides") ".") (chapter (concat "Using GNU " (TeXmacs) " as an interface")) (concat "An important feature of " (TeXmacs) " is it's ability to communicate with extern systems. For computer algebra systems or other scientific computation systems, this is typically done in shell-like sessions, in which it is possible to evaluate commands and display the results in a nice, graphical way. Some systems can also be used more in the background as scripting languages.") (concat "See " (menu "Help" "Plug-ins") " for a list of existing plug-ins and more documentation on these systems.") (section "Creating sessions") (concat "A session can be started from the " (menu "Insert" "Session") " menu. Since " (TeXmacs) " is based on the " (name "Scheme") " language, it is always possible to start a " (name "Scheme") " session using " (menu "Insert" "Session" "Scheme") ". On " (name "Unix") " systems, it is usually also possible to start " (name "Bash") " shell sessions using " (menu "Insert" "Session" "Shell") ". The remainder of the items in the " (menu "Insert" "Session") " menu depend on the plug-ins which are installed on your system.") (concat "A session consists of a sequence of input and output fields and possible text between them. When pressing " (shortcut "(kbd-return)") " inside an input field of a session, the text inside the environment is evaluated and the result is displayed in an output field.") "When entering a command in a session, the application attempts to execute it. Several commands may be launched concurrently in the same document, but the output will only be active in the session where the cursor is and at the place of the cursor. Therefore, we recommend to use different buffers for parallel executions." (concat "For each type of extern application, one may choose between sharing a single process by different sessions, or launching a separate process for each different session. More precisely, when inserting a session using " (menu "Insert" "Session" "Other") ", you may specify both a session type (Shell, Pari, Maxima, " (abbr "etc.") ") and a session name (the default name is default). Sessions with different names correspond to different processes and sessions with the same name share a common process.") (concat "In order to finish the process which underlies a given session, you may use " (menu "Session" "Close session") ". When pressing " (shortcut "(kbd-return)") " in the input of a non-connected system, the system will be restarted automatically. You may also use " (menu "Session" "Interrupt execution") " in order to interrupt the execution of a command. However, several applications do not support this feature.") (concat "In order to evaluate all fields of " (abbr "e.g.") " a previously created session, you may use " (menu "Session" "Evaluate" "Evaluate all") ". Similarly, " (menu "Session" "Evaluate" "Evaluate above") " and " (menu "Session" "Evaluate" "Evaluate below") " allow you to evaluate all field above or below the current field.") (section "Editing sessions") "Inside input fields of sessions, the cursor keys have a special meaning: when moving upwards or downwards, you will move to previous or subsequent input fields. When moving to the left or to the right, you will never leave the input field; you should rather use the mouse for this." (concat "Some facilities for editing input, output and text fields are available in the " (menu "Session" "Field") " menu. Keyboard shortcuts for inserting fields are " (shortcut "(structured-insert-up)") " (insert above) and " (shortcut "(structured-insert-down)") ". Keyboard shortcuts for removing matching text/input/output fields are " (shortcut "(structured-remove-left)") " (remove backwards) and " (shortcut "(structured-remove-right)") " (remove current fields).") (concat "It is possible to create subsessions using " (menu "Session" "Session" "Create subsession") " or " (shortcut "(structured-insert-right)") ". In that case, the current input-output field becomes the body of an unfolded subsession. Such a subsession consists of an explanatory text together with the subsession body. Subsessions can be folded and unfolded using " (shortcut "(dynamic-previous)") " " (abbr "resp.") " " (shortcut "(dynamic-next)") ". Subsessions have a nice rendering on the screen when using the " (tmpackage "framed-session") " package in " (menu "Document" "Use package" "Program") ".") (concat "Notice that input/output fields and subsessions are foldable: when clicking on the prompt with the mouse, you may fold or unfold the entry to hide or show the output. For laptop presentations, this folding and unfolding process is done automatically when traversing your presentation. It is also possible to fold or unfold all fields in a session using " (menu "Session" "Session" "Fold all fields") " and " (menu "Session" "Session" "Unfold all fields") ".") (concat "Other useful editing operations are " (menu "Session" "Session" "Clear all fields") ", which is useful for creating a demo session which will be executed later on, and " (menu "Session" "Split session") ", which can be used for splitting a session into parts for inclusion into a paper.") (example (document (concat (label "session-example") "A typical " (name "Maxima") " session is given below. If " (name "Maxima") " is present on your system, then you may put your cursor in one of the inputs, perform some edits, and try to reexecute it.") (session "maxima" "default" (document (output (document "Maxima 5.25.1 http://maxima.sourceforge.net" "using Lisp SBCL 1.0.51" "Distributed under the GNU Public License. See the file COPYING." "Dedicated to the memory of William Schelter." "The function bug_report() provides bug reporting information.")) (unfolded-io (document (with "color" "red" (concat "(" (with "math-font-family" "rm" "%i") "1) "))) (document "diff (x^x^x, x)") (document (math (with "math-display" "true" (concat (text (with "font-family" "tt" "color" "red" (concat "(" (with "math-font-family" "rm" "%o1") ") "))) "x" (rsup (concat "x" (rsup "x"))) "*" (around* "(" (concat "x" (rsup "x") "*log " (around* "(" "x" ")") "*" (around* "(" (concat "log " (around* "(" "x" ")") "+1") ")") "+x" (rsup "x-1")) ")")))))) (unfolded-io (document (with "color" "red" (concat "(" (with "math-font-family" "rm" "%i") "2) "))) (document "integrate (%o1, x)") (document (math (with "math-display" "true" (concat (text (with "font-family" "tt" "color" "red" (concat "(" (with "math-font-family" "rm" "%o2") ") "))) "<mathe>" (rsup (concat "<mathe>" (rsup (concat "x*log " (around* "(" "x" ")"))) "*log " (around* "(" "x" ")")))))))) (unfolded-io (document (with "color" "red" (concat "(" (with "math-font-family" "rm" "%i") "3) "))) (document "integrate (x^5 / (x^2 - x + 17), x)") (document (math (with "math-display" "true" (concat (text (with "font-family" "tt" "color" "red" (concat "(" (with "math-font-family" "rm" "%o3") ") "))) (frac (concat "239*log " (around* "(" (concat "x" (rsup "2") "-x+17") ")")) "2") "+" (frac (concat "1361*arctan " (around* "(" (frac "2*x-1" (sqrt "67")) ")")) (sqrt "67")) "+" (frac (concat "3*x" (rsup "4") "+4*x" (rsup "3") "-96*x" (rsup "2") "-396*x") "12")))))))))) (section "Selecting the input method") (concat "By default, " (TeXmacs) " will attempt to evaluate the input field when pressing " (key "return") ". Multiline input can be created using " (key "S-return") ". Alternatively, when selecting the multiline input mode using " (menu "Session" "Input mode" "Multiline input") ", the " (key "return") " key will behave as usual and " (key "S-return") " may be used in order to evaluate the input field. Notice finally that certain systems admit built-in heuristics for testing whether the input has been completed; if not, then the " (key "return") " may behave as usual.") (concat "Certain applications allow you to type the mathematical input in a graphical, two dimensional form. This feature can be used by selecting " (menu "Session" "Input mode" "Mathematical input") ". If this feature is available, then it is usually also possible to copy and paste output back into the input. However, it depends on the particular application how well this works. Keep in mind that some key combinations may be used by the " (subsubmenu "Session" "Input" "Mathematical input") " mode: for instance the key " (key "$") " is usually redefined inside math mode, so if you want to input it you'll have to type " (key "S-F5") (key "$") ". You can read more about the prefix key " (key "S-F5") " in " (hlink "Keyboard shortcuts fot text mode" "text/keyboard/man-text-kbd.en.tm") ".") (example (document (concat "Below, you will find the " (hlink "previous example session" "interface/man-session-edit.en.tm#session-example") ", but now using mathematical input:") (session "maxima" "default" (document (output (document "Maxima 5.25.1 http://maxima.sourceforge.net" "using Lisp SBCL 1.0.51" "Distributed under the GNU Public License. See the file COPYING." "Dedicated to the memory of William Schelter." "The function bug_report() provides bug reporting information.")) (unfolded-io-math (document (with "color" "red" (concat "(" (with "math-font-family" "rm" "%i") "1) "))) (document (concat "diff" (around* "(" (concat "x" (rsup (concat "x" (rsup "x"))) ",x") ")"))) (document (math (with "math-display" "true" (concat (text (with "font-family" "tt" "color" "red" (concat "(" (with "math-font-family" "rm" "%o1") ") "))) "x" (rsup (concat "x" (rsup "x"))) "*" (around* "(" (concat "x" (rsup "x") "*log " (around* "(" "x" ")") "*" (around* "(" (concat "log " (around* "(" "x" ")") "+1") ")") "+x" (rsup "x-1")) ")")))))) (unfolded-io-math (document (with "color" "red" (concat "(" (with "math-font-family" "rm" "%i") "2) "))) (document (concat (big "int") "%o1*<mathd> x")) (document (math (with "math-display" "true" (concat (text (with "font-family" "tt" "color" "red" (concat "(" (with "math-font-family" "rm" "%o2") ") "))) "<mathe>" (rsup (concat "<mathe>" (rsup (concat "x*log " (around* "(" "x" ")"))) "*log " (around* "(" "x" ")")))))))) (unfolded-io-math (document (with "color" "red" (concat "(" (with "math-font-family" "rm" "%i") "3) "))) (document (concat (big "int") (frac (concat "x" (rsup "5")) (concat "x" (rsup "2") "-x+17")) "*<mathd> x")) (document (math (with "math-display" "true" (concat (text (with "font-family" "tt" "color" "red" (concat "(" (with "math-font-family" "rm" "%o3") ") "))) (frac (concat "239*log " (around* "(" (concat "x" (rsup "2") "-x+17") ")")) "2") "+" (frac (concat "1361*arctan " (around* "(" (frac "2*x-1" (sqrt "67")) ")")) (sqrt "67")) "+" (frac (concat "3*x" (rsup "4") "+4*x" (rsup "3") "-96*x" (rsup "2") "-396*x") "12")))))))))) (section "Plug-ins as scripting languages") (concat (TeXmacs) " provides a few other kinds of additional interfaces to external systems in addition to shell-like interfaces. First of all, it is possible to insert a so called executable switch anywhere in the document using " (menu "Insert" "Fold" "Executable") ".") (concat "For instance, if " (name "Maxima") " is installed on your system, then " (menu "Insert" "Fold" "Executable" "Maxima") " should yield something like " (script-input "maxima" "default" "" "") ". You may enter a" (nbsp) (name "Maxima") " expression in the yellow part of this markup, say " (script-input "maxima" "default" "diff(x^x,x)" "") ". Using " (shortcut "(kbd-return)") ", you may now switch back and forth between the unevaluated input and the evaluated output " (script-output "maxima" "default" "diff(x^x,x)" (math (concat "x" (rsup "x") "*" (around* "(" (concat "log " (around* "(" "x" ")") "+1") ")")))) ". Using " (shortcut "(kbd-shift-return)") ", you enable multi-line input. This kind of executable switches are very useful for plug-ins such as " (name (concat "Dra" (TeX))) ", " (name "Eukleides") ", " (name "Feynmf") ", " (abbr "etc.") ", which are mainly used for the efficient computation and insertion of special graphics inside " (TeXmacs) " documents.") (concat "Some plug-ins such as " (name "Maxima") " can even be selected as a " (em "scripting language") " using " (menu "Document" "Scripts" "Maxima") ". When doing so, a special " (menu "Maxima") " menu will appear, which allows for many useful operations directly on formulas. For instance, when putting the cursor inside the formula " (math "1+1") " and pressing " (shortcut "(script-eval)") " or " (menu "Evaluate") ", the formula gets evaluated automatically to yield " (math "2") ".") (concat "If a plug-in can be used as a scripting language, then it is possible to create executable switches with links between them. More precisely, assuming that you selected a scripting language from " (menu "Document" "Scripts") ", you may insert a new " (em "executable input field") " using " (shortcut "(make-calc-input)") " or " (menu "Insert" "Link" "Executable input field") ". As before, when pressing " (key "return") ", the current input is evaluated and you will see the corresponding output; you may switch back to the input by pressing " (key "return") " once more.") (concat "Contrary to executable switches, you may attach an identifier to the executable input field by disactivating the field or by editing the " (samp "Ref") " field in the focus bar. Inside other executable input fields, you may then refer to the value of the field by inserting a " (em "field reference") " using " (shortcut "(make 'calc-ref)") " or " (menu "Insert" "Link" "Field reference") ". As a variant to executable input fields, you may sometimes prefer to insert plain " (em "input fields") " using " (shortcut "(make-calc-inert)") " or " (menu "Insert" "Link" "Input field") ". These fields can only be used as inputs and pressing " (key "return") " inside such a field will only recompute those other fields which depend on it.") (example (document "The excutable input fields may for instance be nice in pedagogic documents in which parts of the document may be modified and recomputed by the reader. For instance, evaluation of the input fragment" (quote-env (document (concat "The derivative of " (with "prog-scripts" "maxima" (calc-inert "function" (math (concat "x" (rsup "x"))))) " equals " (with "prog-scripts" "maxima" (calc-input "derivative" (concat "diff(" (calc-ref "function") ",x)") (math (concat "x" (rsup "x") "*" (around* "(" (concat "log " (around* "(" "x" ")") "+1") ")"))))) ".") (concat "The second derivative is given by " (with "prog-scripts" "maxima" (calc-input "second" (concat "diff(" (calc-ref "derivative") ",x)") (math (concat "x" (rsup "x") "*" (around* "(" (concat "log " (around* "(" "x" ")") "+1") ")") (rsup "2") "+x" (rsup "x-1"))))) "."))) "yields" (quote-env (document (concat "The derivative of " (with "prog-scripts" "maxima" (calc-inert "function2" (math (concat "x" (rsup "x"))))) " equals " (with "prog-scripts" "maxima" (calc-output "derivative2" (concat "diff(" (calc-ref "function2") ",x)") (math (concat "x" (rsup "x") "*" (around* "(" (concat "log " (around* "(" "x" ")") "+1") ")"))))) ".") (concat "The second derivative is given by " (with "prog-scripts" "maxima" (calc-output "second2" (concat "diff(" (calc-ref "derivative2") ",x)") (math (concat "x" (rsup "x") "*" (around* "(" (concat "log " (around* "(" "x" ")") "+1") ")") (rsup "2") "+x" (rsup "x-1"))))) "."))) (concat "Of course, if the reader changes the input function " (math (concat "x" (rsup "x"))) " into something else and presses " (key "return") ", then the first and second derivatives will be updated automatically."))) (section "Spreadsheets") (concat (TeXmacs) " provides rudimentary spreadsheet-like facilities with the advantage that the computations can be carried out using any of the plug-ins that can be used as a scripting language. In order to use the spreadsheet facilities, you should therefore start with the selection of a scripting language in the menu " (menu "Document" "Scripts") ".") (concat "As soon as you have selecting a scripting language, such as " (name "Maxima") ", then you may enter a new spreadsheet using " (menu "Insert" "Table" "Textual spreadsheet") " or " (menu "Insert" "Table" "Numeric spreadsheet") ". You may edit the spreadsheet as an ordinary table, except that the " (key "return") " key will attempt to reevaluate the cells of the table.") (concat "In addition, when preceding the contents of a cell by =, then cell will be considered as an input-output switch. More precisely, the input is a formula which will be evaluated using the current scripting language. After the evaluation, only the result of the evaluation is shown in the cell. After pressing " (key "return") " a second time in the cell, it will be possible switch back and edit the input. In the formulas, one may refer to the others using names such as " (samp "c5") " for the third row and the fifth column.") (example (document "On the left-hand side of the figure below, we have displayed a simple table with formulas for evaluating the sums of the first two items of each row. On the right-hand side, we have shown the result after evaluation." (big-figure (small (with "prog-scripts" "maxima" (concat (calc-table "simple1" (numeric-dot-table (tformat (cwith "1" "-1" "1" "-1" "cell-width" "5em") (cwith "1" "-1" "1" "-1" "cell-hmode" "max") (table (row (cell (cell-inert "a1" "1")) (cell (cell-inert "b1" "10")) (cell (cell-inert "c1" "=a1+b1"))) (row (cell (cell-inert "a2" "100")) (cell (cell-inert "b2" "1000")) (cell (cell-inert "c2" "=a2+b2"))))))) (space "2em") (calc-table "simple2" (numeric-dot-table (tformat (cwith "1" "-1" "1" "-1" "cell-width" "5em") (cwith "1" "-1" "1" "-1" "cell-hmode" "max") (table (row (cell (cell-inert "a1" "1")) (cell (cell-inert "b1" "10")) (cell (cell-output "c1" "=a1+b1" (math "11")))) (row (cell (cell-inert "a2" "100")) (cell (cell-inert "b2" "1000")) (cell (cell-output "c2" "=a2+b2" (math "1100"))))))))))) (document "Evaluation of a simple spreadsheet.")))) (example (document (concat "The cells may contain mathematical formulas and the spreadsheet may take advantage of any of the capacities of the scripting language. For instance, the figure below demonstrates another possible use of " (name "Maxima") ".") (big-figure (small (with "prog-scripts" "maxima" (concat (calc-table "derivatives1" (textual-table (tformat (cwith "1" "-1" "1" "1" "cell-width" "15em") (cwith "1" "-1" "1" "1" "cell-hmode" "max") (table (row (cell (cell-inert "a1" (math (concat "sin" (around* "(" (concat "x" (rsup "2")) ")")))))) (row (cell (cell-inert "a2" "=diff(a1,x)"))) (row (cell (cell-inert "a3" "=diff(a2,x)"))) (row (cell (cell-inert "a4" "=diff(a3,x)"))))))) (space "2em") (calc-table "derivatives2" (textual-table (tformat (cwith "1" "-1" "1" "1" "cell-width" "15em") (cwith "1" "-1" "1" "1" "cell-hmode" "max") (table (row (cell (cell-inert "a1" (math (concat "sin" (around* "(" (concat "x" (rsup "2")) ")")))))) (row (cell (cell-output "a2" "=diff(a1,x)" (math (concat "2*x*cos " (around* "(" (concat "x" (rsup "2")) ")")))))) (row (cell (cell-output "a3" "=diff(a2,x)" (math (concat "2*cos " (around* "(" (concat "x" (rsup "2")) ")") "-4*x" (rsup "2") "*sin " (around* "(" (concat "x" (rsup "2")) ")")))))) (row (cell (cell-output "a4" "=diff(a3,x)" (math (concat "-12*x*sin " (around* "(" (concat "x" (rsup "2")) ")") "-8*x" (rsup "3") "*cos " (around* "(" (concat "x" (rsup "2")) ")"))))))))))))) (document (concat "Computation of successive derivatives using " (name "Maxima") "."))))) (concat (TeXmacs) " supports a few special notations for applying operations on all cells in a subtable. For instance, as in " (name "Excel") ", one may use the notation " (samp "c3:d5") " for indicating all cells " (samp "c3") ", " (samp "c4") ", " (samp "c5") ", " (samp "d3") ", " (samp "d4") ", " (samp "d5") " in the block from " (samp "c3") " to " (samp "d5") ". An alternative notation " (cell-commas) " for " (samp ":") " can be entered by typing " (key ", ,") ". In a similar way, one may enter the special notation " (cell-plusses) " by typing " (key "+ +") ". For instance, " (samp (concat "c3" (cell-plusses) "d5")) " stands for the sum of all cells between " (samp "c3") " and " (samp "d5") ".") (example (document "The figure below shows an example on how to use taking sums of cells. Notice that empty cells count for zero." (big-figure (small (with "prog-scripts" "maxima" (concat (calc-table "sum1" (numeric-dot-table (tformat (cwith "1" "-1" "1" "-1" "cell-width" "5em") (cwith "1" "-1" "1" "-1" "cell-hmode" "max") (table (row (cell (cell-inert "a1" "15.10")) (cell (cell-inert "b1" "15.10")) (cell (cell-inert "c1" "30.20"))) (row (cell (cell-inert "a2" "100")) (cell (cell-inert "b2" "125")) (cell (cell-inert "c2" "75"))) (row (cell (cell-inert "a3" "28.50")) (cell (cell-inert "b3" "")) (cell (cell-inert "c3" "14.25"))) (row (cell (cell-inert "a4" "12")) (cell (cell-inert "b4" "16")) (cell (cell-inert "c4" "20"))) (row (cell (cell-inert "a5" (concat "=a1" (cell-plusses) "a4"))) (cell (cell-inert "b5" (concat "=b1" (cell-plusses) "b4"))) (cell (cell-inert "c5" (concat "=c1" (cell-plusses) "c4")))))))) (space "2em") (calc-table "sum2" (numeric-dot-table (tformat (cwith "1" "-1" "1" "-1" "cell-width" "5em") (cwith "1" "-1" "1" "-1" "cell-hmode" "max") (cwith "5" "5" "1" "3" "cell-width" "5em") (cwith "5" "5" "1" "3" "cell-hmode" "max") (table (row (cell (cell-inert "a1" "15.10")) (cell (cell-inert "b1" "15.10")) (cell (cell-inert "c1" "30.20"))) (row (cell (cell-inert "a2" "100")) (cell (cell-inert "b2" "125")) (cell (cell-inert "c2" "75"))) (row (cell (cell-inert "a3" "28.50")) (cell (cell-inert "b3" "")) (cell (cell-inert "c3" "14.25"))) (row (cell (cell-inert "a4" "12")) (cell (cell-inert "b4" "16")) (cell (cell-inert "c4" "20"))) (row (cell (cell-output "a5" (concat "=a1" (cell-plusses) "a4") (math "155.6"))) (cell (cell-output "b5" (concat "=b1" (cell-plusses) "b4") (math "156.1"))) (cell (cell-output "c5" (concat "=c1" (cell-plusses) "c4") (math "139.45"))))))))))) (document "Evaluation of a simple spreadsheet.")))) "Notice that copying and pasting of subtables works in the same way as for ordinary tables, with the additional features that the names of the cells and references to cells in the formulas are renumbered automatically. Similarly, automatic renumbering is used when inserting new columns or rows, or when removing existing columns or rows." (concat "We also notice that field references can be used inside spreadsheet cells in order to refer to some computational markup outside the table. Inversely, each spreadsheet also carries an invisible " (samp "Ref") " field which can be edited by deactivating the spreadsheet or from the focus bar (when selecting the entire spreadsheet). The " (samp "Ref") " field of the spreadsheet is used as a prefix for refering to the contents of cells outside the table or from within other spreadsheets. For instance, if " (samp "Ref") " equals " (samp "sheet") ", then " (samp "sheet-c4") " will refer to the field " (samp "c4") " inside the spreadsheet.") (section "Remote plug-ins") (concat "It sometimes happens that certain plug-ins are only installed on a remote computer. In many cases, it will still be possible to use such a plug-in inside " (TeXmacs) " over an " (hlink "SSH" "http://www.openssh.com/") " connection.") (concat "In order to make this work, you first have to make sure that SSH is installed on both computers and that connecting by SSH to the remote machine can be done automatically, without having to type a password. This can be done by copying your public identity on the local server to the remote server into the file " (verbatim "~/.ssh/authorized_keys") "; see the documentation on SSH for more information.") (concat "As the next step, you have to make sure that " (TeXmacs) " has been installed on both computers. The remote " (TeXmacs) " installation will mainly be used in order to detect which plug-ins can be used on the remote computer.") (concat "When everything has been set up correctly in this way, select " (menu "Insert" "Session" "Remote") " in order to open the remote plug-in selector. Add the name of the remote server by typing its name or IP address and clicking on " (menu "Add") ". After a small pause, the remote server should appear in the list together with the remote plug-ins which are supported. You may now simply select the plug-in you want to use from the list. Notice that remote plug-ins may take a few seconds in order to boot. Please be patient while booting is in progress.") (concat "Servers which have been added to the list of remote plug-in servers will be remembered at the next time when you start " (TeXmacs) ". You may use the buttons " (menu "Remove") " and " (menu "Update") " in order to remove a server from the list and to redetermine the list of supported remote plug-ins.") (chapter (concat "Writing " (TeXmacs) " style files")) (concat "One of the fundamental strengths of " (TeXmacs) " is the possibility to write your own style files and packages. The purpose of style files is multiple:") (itemize (document (concat (item) "They allow the abstraction of repetitive elements in texts, like sections, theorems, enumerations, etc.") (concat (item) "They form a mechanism which allow you to structure your text. For instance, you may indicate that a given portion of your text is an abbreviation, a quotation or important.") (concat (item) "Standard document styles enable you to write professionally looking documents, because the corresponding style files have been written with a lot of care by people who know a lot about typography and aesthetics."))) (concat "The user may select a major style from the " (menu "Document" "Style") " menu. The major style usually reflects the kind of document you want to produce (like a letter, an article or a book) or a particular layout policy (like publishing an article in a given journal).") (concat "Style packages, which are selected from the " (menu "Document" "Style") " menu, are used for further customization of the major style. For instance, the " (tmpackage "number-europe") " package enables European-style theorem numbering and the " (tmpackage "maxima") " package contains macros for customizing the layout of sessions of the " (name "Maxima") " computer algebra system. Several packages may be used together.") (concat "When you want to add your own markup to " (TeXmacs) " or personalize the layout, then you have to choose between writing a principal style file or a style package. In most cases, you will probably prefer to write a style package, since this will allow you to combine it arbitrary other styles. However, in some cases you may prefer to create a new principal style, usually by personalizing an existing style. This is usually the case if you want to mimic the layout policy of some journal. In this chapter, we will both explain how to write your own style packages and how to customize the standard styles.") (section "Writing a simple style package") (concat "Let us explain on an example how to write a simple style package. First of all, you have to create a new buffer using " (menu "File" "New") " and select the " (tmstyle "source") " document style using " (menu "Document" "Style" "source") ". Now save your empty style package in your personal style package directory") (verbatim "    $HOME/.TeXmacs/packages") (concat "Notice that the button " (menu "Texts") " in the file browser corresponds to the directory") (verbatim "    $HOME/.TeXmacs/texts") (concat "Consequently, you can go to the style package directory from there, by double clicking on " (verbatim "..") " and next on " (verbatim "packages") ". Similarly, the directory") (verbatim "    $HOME/.TeXmacs/styles") (concat "contains your personal style files. After saving your empty style package, it should automatically appear in the " (menu "Document" "Package") " menu. Notice that style files must be saved using the " (verbatim ".ts") " file extension. If you save the style file in a subdirectory of " (verbatim "$HOME/.TeXmacs/packages") ", then it will automatically appear in the corresponding submenu of " (menu "Document" "Package") ".") (concat "Let us now create a simple macro " (markup "hi") " which displays Hello world. First type " (shortcut "(make 'assign)") ", so as to create an assignment. You should see something like") (tm-fragment (document (inactive* (assign "" "")))) (concat "Now enter hi as the first argument and type " (shortcut "(make 'macro)") " inside the second argument in order to create a macro. You should now see something like") (tm-fragment (document (inactive* (assign "hi" (macro ""))))) "Finally, type the text Hello world in the body of the macro. Your document should now consist of the following line:" (tm-fragment (document (inactive* (assign "hi" (macro "Hello world"))))) (concat "After saving your style package, opening a new document and selecting your package in the " (menu "Document" "Use package") " menu, you may now use the macro " (markup "hi") " in your document by typing " (key "\\ h i") " and hitting " (shortcut "(kbd-return)") ".") (concat "In a similar way, you may create macros with arguments. For instance, assume that we started entering a macro " (markup "hello") " in a similar way as above. Instead of typing Hello world, we first type " (shortcut "(structured-insert-left)") " inside the macro body so as to create an additional argument on the left hand side of the cursor. We next enter the name of the argument, say name. You should now see something like below:") (tm-fragment (document (inactive* (assign "hello" (macro "name" ""))))) (concat "In the second argument of the body, we now type Hello , " (shortcut "(make 'arg)") ", name, " (key "right") " and , how are you today?. After this you should see") (tm-fragment (document (inactive* (assign "hello" (macro "name" (concat "Hello " (arg "name") ", how are you today?")))))) (concat "The " (shortcut "(make 'arg)") " shortcut is used to retrieve the macro argument " (src-arg "name") ". Instead of typing " (shortcut "(make 'arg)") ", name and " (key "right") ", you may also use the hybrid " (key "\\") "-key and type " (key "\\ n a m e") " followed by " (shortcut "(kbd-return)") ". After saving your style package, you may again use the macro in any document which uses your package by typing " (key "\\ h e l l o") " and hitting " (key "return") ".") (concat "From the internal point of view, all macro definitions are stored in the environment of the " (TeXmacs) " typesetter. Besides macros, the environment also contains normal environment variables, such as section counters or the font size. The environment variables can either be globally changed using the " (markup "assign") " primitive, or locally, using the " (markup "with") " primitive. For instance, when including the line") (tm-fragment (document (inactive* (assign "section-nr" "-1")))) (concat "in your package, and using " (tmstyle "article") " as your major style, then the first section will be numbered " (no-break) (math "0") ". Similarly, the variant") (tm-fragment (document (inactive* (assign "hello" (macro "name" (concat "Hello " (with "font-shape" "small-caps" (arg "name")) "!")))))) (concat "of the " (markup "hello") " macro displays the name of the person in " (with "font-shape" "small-caps" "Small Capitals") ". Notice that the " (markup "with") " primitive can also be used to locally redefine a macro. This is for instance used in the definitions of the standard list environments, where the macro which renders list icons is changed inside the body of the list. Yet another variant of the " (markup "hello") " macro relies on the standard " (markup "person") " macro:") (tm-fragment (document (inactive* (assign "hello" (macro "name" (concat "Hello " (person (arg "name")) "!")))))) (concat "In order to produce the macro application " (inactive* (person (arg "name"))) ", you first have to start a compound tag using " (shortcut "(make 'compound)") ", type the name person, insert an argument " (shortcut "(structured-insert-right)") ", and enter the argument " (src-arg "name") " as before. When you are done, you may press " (shortcut "(kbd-return)") " in order to change the " (markup "compound") " tag into a " (markup "person") " tag. Alternatively, you may type " (key "\\") ", person, " (shortcut "(structured-insert-right)") " and name.") "By combining the above constructs, an ordinary user should already be able to produce style packages for all frequently used notations. An interesting technique for writing macros which involve complex formulas with some subformulas which may change goes as follows:" (enumerate (document (concat (item) "Type the formula, say " (math (around "(" (concat "a" (rsub "1") ",<ldots>,a" (rsub "n")) ")")) ", in an ordinary document.") (concat (item) "Create the skeleton of your macro in your style package:") (tm-fragment (document (inactive* (assign "n-tuple" (macro "a" ""))))) (concat (item) "Copy the formula and paste it into the body of your macro:") (tm-fragment (document (inactive* (assign "n-tuple" (macro "a" (concat "(a" (rsub "1") ",<ldots>,a" (rsub "n") ")")))))) (concat (item) "Replace the subformulas you want to parameterize by macro arguments:") (tm-fragment (document (inactive* (assign "n-tuple" (macro "a" (concat "(" (arg "a") (rsub "1") ",<ldots>," (arg "a") (rsub "n") ")")))))) (concat (item) "You may now use the macro in documents which use your package:") (equation* (document (with "n-tuple" (macro "a" (around "(" (concat (arg "a") (rsub "1") ",<ldots>," (arg "a") (rsub "n")) ")")) (concat (n-tuple "a") "=" (n-tuple "b") ".")))))) (section "Rendering of style files and packages") (subsection "ASCII-based or tree-based editing: an intricate choice") (concat "Most users are used to edit source code using a conventional editor like " (name "Emacs") ", while presenting the source code in ASCII format. Since all " (TeXmacs) " documents are stored as " (hlink "trees" "../devel/format/format.en.tm") ", an interesting but complicated question is which format is most suitable for editing such documents. One option is to represent the tree using an ASCII-based format, such as XML, Scheme, or the native format for storing files on a disk. The other option is to edit the trees as such, making no fundamental distinction between source code and normal documents.") (concat "In " (TeXmacs) " we have chosen to implement the second option. More precisely, any document can be edited in source mode, which is merely a mode for rendering the document in a way which makes its tree structure particularly apparent. It may be instructive to take an arbitrary document of yours and to take a look at it in source mode by enabling " (menu "Document" "Source" "Edit source tree") ".") (concat "The choice between ASCII-based editing and tree-based editing is non-trivial, because " (TeXmacs) " style files and packages have a double nature: they may be seen as programs which specify how to render macros, but these programs naturally contain ordinary content. There are several reasons why users often prefer to edit source code in an ASCII-based format:") (enumerate (document (concat (item) "It is easy to manually format the code so as to make it more readable.") (concat (item) "In particular, it is easy to add comments.") (concat (item) "Standard editors like " (name "Emacs") " provide tools for automatic highlighting, indentation, " (abbr "etc.")) (concat (item) (label "structure-constraints") "One is not constraint by any structure during the editing phase."))) (concat "Our approach is to reproduce as much of the above advantages in a structured document environment. Although point " (reference "structure-constraints") " will obviously be hard to meet when following this approach, we believe that the first three advantages might actually become greater in a structured environment. However, this requires a more profound understanding of how users format and edit source code.") "For instance, consider a piece of manually formatted code like" (cpp-code (document "if (cond) hop   = 2;" "else      holala= 3;")) (concat "Clearly, the user had a particular formatting policy when writing this code. However, this policy does not appear in the document: manual intervention will be necessary if the variable " (verbatim "cond") " is renamed " (verbatim "c") ", or if the variable " (verbatim "holala") " is renamed " (verbatim "hola") ".") (concat "At the moment, " (TeXmacs) " provides no tools for dealing with the above example in an automatic way, but a few tools are already provided. For instance, the user is given a great amount of control on how to indent source code and reasonable defaults are provided as a function of the structure. We also provide high level environments for comments and structured highlighting. Further tools will be developed later and we are open for any suggestions from our users.") (subsection "Global presentation") (concat "In the " (menu "Source tags") " group of the " (menu "Document" "Source") " menu, you find several ways to customize the rendering of source trees in your document. We recommend you to play around with the different possibilities in a document of your own (after enabling " (menu "Document" "Source" "Source tree") ") or a standard style package in " (verbatim "$TEXMACS_PATH/packages") ".") (concat "First of all, you may choose between the different major styles angular, scheme, functional and " (LaTeX) "  for rendering source trees, as illustrated in the figure below:") (big-figure (document (quote-env (document (small (tabular* (tformat (twith "table-width" "1par") (twith "table-hmode" "exact") (cwith "2" "2" "1" "1" "cell-hyphen" "t") (cwith "2" "2" "3" "3" "cell-hyphen" "t") (cwith "5" "5" "1" "1" "cell-hyphen" "t") (cwith "5" "5" "3" "3" "cell-hyphen" "t") (table (row (cell (with "font-size" "0.71" "Angular")) (cell "") (cell (with "font-size" "0.71" "Scheme"))) (row (cell (document (with "src-style" "angular" (document (framed-fragment (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body")))))))))))) (cell "") (cell (document (with "src-style" "scheme" (document (framed-fragment (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body"))))))))))))) (row (cell "") (cell "") (cell "")) (row (cell (with "font-size" "0.71" "Functional")) (cell "") (cell (with "font-size" "0.71" (LaTeX)))) (row (cell (document (with "src-style" "functional" (document (framed-fragment (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body")))))))))))) (cell "") (cell (document (with "src-style" "latex" (document (framed-fragment (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body")))))))))))))))))))) (document "Different styles for rendering the same source tree.")) (concat "Secondly, you may wish to reserve a special treatment to certain tags like " (markup "concat") " and " (markup "document") ". In the menu " (menu "Document" "Source" "Special") " you may specify to which extent you want to treat such tags in a special way:") (description (document (concat (item* "None") "No tags receive a special treatment.") (concat (item* "Formatting") "Only the formatting tags " (markup "concat") " and " (markup "document") " are represented as usual.") (concat (item* "Normal") "In addition to the formatting tags, a few other tags like " (markup "compound") ", " (markup "value") " and " (markup "arg") " are represented in a special way.") (concat (item* "Maximal") "At the moment, this option is not yet implemented. The intention is to allow the user to write his own customizations and to allow for special rendering of basic operations like " (markup "plus") "."))) "These different options are illustrated below:" (big-figure (document (quote-env (document (small (tabular* (tformat (twith "table-width" "1par") (twith "table-hmode" "exact") (cwith "2" "2" "1" "1" "cell-hyphen" "t") (cwith "2" "2" "3" "3" "cell-hyphen" "t") (cwith "5" "5" "1" "1" "cell-hyphen" "t") (cwith "5" "5" "3" "3" "cell-hyphen" "t") (table (row (cell (with "font-size" "0.71" "None")) (cell "") (cell (with "font-size" "0.71" "Formatting"))) (row (cell (document (framed-fragment (document (with "src-special" "raw" (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body")))))))))))) (cell "") (cell (document (framed-fragment (document (with "src-special" "format" (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body"))))))))))))) (row (cell "") (cell "") (cell "")) (row (cell (with "font-size" "0.71" "Normal")) (cell "") (cell (with "font-size" "0.71" "Maximal"))) (row (cell (document (framed-fragment (document (with "src-special" "normal" (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body")))))))))))) (cell "") (cell (document (framed-fragment (document (with "src-special" "maximal" (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body"))))))))))))))))))) "") (document "Different ways to render special tags.")) (concat "Another thing which may be controlled by the user is whether the presentation of tags should be compact or stretched out across several lines. Several levels of compactification may be specified in the " (menu "Document" "Source" "Compactification") " menu:") (description (document (concat (item* "Minimal") "The tags are all stretched out across several lines.") (concat (item* "Only inline tags") "All non-inline tags are stretched out across several lines.") (concat (item* "Normal") "All inline arguments at the start of the tag are represented in a compact way. As soon as we encounter a block argument, the remainder of the arguments are stretched out across several lines.") (concat (item* "Inline arguments") "All inline arguments are represented in a compact way and only block tags are stretched out across several lines.") (concat (item* "Maximal") "All source code is represented in a compact way."))) "The normal and inline arguments options rarely differ. The visual effect of the different options is illustrated below:" (big-figure (document (quote-env (document (small (tabular* (tformat (twith "table-width" "1par") (twith "table-hmode" "exact") (cwith "2" "2" "1" "1" "cell-hyphen" "t") (cwith "2" "2" "3" "3" "cell-hyphen" "t") (cwith "5" "5" "1" "1" "cell-hyphen" "t") (cwith "5" "5" "3" "3" "cell-hyphen" "t") (table (row (cell (with "font-size" "0.71" "Minimal")) (cell "") (cell (with "font-size" "0.71" "Only inline tags"))) (row (cell (document (framed-fragment (document (with "src-compact" "none" (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body")))))))))))) (cell "") (cell (document (framed-fragment (document (with "src-compact" "inline" (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body"))))))))))))) (row (cell "") (cell "") (cell "")) (row (cell (with "font-size" "0.71" "Normal")) (cell "") (cell (with "font-size" "0.71" "Maximal"))) (row (cell (document (framed-fragment (document (with "src-compact" "normal" (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body")))))))))))) (cell "") (cell (document (framed-fragment (document (with "src-compact" "all" (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body")))))))))))))))))))) (document "Different levels of compactification.")) "Finally, the user may specify the way closing tags should be rendered when the tag is stretched out across several lines. The rendering may either be minimalistic, compact, long, or recall the matching opening tag. The different options are illustrated below:" (big-figure (document (quote-env (document (small (tabular* (tformat (twith "table-width" "1par") (twith "table-hmode" "exact") (cwith "2" "2" "1" "1" "cell-hyphen" "t") (cwith "2" "2" "3" "3" "cell-hyphen" "t") (cwith "5" "5" "1" "1" "cell-hyphen" "t") (cwith "5" "5" "3" "3" "cell-hyphen" "t") (table (row (cell (with "font-size" "0.71" "Minimal")) (cell "") (cell (with "font-size" "0.71" "Compact"))) (row (cell (document (framed-fragment (document (with "src-close" "minimal" (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body")))))))))))) (cell "") (cell (document (framed-fragment (document (with "src-close" "compact" (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body"))))))))))))) (row (cell "") (cell "") (cell "")) (row (cell (with "font-size" "0.71" "Stretched")) (cell "") (cell (with "font-size" "0.71" "Repeat"))) (row (cell (document (framed-fragment (document (with "src-close" "long" (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body")))))))))))) (cell "") (cell (document (framed-fragment (document (with "src-close" "repeat" (document (inactive* (assign "quick-theorem" (macro "body" (document (surround (concat (no-indent) "Theorem. ") "" (arg "body")))))))))))))))))))) (document "Different ways to render closing tags.")) (subsection "Local customization") (concat "Even though " (TeXmacs) " tries hard to render source code in a nice way following the global rendering options that you specified, the readability of the source code often needs to be further enhanced locally. In source mode, this can be done using the menus " (menu "Source" "Activation") " and " (menu "Source" "Presentation") ". Any local hints on how to render source code are automatically removed from the document when it is being used as a style file or package.") "First of all, for certain pieces of content the user may prefer to see them in their activated form instead as dead source code. This may for instance be the case for embedded images, or for mathematical symbols, like in" (tm-fragment (document (math (inactive* (assign "R" (macro (active* "<bbb-R>"))))))) "Such an active presentation may also be preferred for certain more complex macros:" (tm-fragment (document (math (inactive* (assign "diag" (macro "var" "dim" (active* (matrix (tformat (table (row (cell (concat (inactive* (arg "var")) (rsub "1"))) (cell "") (cell "<b-0>")) (row (cell "") (cell "<ddots>") (cell "")) (row (cell "<b-0>") (cell "") (cell (concat (inactive* (arg "var")) (rsub (inactive* (arg "dim")))))))))))))))) (concat "A piece of code can be activated by selecting it and using " (menu "Source" "Activation" "Activate") " or " (shortcut "(make-mod-active 'active*)") ". Similarly, a piece of content may be deactivated using " (key (concat (rigid "M-") "-")) " (we used this in the second example above for the rendering of the arguments " (src-arg "var") " and " (src-arg "dim") "). Activation and deactivation either apply to the whole tree, or to the root only (" (abbr "e.g.") " " (menu "Source" "Activation" "Activate once") ").") (concat "Another way to customize the rendering is to override some of the global rendering options. This is mainly interesting for controlling more precisely which tags have to be stretched across several lines and which tags have to be represented in a compact fashion. For instance, the " (markup "concat") " tag can be used in order to concatenate content, as well as for specifying a block of sequential statements, or a combination of both. For instance, in the piece of code") (tm-fragment (document (inactive* (assign "my-section" (macro "title" (style-with "src-compact" "none" (concat (header-hook (arg "title")) (toc-hook (arg "title")) (my-section-title (arg "title"))))))))) (concat "we have stretched the " (markup "concat") " tag along several lines using " (menu "Source" "Presentation" "Stretched") " (notice that this implies the " (markup "concat") " tag to appear explicitly, so as to avoid confusion with the " (markup "document") " tag). Similarly, if a part of the concatenation were to be displayed as usual, then one may use " (menu "Source" "Presentation" "Compact") ":") (tm-fragment (document (inactive* (assign "my-section" (macro "title" (style-with "src-compact" "none" (concat (header-hook (arg "title")) (toc-hook (arg "title")) (style-with "src-compact" "all" (concat (with "font-series" "bold" "Section:") " " (arg "title")))))))))) "At present, we did not implement a way to mark arguments as inline or block, but we might do this later." (concat "A final way to customize the rendering of source code is to apply an arbitrary macro using " (menu "Source" "Presentation" "Apply macro") " or " (menu "Source" "Presentation" "Apply macro once") ". This macro will be automatically removed when you use your document as a style file or package.") (section "The style-sheet language") (concat "In the section about " (hlink "writing a simple style package" "../devel/style/design/style-example.en.tm") " we already gave you a first impression about the style-sheet language of " (TeXmacs) ". In this section, we will give a more complete survey of the available features. For more detailed descriptions, we refer to the chapter about the " (hlink (concat (TeXmacs) " primitives") "../devel/format/primitives/primitives.en.tm") ".") (concat "The style-sheet primitives can be obtained from the " (menu "Source") " menu when you are in source mode. In all other modes, the " (menu "Source") " menu becomes visible after enabling the " (menu "Source macros tool") " in the " (menu "Tools") " menu. Alternatively, you may use the " (prefix "A-") " and " (prefix "executable") " keyboard prefixes in source mode and the" (nbsp) (prefix "inactive") " and" (nbsp) (prefix "executable") " prefixes otherwise. Furthermore, we recall that the hybrid " (key "\\") "-key may be used for creating macro-applications or arguments, depending on the context. Finally, the " (shortcut "(structured-insert-right)") " and " (shortcut "(structured-insert-left)") " keys are used for inserting arguments.") (subsection "Assignments") (concat "All user defined " (TeXmacs) " macros and style variables are stored in the current typesetting environment. This environment associates a tree value to each string variable. Variables whose values are macros correspond to new primitives. The others are ordinary environment variables. The primitives for operating on the environment are available from " (menu "Source" "Define") ".") (concat "You may permanently change the value of an environment variable using the " (markup "assign") " primitive, as in the example") (tm-fragment (document (inactive* (assign "hi" (macro "Hi there!"))))) (concat "You may also locally change the values of one or several environment variables using the " (markup "with") " primitive:") (tm-fragment (document (inactive* (with "font-series" "bold" "color" "red" "Bold red text")))) (concat "The value of an environment variable may be retrieved using the " (markup "value") " primitive. This may for instance be used in order to increase a counter:") (tm-fragment (document (inactive* (assign "my-counter" (plus (value "my-counter") "1"))))) (concat "Finally, you may associate logical properties to environment variables using the " (markup "drd-props") " primitive. This is explained in more detail in the section about " (hlink "macro primitives" "../devel/format/primitives/prim-macro.en.tm") ".") (subsection "Macro expansion") (concat "The main interest of the " (TeXmacs) "' style-sheet language is the possibility to define macros. These come in three flavours: ordinary macros, macros which take an arbitrary number of arguments and external macros, whose expansion is computed by " (name "Scheme") " or a plug-in. The macro-related primitives are available from the " (menu "Source" "Macro") " menu. Below, we will only describe the ordinary macros. For more details, we refer to the section about " (hlink "macro primitives" "../devel/format/primitives/prim-macro.en.tm") ".") "Ordinary macros are usually defined using" (tm-fragment (document (inactive* (assign "my-macro" (macro (active* (concat "x" (rsub "1"))) (active* (math "<cdots>")) (active* (concat "x" (rsub "n"))) "body"))))) (concat "After such an assignment, " (markup "my-macro") " becomes a new primitive with " (math "n") " arguments, which may be called using") (tm-fragment (document (inactive (my-macro (active* (concat "y" (rsub "1"))) (active* (math "<cdots>")) (active* (concat "y" (rsub "n"))))))) (concat "Inside the body of the macro, the " (markup "arg") " primitive may be used to retrieve the values of the arguments to the macro.") (tm-fragment (document (inactive* (assign "hello" (macro "name" (concat "Hello " (arg "name") ", you look nice today!")))))) (concat "It is possible to call a macro with less or more arguments than the expected number. Superfluous arguments are simply ignored. Missing arguments take the nullary " (markup "uninit") " primitive as value:") (tm-fragment (document (inactive* (assign "hey" (macro "first" "second" (style-with "src-compact" "none" (if (equal (arg "second") (uninit)) (concat "Hey " (arg "first") ", you look lonely today...") (concat "Hey " (arg "first") " and " (arg "second") ", you form a nice couple!")))))))) "We finally notice that you are allowed to compute with macros, in a similar way as in functional programming, except that our macros are not closures (yet). For instance:" (tm-fragment (document (inactive (assign "my-macro-copy" (inactive (value "my-macro")))))) (concat "The " (markup "compound") " tag may be used to apply macros which are the result of a computation:") (tm-fragment (document (inactive* (assign "overloaded-hi" (macro "name" (style-with "src-compact" "none" (compound (if (nice-weather) (value "happy-hi") (value "sad-hi")) (arg "name")))))))) (subsection "Formatting primitives") "This section contains some important notes on formatting primitives which are not really part of the style-sheet language, but nevertheless very related." (concat "First of all, most " (TeXmacs) " presentation tags can be divided in two main categories: inline tags and block tags. For instance, " (markup "frac") " is a typical inline tag, whereas " (markup "theorem") " is a typical block tag. Some tags, like " (markup "strong") " are inline if their argument is and block in the contrary case. When writing macros, it is important to be aware of the inline or block nature of tags, because block tags inside a horizontal concatenation are not rendered in an adequate way. If you need to surround a block tag with some inline text, then you need the surround primitive:") (tm-fragment (document (inactive* (assign "my-theorem" (macro "body" (surround (concat (no-indent) (with "font-series" "bold" "Theorem. ")) (right-flush) (arg "body"))))))) "In this example, we surrounded the body of the theorem with the bold text Theorem. at the left hand side and a right-flush at the right-hand side. Flushing to the right is important in order to make the blue visual border hints look nice when you are inside the environment." (concat "In most cases, " (TeXmacs) " does a good job in determining which tags are inline and which ones are not. However, you sometimes may wish to force a tag to be a block environment. For instance, the tag " (markup "very-important") " defined by") (tm-fragment (document (inactive* (assign "very-important" (macro "body" (with "font-series" "bold" "color" "red" (arg "body"))))))) (concat "may both be used as an inline tag and a block environment. When placing your cursor just before the " (markup "with") "-tag and hitting " (shortcut "(kbd-return)") " followed by " (key "backspace") ", you obtain") (tm-fragment (document (inactive* (assign "very-important" (macro "body" (document (with "font-series" "bold" "color" "red" (arg "body")))))))) (concat "Since the body of the macro is now a block, your tag " (markup "very-important") " will automatically become a block environment too. In the future, the " (markup "drd-props") " primitive will give you even more control over which tags and arguments are inline and which ones are block.") (concat "Another important property of tags is whether they contain normal textual content or tabular content. For instance, consider the definition of the standard " (markup "eqnarray*") " tag (with a bit of presentation markup suppressed):") (tm-fragment (document (inactive* (assign "eqnarray*" (macro "body" (with "par-mode" "center" "mode" "math" "math-display" "true" "par-sep" "0.45fn" (surround (concat (no-page-break*) (vspace* "0.5fn")) (concat (vspace "0.5fn") (no-indent*)) (tformat (twith "table-hyphen" "y") (twith "table-width" "1par") (twith "table-min-cols" "3") (twith "table-max-cols" "3") (cwith "1" "-1" "1" "1" "cell-hpart" "1") (cwith "1" "-1" "-1" "-1" "cell-hpart" "1") (arg "body"))))))))) (concat "The use of " (markup "surround") " indicates that " (markup "eqnarray*") " is a block environment and the use of " (markup "tformat") " specifies that it is also a tabular environment. Moreover, the " (markup "twith") " and " (markup "cwith") " are used to specify further formatting information: since we are a block environment, we enable hyphenation and let the table span over the whole paragraph (unused space being equally distributed over the first and last columns). Furthermore, we have specified that the table contains exactly three columns.") (concat "Finally, it is important to bear in mind that style-sheets do not merely specify the final presentation of a document, but that they may also contain information for the authoring phase. Above, we have already mentioned the use of the " (markup "right-flush") " tag in order to improve the rendering of  visual border hints. Similarly, visual hints on invisible arguments may be given in the form of flags:") (tm-fragment (document (inactive* (assign "labeled-theorem" (macro "id" "body" (style-with "src-compact" "none" (surround (style-with "src-compact" "none" (concat (no-indent) (flag (concat "Id: " (arg "id")) "blue" "id") (with "font-series" "bold" "Theorem. "))) (right-flush) (arg "body")))))))) (concat "More generally, the " (markup "specific") " tag with first argument screen may be used to display visual hints, which are removed when printing the document.") (subsection "Evaluation control") (concat "The " (menu "Source" "Evaluation") " menu contains several primitives to control the way expressions in the style-sheet language are evaluated. The most frequent use of these primitives is when you want to write a meta-macro like " (markup "new-theorem") " which is used for defining or computing on other macros. For instance:") (tm-fragment (document (inactive* (assign "new-theorem" (macro "name" "text" (quasi (assign (unquote "name") (macro "body" (surround (concat (no-indent) (strong (concat (unquote (arg "text")) ". "))) (right-flush) (arg "body")))))))))) (concat "When calling " (inactive* (new-theorem "theorem" "Theorem")) " in this example, we first evaluate all " (markup "unquote") " instructions inside the " (markup "quasi") " primitive, which yields the expression") (tm-fragment (document (inactive* (assign "theorem" (macro "body" (surround (concat (no-indent) (strong "Theorem. ")) (right-flush) (arg "body"))))))) (concat "Next, this expression is evaluated, thereby defining a macro " (markup "theorem") ".") (concat "It should be noticed that the " (TeXmacs) " conventions for evaluation are slightly different then those from conventional functional languages like " (name "Scheme") ". The subtle differences are motivated by our objective to make it as easy as possible for the user to write macros for typesetting purposes.") (concat "For instance, when " (TeXmacs) " calls a macro " (inactive* (macro (active* (concat "x" (rsub "1"))) (active* (math "<cdots>")) (active* (concat "x" (rsub "n"))) "body")) " with arguments " (verbatim (concat "y" (rsub "1"))) " until " (verbatim (concat "y" (rsub "n"))) ", the argument variables " (src-arg (concat "x" (rsub "1"))) " until " (src-arg (concat "x" (rsub "n"))) " are bound to the unevaluated expressions " (verbatim (concat "y" (rsub "1"))) " until " (verbatim (concat "y" (rsub "n"))) ", and the body is evaluated with these bindings. The evaluation of " (verbatim (concat "y" (rsub "i"))) " takes place each time we request for the argument " (no-break) (src-arg (concat "x" (rsub "i"))) ". In particular, when applying the macro " (inactive* (macro "x" (concat (arg "x") " and again " (arg "x")))) " to an expression " (verbatim "y") ", the expression " (no-break) (verbatim "y") " is evaluated twice.") (concat "In " (name "Scheme") ", the bodies of " (name "Scheme") " macros are evaluated twice, whereas the arguments of functions are evaluated. On the other hand, when retrieving a variable (whether it is an argument or an environment variable), the value is not evaluated. Consequently, a " (TeXmacs) " macro") (tm-fragment (document (inactive* (assign "foo" (macro "x" (blah (arg "x") (arg "x"))))))) (concat "would correspond to a " (name "Scheme") " macro") (scm-code (document "(define-macro (foo x)" "  `(let ((x (lambda () ,x)))" "     (blah (x) (x)))")) (concat "Conversely, the " (name "Scheme") " macro and function") (scm-code (document "(define-macro (foo x) (blah x x))" "(define (fun x) (blah x x))")) (concat "admit the following analogues in " (TeXmacs) ":") (tm-fragment (document (inactive* (document (assign "foo" (macro "x" (eval (blah (quote-arg "x") (quote-arg "x"))))))) (inactive* (document (assign "fun" (macro "x" (with "x*" (arg "x") (blah (quote-value "x*") (quote-value "x*"))))))))) (concat "Here the primitives " (markup "quote-arg") " and " (markup "quote-value") " are used to retrieve the value of an argument " (abbr "resp.") " an environment variable. The " (TeXmacs) " primitives " (markup "eval") ", " (markup "quote") ", " (markup "quasiquote") " and " (markup "unquote") " behave in the same way as their " (name "Scheme") " analogues. The " (markup "quasi") " primitive is a shortcut for quasi-quotation followed by evaluation.") (subsection "Flow control") (concat "Besides sequences of instructions, which can be achieved using the " (markup "concat") " primitive, and the mechanism of macro expansion, the " (TeXmacs) " style-sheet language provides a few other primitive for affecting the control flow: " (markup "if") ", " (markup "case") ", " (markup "while") " and " (markup "for-each") ". These primitives are available from the " (menu "Source" "Flow control") " menu. However, we have to warn the user that the conditional constructs are quite fragile: they only apply to inline content and the accessibility of macro arguments should not to much depend on the conditions.") (concat "The most important primitive " (markup "if") ", which can be entered using " (shortcut "(make 'if)") ", allows for basic conditional typesetting:") (tm-fragment (document (inactive* (assign "appendix" (macro "title" "body" (document (style-with "src-compact" "none" (compound (if (long-document) (value "chapter-appendix") (value "section-appendix")) (arg "title") (arg "body"))))))))) (concat "In this example, " (markup "appendix") " is a block environment consisting of a title and a body, and which is rendered as a chapter for long documents and as a section for short ones. Notice that the following implementation would have been incorrect, since the " (markup "if") " primitive currently only works for inline content:") (tm-fragment (document (inactive* (assign "appendix" (macro "title" "body" (document (style-with "src-compact" "none" (if (long-document) (chapter-appendix (arg "title") (arg "body")) (section-appendix (arg "title") (arg "body")))))))))) (concat "The " (markup "if") " primitive may also be used in order to implement optional arguments:") (tm-fragment (document (inactive* (assign "hey" (macro "first" "second" (style-with "src-compact" "none" (if (equal (arg "second") (uninit)) (concat "Hey " (arg "first") ", you look lonely today...") (concat "Hey " (arg "first") " and " (arg "second") ", you form a nice couple!")))))))) (concat "However, " (TeXmacs) " is not clever enough to detect which arguments are optional and which arguments are accessible (" (abbr "i.e.") " which arguments can be edited by the user). Therefore, you will have to manually give this information using the " (markup "drd-props") " primitive. The " (markup "case") ", " (markup "while") " and " (markup "for-each") " primitives are explained in more detail in the " (hlink "corresponding section" "../devel/format/primitives/prim-control.en.tm") " on the " (hlink (concat (TeXmacs) " primitives") "../devel/format/primitives/primitives.en.tm") ".") (subsection "Computational markup") (concat "In the menus " (menu "Source" "Arithmetic") ", " (menu "Source" "Text") ", " (menu "Source" "Tuple") " and " (menu "Source" "Condition") " you will find different primitives for computing with integers, strings, tuples and boolean values. For instance, in the following code, the " (markup "new-important") " tag defines a new important tag as well as a variant in red:") (tm-fragment (document (inactive* (assign "new-important" (macro "name" (quasi (style-with "src-compact" "none" (concat (style-with "src-compact" "none" (assign (unquote (arg "name")) (macro "x" (with "font-series" "bold" (arg "x"))))) (style-with "src-compact" "none" (assign (unquote (merge (arg "name") "-red")) (macro "x" (with "font-series" "bold" "color" "red" (arg "x"))))))))))))) (concat "Here we use the " (markup "merge") " primitive in order to concatenate two strings. The different computational primitives are described in more detail in the " (hlink "corresponding section" "../devel/format/primitives/prim-functional.en.tm") " on the " (hlink (concat (TeXmacs) " primitives") "../devel/format/primitives/primitives.en.tm") ".") (section (concat "Customizing the standard " (TeXmacs) " styles")) (concat "Whenever the standard " (TeXmacs) " style files are inadequate for a given purpose, it is possible to write your own style files. However, designing your own style files from scratch may be a complex task, so it is usually preferable to customize the existing styles. This requires some understanding of the global architecture of the standard style files and a more precise understanding of the parts you wish to customize. In this section, we will explain the general principles. For more details, we refer to the chapter on the " (hlink (concat "principal " (TeXmacs) " tags") "styles/std-dtds/dtds.en.tm") ".") (subsection "Organization of style files and packages") (concat "Each standard " (TeXmacs) " style file or package is based on a potentially finite number of subpackages. From an abstract point of view, this organization may be represented by a labeled tree. For instance, the tree which corresponds to the " (tmstyle "article") " style is represented below:") (big-figure (tree (tmstyle "article") (tree (tmpackage "std") (stack (tformat (table (row (cell (tmpackage "std-markup"))) (row (cell (tmpackage "std-symbol"))) (row (cell (tmpackage "std-math"))) (row (cell (tmpackage "std-list"))) (row (cell (tmpackage "std-utils"))) (row (cell (tmpackage "std-counter"))) (row (cell (tmpackage "std-automatic"))) (row (cell (tmpackage "list"))) (row (cell (tmpackage "session"))))))) (tree (tmpackage "env") (stack (tformat (table (row (cell (tmpackage "env-base"))) (row (cell (tmpackage "env-math"))) (row (cell (tmpackage "env-theorem"))) (row (cell (tmpackage "env-float"))))))) (tree (tmpackage "title-base") (tmpackage "title-generic")) (tmpackage "header-article") (tree (tmpackage "section-article") (tmpackage "section-base"))) (document (concat "The tree with the packages from which the " (tmstyle "article") " style has been built up. In order to save space, we have regrouped the numerous children of " (tmpackage "std") " and " (tmpackage "env") " in vertical lists."))) (concat "Most of the style packages correspond to a " (abbr "d.t.d.") " (data type definition) which contains the abstract interface of the package, " (abbr "i.e.") " the exported tags. For instance, the package " (tmpackage "std-markup") " corresponds to the " (abbr "d.t.d.") " " (tmdtd "std-markup") ". Sometimes however, several style packages match the same " (abbr "d.t.d.") ". For instance, both " (tmpackage "header-article") " and " (tmpackage "header-book") " match the " (abbr "d.t.d.") " " (tmdtd "header") ", since they merely implement different ways to render the same tags.") (concat "When building your own style files or packages, you may use the " (markup "use-package") " primitive in order to include other packages. For instance, the " (tmstyle "article") " style essentially consists of the line") (tm-fragment (document (inactive* (use-package "std" "env" "title-generic" "header-article" "section-article")))) (concat "More precisely, the " (markup "use-package") " package sequentially includes the style packages corresponding to its arguments. The packages should be in " (verbatim "$TEXMACS_PACKAGE_PATH") ", which contains " (verbatim ".") ", " (verbatim "~/.TeXmacs/packages") " and " (verbatim "$TEXMACS_PATH/packages") " by default. Furthermore rendering information for the source code like " (markup "style-with") " tags are discarded before evaluation of the files.") (remark (document "We strongly recommend the user to take a look at some of the standard style files and packages which can be found in" (verbatim (document "    $TEXMACS_PATH/styles" "    $TEXMACS_PATH/packages")) (concat "When loading using " (shortcut "(interactive load-buffer)") ", these paths are in the standard load path. For instance, if you want to take a look at the " (tmpackage "std-markup") " package, then it suffices to type " (shortcut "(interactive load-buffer)") ", followed by the file name " (verbatim "std-markup.ts") " and " (shortcut "(kbd-return)") "."))) (remark (document (concat "It is also possible to customize the presentation of the source code of the style files and packages themselves, by using other packages in addition to " (tmstyle "source") " or by using another major style file based on " (tmstyle "source") ". In that case, the extra markup provided by such packages may be used for presentation purposes of the source code, but it is not exported when using your package in another file."))) (subsection "General principles for customization") "Style files and packages basically enrich the current typesetting environment with a combination of" (itemize (document (concat (item) "Environment variables.") (concat (item) "Tags for the end-user.") (concat (item) "Customizable macros."))) (concat "Furthermore, they may define some tags for intern implementation purposes, which will not be documented in this manual. They may also specify some logical properties of tags using the " (markup "drd-props") " primitive.") (concat "Environment variables are almost always attributes for controlling the rendering of content, or counters for sections, equations, " (abbr "etc.") ". Although several simple tags for the end-user like " (markup "strong") " may be redefined in your own style files, this practice is not recommended for more complex tags like " (markup "section") ". Indeed, the " (markup "section") " tag involves many things like resetting subcounters, entering the title into the table of contents and so on. Therefore, special additional macros are provided the customization of such tags, like " (markup "section-title") ", " (markup "section-clean") " and " (markup "section-toc") ".") (subsection "Customizing the general layout") (concat "The general layout of a document is mainly modified by setting the appropriate environment variables for " (hlink "page layout" "../devel/format/environment/env-page.en.tm") " and " (hlink "paragraph layout" "../devel/format/environment/env-par.en.tm") ". For instance, by including the following lines in your style file, you can set the page size to " (verbatim "letter") " and the left and right margins to " (verbatim "2in") ":") (tm-fragment (document (inactive* (document (assign "page-type" "letter") (assign "page-odd" "2in") (assign "page-even" "2in") (assign "page-right" "2in"))))) (concat "It should be noticed that the environment variables for page layout are quite different in " (TeXmacs) " and " (TeX) "/" (LaTeX) ". In order to make it easier to adapt " (LaTeX) " style files to " (TeXmacs) ", we have therefore provided the " (tmpackage "std-latex") " package, which emulates the environment variables from " (TeX) "/" (LaTeX) ". Typically, this allows you determine the global layout by lines like") (tm-fragment (document (inactive* (document (assign "tex-odd-side-margin" (macro "20pt")) (assign "tex-even-side-margin" (macro "20pt")) (assign "tex-text-width" (macro "33pc")))))) (concat "We notice that macros which return lengths are considered as " (hlink "lengths" "../devel/format/basics/lengths.en.tm") " themselves. In the case of the " (TeX) "/" (LaTeX) " emulation package, we actually " (em "require") " all lengths to be macros.") (concat "The page headers and footers are usually not determined by global environment variables or macros, since they may change when a new chapter or section is started. Instead, " (TeXmacs) " provides the call-back macros " (markup "header-title") ", " (markup "header-author") ", " (markup "header-primary") " and " (markup "header-secondary") ". These macros are called when the document title or author are specified or when a new primary or secondary section is started (primary sections are typically chapters in books, or sections in articles). For instance, the following redefinition makes the principal section name appear on even pages, together with the current page number and a wide underline.") (tm-fragment (document (inactive* (assign "header-primary" (macro "title" "nr" "type" (assign "page-even-header" (quasiquote (style-with "src-compact" "none" (wide-std-underlined (style-with "src-compact" "none" (concat (page-the-page) (htab "5mm") (unquote (arg "title"))))))))))))) (subsection "Customizing list environments") "Lists are made up of two principal ingredients: the outer list environment and the inner items. List environments may either be customized by customizing or redefining the rendering macros for these environments, or defining additional list environments which match the same abstract interface." (concat "The rendering of the outer list environment is controlled by the " (markup "render-list") " macro which takes the body of the list as its argument. For instance, consider the following redefinition of " (markup "render-list") ":") (tm-fragment (document (inactive* (assign "render-list" (macro "body" (style-with "src-compact" "none" (surround (concat (no-page-break*) (vspace* "0.5fn")) (concat (right-flush) (vspace "0.5fn") (no-indent*)) (with "par-left" (plus (value "par-left") "3fn") "par-right" (plus (value "par-right") "3fn") (arg "body"))))))))) (concat "This redefinition affects the rendering of all list environments (itemize, enumerate, " (abbr "etc.") ") by reducing the right margin with a length of " (verbatim "3fn") ":") (with "render-list" (macro "body" (surround (concat (no-page-break*) (vspace* "0.5fn")) (concat (right-flush) (vspace "0.5fn") (no-indent*)) (with "par-left" (plus (value "par-left") "3fn") "par-right" (plus (value "par-right") "3fn") (arg "body")))) (document (itemize (document (concat (item) "This text, which has been made so long that it does not fit on a single line, is indented on the right hand side by " (verbatim "3fn") ".") (enumerate (document (concat (item) "This text is indented by an additional " (verbatim "3fn") " on the right hand side, since it occurs inside a second list environment."))) (concat (item) "Once again: this text, which has been made so long that it does not fit on a single line, is indented on the right hand side by " (verbatim "3fn") "."))))) (concat "In a similar way, you may customize the rendering of list items by redefining the macros " (markup "aligned-item") " and " (markup "compact-item") ". These macros both take one argument with the text of the item and render it either in a right-aligned way (such that subsequent text is left aligned) or in a left-aligned way (such that subsequent text may not be aligned). For instance, consider the following redefinition of " (markup "aligned-item") ":") (tm-fragment (document (inactive* (assign "aligned-item" (macro "x" (style-with "src-compact" "none" (concat (vspace* "0.5fn") (with "par-first" "-3fn" (yes-indent)) (resize (with "color" "red" (arg "x")) (minus "1r" "2.5fn") "" (plus "1r" "0.5fn") "")))))))) "Then items inside all list environments with compact items will appear in red:" (with "aligned-item" (macro "x" (concat (vspace* "0.5fn") (with "par-first" "-3fn" (yes-indent)) (resize (with "color" "red" (arg "x")) (minus "1r" "2.5fn") "" (plus "1r" "0.5fn") ""))) (document (itemize (document (concat (item) "This list and aligned descriptions have red items.") (description-aligned (document (concat (item* "C1") "First condition.") (concat (item* "C2") "Second condition."))) (concat (item) "The items of compact description lists are rendered using " (markup "compact-item") ".") (description-compact (document (concat (item* "Gnus and gnats") "Nice beasts.") (concat (item* "Micros and softies") "Evil beings."))))))) (remark (document (concat "The macros " (markup "aligned-item") " and " (markup "compact-item") " are required to produce inline content, so that they may be used in order to surround blocks. In particular, several other internal macros (" (markup "aligned-space-item") ", " (markup "long-compact-strong-dot-item") ", " (abbr "etc.") ") are based on " (markup "aligned-item") " and " (markup "compact-item") ", and used for the rendering of the different types of lists (" (markup "itemize-arrow") ", " (markup "description-long") ", " (abbr "etc.") "). In the future, we also plan to extend " (markup "item") " and " (markup "item*") " with a compulsory " (src-arg "body") " argument. When customizing the list environments, it is important to keep that in mind, so as to make your style-sheets upward compatible."))) (concat "The " (tmdtd "std-list") " " (abbr "d.t.d.") " also provides a macro " (markup "new-list") " to define new lists. Its syntax is " (explain-macro "new-list" "name" "item-render" "item-transform") ", where " (src-arg "name") " is the name of the new list environment, " (src-arg "item-render") " an (inline) macro for rendering the item and " (src-arg "item-transform") " an additional transformation which is applied on the item text. For instance, the " (markup "enumerate-roman") " environment is defined by") (tm-fragment (document (inactive* (document (new-list "enumerate-roman" (value "aligned-dot-item") (macro "x" (number (arg "x") "roman"))))))) (subsection "Customizing numbered textual environments") (concat (TeXmacs) " provides three standard types of numbered textual environments: theorem-like environments, remark-like environments and exercise-like environments. The following aspects of these environments can be easily customized:") (itemize (document (concat (item) "Adding new environments.") (concat (item) "Modifying the rendering of the environments.") (concat (item) "Numbering the theorems in a different way."))) (paragraph* "Defining new environments") (concat "First of all, new environments can be added using the meta-macros " (markup "new-theorem") ", " (markup "new-remark") " and " (markup "new-exercise") ". These environments take two arguments: the name of the environment and the name which is used for its rendering. For instance, you may wish to define the environment " (markup "experiment") " by") (tm-fragment (document (inactive* (new-theorem "experiment" "Experiment")))) (concat "When available in the " (TeXmacs) " dictionaries, the text Experiment will be automatically translated when your document is written in a foreign language. In the section about " (hlink "how to define new environments" "styles/std-dtds/env-manage-dtd.en.tm") ", it is also explained how to define other numbered textual environments (besides theorems, remarks and exercises).") (paragraph* "Customization of the rendering") (concat "The principal rendering of the environments can be customized by redefining the " (markup "render-theorem") ", " (markup "render-remark") " and " (markup "render-exercise") " macros. These macros take the " (src-arg "name") " of the environment (like Theorem " (no-break) "1.2) and its " (src-arg "body") " as arguments. For instance, if you want theorems to appear in a slightly indented way, with a slanted body, then you may redefine " (markup "render-theorem") " as follows:") (tm-fragment (document (inactive* (assign "render-theorem" (macro "which" "body" (document (padded-normal "1fn" "1fn" (surround (theorem-name (concat (arg "which") (theorem-sep))) "" (with "font-shape" "slanted" "par-left" (plus (value "par-left") "1.5fn") (arg "body")))))))))) "This redefinition produces the following effect:" (with "render-theorem" (macro "which" "body" (document (padded-normal "1fn" "1fn" (surround (theorem-name (concat (arg "which") (theorem-sep))) "" (with "font-shape" "slanted" "par-left" (plus (value "par-left") "1.5fn") (arg "body")))))) (document (theorem (document "This is a theorem which has been typeset in a slanted font.")))) (concat "By default, the theorems are rendered as remarks with the only difference that their bodies are typeset in an italic font. Hence, redefining the " (markup "render-remark") " macro will also affect the rendering of theorems. The default " (markup "render-proof") " macro is also based on " (markup "render-remark") ".") (concat "Instead of redefining the entire rendering, the user might just wish to customize the way names of theorems are rendered or redefine the separator between the name and the body. As the user may have noticed by examining the above redefinition of " (markup "render-theorem") ", these aspects are controlled by the macros " (markup "theorem-name") " and " (markup "theorem-sep") ". For instance, consider the following redefinitions:") (tm-fragment (document (inactive* (assign "theorem-name" (macro "name" (with "color" "dark red" "font-series" "bold" (arg "name"))))) (inactive* (assign "theorem-sep" (macro ": "))))) "Then theorem-like environments will be rendered as follows:" (with "theorem-name" (macro "name" (with "color" "dark red" "font-series" "bold" (arg "name"))) "theorem-sep" (macro ": ") (document (proposition (document "This proposition is rendered in is a fancy way.")))) (paragraph* "Customization of the numbering") (concat "In the sections about " (hlink "counters and counter groups" "styles/std/std-counter-dtd.en.tm") ", it is explained how to customize the counters of numbered environments for particular purposes. For instance, by redefining " (markup "inc-theorem") ", you may force theorems to reset the counter of corollaries:") (tm-fragment (document (inactive* (style-with "src-compact" "none" (quasi (style-with "src-compact" "none" (assign "inc-theorem" (macro (concat (compound (unquote (value "inc-theorem"))) (reset-corollary)))))))))) (concat "Notice the trick with " (markup "quasi") " and " (markup "unquote") " in order to take into account additional action which might have been undertaken by the previous value of the macro " (markup "inc-theorem") ".") (concat "The following code from " (verbatim "number-long-article.ts") " is used in order to prefix all standard environments with the number of the current section:") (tm-fragment (document (inactive* (assign "section-clean" (macro (concat (reset-subsection) (reset-std-env))))) (inactive* (assign "display-std-env" (macro "nr" (concat (section-prefix) (arg "nr"))))))) (subsection "Customizing sectional tags") (concat "By default, " (TeXmacs) " provides the standard sectional tags from " (LaTeX) " " (markup "part") ", " (markup "chapter") ", " (markup "section") ", " (markup "subsection") ", " (markup "subsubsection") ", " (markup "paragraph") ", " (markup "subparagraph") ", as well as the special tag " (markup "appendix") ". " (TeXmacs) " also implements the unnumbered variants " (markup "part*") ", " (markup "chapter*") ", " (abbr "etc.") " and special section-like tags " (markup "bibliography") ", " (markup "table-of-contents") ", " (markup "the-index") ", " (markup "the-glossary") ", " (markup "list-of-figures") ", " (markup "list-of-tables") ".") (remark (document (concat (label "section-extra-argument-rem") "Currently, the sectional tags take one argument, the section title, but a second argument with the body of the section is planned to be inserted in the future (see the experimental " (tmpackage "structured-section") " package). For this reason (among others), style files should never redefine the main sectional tags, but rather customize special macros which have been provided to this effect."))) (concat "From a global point of view, an important predicate macro is " (markup "sectional-short-style") ". When it evaluates to " (verbatim "true") ", then appendices, tables of contents, " (abbr "etc.") " are considered to be at the same level as sections. In the contrary case, they are at the same level as chapters. Typically, articles use the short sectional style whereas book use the long style.") (concat "The rendering of a sectional tag " (markup (em "x")) " is controlled through the macros " (markup (concat (em "x") "-sep")) ", " (markup (concat (em "x") "-title")) " and " (markup (concat (em "x") "-numbered-title")) ". The " (markup (concat (em "x") "-sep")) " macro prints the separator between the section number and the section title. It defaults to the macro " (markup "sectional-sep") ", which defaults in its turn to a wide space. For instance, after redefining") (tm-fragment (document (inactive* (assign "sectional-sep" (macro " -- "))))) "sectional titles would typically look like" (tm-fragment (document (with "section-nr" "1" "sectional-sep" (macro " -- ") (section-numbered-title "Hairy GNUs")))) (concat "The " (markup (concat (em "x") "-title")) " and " (markup (concat (em "x") "-numbered-title")) " macros respectively specify how to render unnumbered and numbered section titles. Usually, the user only needs to modify " (markup (concat (em "x") "-title")) ", since " (markup (concat (em "x") "-numbered-title")) " is based on " (markup (concat (em "x") "-title")) ". However, if the numbers have to be rendered in a particular way, then it may be necessary to redefine " (markup (concat (em "x") "-numbered-title")) ". For instance, consider the redefinition") (tm-fragment (document (inactive* (assign "subsection-numbered-title" (macro "name" (style-with "src-compact" "none" (sectional-normal (concat (with "font-series" "bold" (concat (the-subsection) ". ")) (arg "name"))))))))) "This has the following effect on the rendering of subsection titles:" (tm-fragment (document (with "section-nr" "2" "subsection-nr" "3" "the-subsection" (macro (concat (value "section-nr") "." (value "subsection-nr"))) "subsection-numbered-title" (macro "name" (sectional-normal (concat (with "font-series" "bold" (concat (the-subsection) ". ")) (arg "name")))) (subsection-numbered-title "Very hairy GNUs")))) (concat "Notice that the " (tmpackage "section-base") " package provides several " (hlink "useful helper macros" "styles/section/section-base-helper.en.tm") " like " (markup "sectional-normal") ".") (remark (document "Sectional titles can either be rendered in a short or in the long fashion. By default, paragraphs and subparagraphs use the short rendering, for which the body starts immediately at the right of the title:" (tm-fragment (document (concat (paragraph-title "My paragraph") "Blah, blah, and more blahs..."))) "All other sectional tags use the long rendering, in which case the section title takes a separate line on its own:" (tm-fragment (document (section-title "My section") "Blah, blah, and more blahs...")) (concat "We do not recommend to modify the standard settings (" (abbr "i.e.") " to render paragraphs in a long way or sections in a short way). If you really want to do so, then we recommend to redefine the corresponding environment variables " (inactive (value "enrich-x-long")) ". This will ensure upward compatibility when sectional tags will take an additional argument (see remark " (reference "section-extra-argument-rem") ")."))) "Besides their rendering, several other aspects of sectional tags can be customized:" (itemize (document (concat (item) "The call-back macro " (markup (concat (em "x") "-clean")) " can be used for cleaning some counters when a new section is started. For instance, in order to prefix all standard environments by the section counter, you may use the following lines:") (tm-fragment (document (inactive* (document (assign "section-clean" (macro (concat (reset-subsection) (reset-std-env)))) (assign "display-std-env" (macro "nr" (concat (section-prefix) (arg "nr")))))))) (concat (item) "The call-back macro " (markup (concat (em "x") "-header")) " should be used in order to modify page headers and footers when a new section is started. Typically, this macro should call " (markup "header-primary") ", or " (markup "header-secondary") ", or do nothing.") (concat (item) "The call-back macro " (markup (concat (em "x") "-toc")) " should be used in order to customize the way new sections appear in the table of contents."))) (subsection "Customizing the treatment of title information") (concat (TeXmacs) " uses the " (markup "doc-data") " tag in order to specify global data for the document. These data are treated in two stages by the " (markup "doc-data") " macro. " (hlink "First" "styles/header/header-title-global.en.tm") ", the document data are separated into several categories, according to whether the data should be rendered as a part of the main title or in footnotes or the abstract. " (hlink "Secondly" "styles/header/header-title-customize.en.tm") ", the data in each category are rendered using suitable macros.") (concat "Each child of the " (markup "doc-data") " is a tag with some specific information about the document. Currently implemented tags are " (markup "doc-title") ", " (markup "doc-subtitle") ", " (markup "doc-author") ", " (markup "doc-date") ", " (markup "doc-running-title") ", " (markup "doc-running-author") ", " (markup "doc-keywords") ", " (markup "doc-msc") " and " (markup "doc-note") ". The " (markup "doc-author") " tag may occur several times. The " (markup "author-data") " tag is used in order to specify structured data for each of the authors of the document. Each child of the " (markup "author-data") " tag is a tag with information about the corresponding author. Currently implemented tags with author information are " (markup "author-name") ", " (markup "author-affiliation") ", " (markup "author-email") ", " (markup "author-homepage") " and " (markup "author-note") ".") (concat "Most of the tags listed above also correspond to macros for rendering the corresponding information as part of the main title. For instance, if the date should appear in bold italic at a distance of at least " (verbatim "1fn") " from the other title fields, then you may redefine " (markup "doc-date") " as") (tm-fragment (document (inactive* (document (assign "doc-date" (macro "body" (style-with "src-compact" "none" (concat (vspace* "1fn") (doc-title-block (with "font-shape" "italic" "font-series" "bold" (arg "body"))) (vspace "1fn"))))))))) (concat "The " (markup "title-block") " macro is used in order to make the text span appropriately over the width of the title. The " (markup "doc-title") " and " (markup "author-name") " are special in the sense that they also render possible references to footnotes. For this reason, you should rather customize the " (markup "doc-render-title") " and " (markup "author-render-name") " macros in order to customize the rendering of the title and the name themselves.") (concat "Notice also that the " (markup "doc-running-title") " and " (markup "author-running-author") " macros do not render anything, but rather call the " (markup "header-title") " and " (markup "header-author") " call-backs for setting the appropriate global page headers and footers. By default, the running title and author are extracted from the usual title and author names.") (concat "In addition to the rendering macros which are present in the document, the main title (including author information, the date, " (abbr "etc.") ") is rendered using the " (markup "doc-make-title") " macro. The author information, as part of the main title, is rendered using " (markup "render-doc-author") " or " (markup "render-doc-authors") ", depending on whether the document has one or more authors. Footnotes to the title or to one of the authors are rendered using " (markup "doc-title-note") " " (abbr "resp.") " " (markup "doc-author-note") ". These footnote macros always expect a " (markup "document") " tag on input, because they may compress it into a horizontal concatenation.") (concat "The first stage of processing the document data is more complex and the reader is invited to take a look at the " (hlink "short descriptions" "styles/header/header-title-global.en.tm") " of the macros which are involved in this process. It is also good to study the definitions of these macros in the " (hlink "package itself" "../../packages/header/title-base.ts") ". In order to indicate the way things work, we finish with an example on how the email address and homepage of an author can be rendered in a footnote instead of the main title:") (tm-fragment (document (inactive* (document (assign "doc-author-main" (macro "data" (document (quasi (document (unquote* (select (quote-arg "data") "author-name")) (unquote* (select (quote-arg "data") "author-affiliation"))))))) (assign "doc-author-data-note" (xmacro "data" (quasi (document (unquote* (select (quote-arg "data") "author-email")) (unquote* (select (quote-arg "data") "author-homepage")) (unquote* (select (quote-arg "data") "author-note" "document" (pat-any))))))))))) (section "Further notes and tips") (subsection "Customizing arbitrary tags") (concat "Imagine that you want to change the rendering of a given tag, like " (markup "lemma") ". As a general rule, " (TeXmacs) " provides a set of well-chosen macros which can be customized by the user so as to obtain the desired effect. For instance, as we have seen " (hlink "above" "../devel/style/customize/customize-theorems.en.tm") ", you should use modify one of the macros " (markup "render-theorem") ", " (markup "theorem-name") " or " (markup "theorem-sep") " in order to customize the rendering of " (markup "lemma") " and all other theorem-like environments.") (concat "However, in some cases, it may not be clear which well-chosen macro to customize. If we just wanted to change the presentation of lemmas and not of any other theorem-like environments, then we clearly cannot modify " (markup "render-theorem") ", " (markup "theorem-name") " or " (markup "theorem-sep") ". In other cases, the user may not want to invest his time in completely understanding the macro hierarchy of " (TeXmacs) ", and find out about the existence of " (markup "render-theorem") ", " (markup "theorem-name") " and " (markup "theorem-sep") ".") "So imagine that you want all lemmas to appear in red. One thing  you can always do is copy the original definition of lemmas in a safe place and redefine the lemma macro on top of the original definition:" (tm-fragment (document (inactive* (document (assign "orig-lemma" (value "lemma")) (assign "lemma" (macro "body" (with "color" "red" (orig-lemma (arg "body"))))))))) "Alternatively, if only the text inside the lemma should be rendered in red, then you may do:" (tm-fragment (document (inactive* (document (assign "orig-lemma" (value "lemma")) (assign "lemma" (macro "body" (orig-lemma (with "color" "red" (arg "body"))))))))) (concat "Of course, you have to be careful that the name " (markup "orig-lemma") " is not already in use.") (concat "Another frequent situation is that you only want to modify the rendering of a tag when it is used inside another one. On the web, the " (em "Cascading Style Sheet") " language (" (acronym "CSS") ") provides a mechanism for doing this. In " (TeXmacs) ", you may simulate this behaviour by redefining macros inside a " (markup "with") ". For instance, imagine that we want the inter-paragraph space inside lists inside theorem-like environments to vanish. Then we may use:") (tm-fragment (document (inactive* (document (assign "orig-render-theorem" (value "render-theorem")) (assign "render-theorem" (macro "name" "body" (with "orig-render-list" (value "render-list") (with "render-list" (macro "x" (orig-render-list (arg "x"))) (style-with "src-compact" "none" (orig-render-theorem (arg "name") (arg "body"))))))))))) (concat "On the one hand side, this mechanism is a bit more complex than " (acronym "CSS") ", where it suffices to respecify the " (src-var "par-par-sep") " attribute of lists inside theorems. On the other hand, it is also more powerful, since the " (markup "render-theorem") " macro applies to all theorem-like environments at once. Furthermore, if the above mechanism is to be used frequently, then real hackers may simplify the notations using further macro magic.") (subsection "Standard utilities") (concat "In the " (hlink (concat "package " (tmpackage "std-utils")) "styles/std/std-utils-dtd.en.tm") ", the user may find several useful additional macros for writing style files. It mainly contains macros for") (itemize (document (concat (item) "Writing block environments which span over the entire paragraph width. Notice that the " (tmpackage "title-base") " package provides some " (hlink "additional macros" "styles/section/section-base-helper.en.tm") " for wide section titles.") (concat (item) "Writing wide block environments which are underlined, overlined or in a frame box.") (concat (item) "Recursive indentation.") (concat (item) "Setting page headers and footers.") (concat (item) "Localization of text."))) (concat "It is good practice to use these standard macros whenever possible when writing style files. Indeed, the low-level " (TeXmacs) " internals may be subject to minor changes. When building upon standard macros with a clear intention, you increase the upward compatibility of your style-sheets.") (chapter (concat "Customizing " (TeXmacs))) (concat "One major feature of " (TeXmacs) " is that it can be highly customized. First of all, the most important aspects of the program can be " (hlink "configured" "config/man-configuration.en.tm") " in " (menu "Edit" "Preferences") ". Most other parts of " (TeXmacs) " can be entirely adapted or reprogrammed using the " (name "Guile") "/" (name "Scheme") " extension language. In the sequel, we give a short overview of how this works in simple cases.") (section (concat "Introduction to the " (name "Guile") " extension language")) (concat "Like " (name "Emacs") ", " (TeXmacs) " comes with a " (name "Lisp") "-like extension language, namely the " (with "font-shape" "small-caps" "Guile Scheme") " dialect from the " (with "font-shape" "small-caps" "GNU") " project. For documentation about " (with "font-shape" "small-caps" "Guile Scheme") ", we refer to ") (verbatim (document "   http://www.gnu.org/software/guile/guile.html")) (concat (scheme) " has the advantage that it may be extended with extern C and C++ types and routines. In our case, we have extended " (scheme) " with routines which you can use to create your own menus and key-combinations, and even to write your own extensions to " (TeXmacs) ".") (concat "If you have downloaded the source files of " (TeXmacs) ", then it may be interesting for you to take a look at the files ") (verbatim (document (concat "   Guile/Glue/build-glue-basic.scm" (next-line) "   Guile/Glue/build-glue-editor.scm" (next-line) "   Guile/Glue/build-glue-server.scm"))) (concat "These three glue files contain the C++ routines, which are visible within " (scheme) ". In what follows, we will discuss some of the most important routines. We plan to write a more complete reference guide later. You may also take a look at the scheme " (verbatim ".scm") " files in the directory " (verbatim "$TEXMACS_PATH/progs") ".") (section "Writing your own initialization files") (concat "When starting up, " (TeXmacs) " executes the file") (verbatim (document "    $TEXMACS_PATH/progs/init-texmacs.scm")) "as well as your personal initialization file" (verbatim (document "    $TEXMACS_HOME_PATH/progs/my-init-texmacs.scm")) (concat "if it exists. By default, the path " (verbatim "$TEXMACS_HOME_PATH") " equals " (verbatim ".TeXmacs") ". Similarly, each time you create a new buffer (either by creating a new file or opening an already existing one), the file") (verbatim (document "    $TEXMACS_PATH/progs/init-buffer.scm")) "is executed, as well as" (verbatim (document "    $TEXMACS_HOME_PATH/progs/my-init-buffer.scm")) "if it exists." (example (document (concat "Suppose you want to add a style package " (verbatim "CustomStyle.ts") " of your own to every new document you create. You can add the following lines to " (verbatim "$TEXMACS_HOME_PATH/progs/my-init-buffer.scm") ":") (scm-code (document "(when (buffer-newly-created? (current-buffer))" "  (set-style-list (append (get-style-list) '(\"CustomStyle\")))" "  (buffer-pretend-saved (current-buffer)))")) (concat "First we check whether the " (scm "current-buffer") " has been newly created in order not to apply the style to existing files when we open them. Then we add the new package (instead of changing it with " (scm "init-style") ") using " (scm "set-style-list") " and finally we call " (scm "buffer-pretend-saved") " to prevent " (TeXmacs) " from thinking the buffer has been modified by the change of style, or it would always prompt asking for confirmation before closing an empty buffer."))) (section "Creating your own dynamic menus") (concat "You may define a menu with name " (scm-arg "name") " either using") (scm-code (document (concat "(menu-bind " (scm-arg "name") " . " (scm-arg "def") ")"))) "or" (scm-code (document (concat "(tm-menu (" (scm-arg "name") ") . " (scm-arg "def") ")"))) (concat "Here " (scm-arg "def") " is a program which represents the entries of the menu. In particular, you may take a look at the files in the directory") (verbatim (document "    $TEXMACS_PATH/progs/menu")) (concat "in order to see how the standard " (TeXmacs) " menus are defined. In the case of " (scm "tm-menu") ", it is possible to specify additional arguments, which makes it possible to dynamically construct more complex menus which depend on parameters.") (concat "More precisely, the program " (verbatim (em "def")) " in " (scm "menu-bind") " or " (scm "tm-menu") " is a list of entries of one of the following forms:") (scm-code (document (concat "(=<gtr> \"pulldown menu name\" " (scm-arg "menu-definition") ")") (concat "(-<gtr> \"pullright menu name\" " (scm-arg "menu-definition") ")") (concat "(\"entry\" " (scm-arg "action") ")") "---" (concat "(if " (scm-arg "condition") " " (scm-arg "menu-definition") ")") "(when condition menu-definition)" (concat "(link " (scm-arg "variable") ")") "(former)")) (concat "The constructors " (scm "=<gtr>") " and " (scm "-<gtr>") " are used to create " (with "font-shape" "italic" "pulldown") " or " (with "font-shape" "italic" "pullright") " menus and " (scm-arg "menu-definition") " should contain a program which creates the submenu. In the main (or system) menu bar all root items are pulldown menus and all submenus of these are pullright. Both pulldown and pullright may be used in toolbars or other widgets.") (concat "The constructor " (scm (concat "(\"entry\" " (scm-arg "action") ")")) " creates an ordinary entry, where " (scm-arg "action") " will be compiled and executed when you click on " (scm "entry") ". Items of a menu may be separated using " (verbatim "---") ". The constructor " (scm "if") " is used for inserting menu items only if a certain " (scm-arg "condition") " is satisfied (for instance, if we are in math mode), whereas " (scm "while") " always inserts the item but deactivates (e.g. greying it out) it " (scm-arg "condition") " is not met.") (concat "If you declared a menu " (scm-arg "name") ", then you may use this menu indirectly using the " (scm "link") " constructor, thus one may link any such indirect submenu to as many menus as desired.") (concat "Finally, new items may be added to any given menu " (with "font-shape" "italic" "a posteriori") " using " (scm "former") ", as in the following example:") (scm-code (document "(tm-menu (tools-menu)" "  (former)" "  ---" "  (\"New item\" (noop)))")) (concat "The main " (TeXmacs) " menus are:") (itemize-dot (document (concat (item) (scm "texmacs-menu") ": contains the root entries of the main menu bar at the top of the window (or desktop under " (name "MacOS") "). It uses " (scm "link") " to display " (scm "file-menu") ", " (scm "edit-menu") ", " (scm "insert-menu") ", " (scm "text-menu") ", " (scm "paragraph-menu") ", " (scm "document-menu") " and " (scm "help-menu") " among others.") (concat (item) (scm "texmacs-main-icons") ": contains the main toolbar, which typically features buttons to open and save files, copy and paste text, etc.") (concat (item) (scm "texmacs-mode-icons") ": contains the icons which depend on the current editing mode, that is: mathematics, text, code, etc.") (concat (item) (scm "texmacs-focus-icons") ": these icons change with the cursor. One should install here any icons that are specific to a particular tag or context.") (concat (item) (scm "texmacs-extra-icons") ": custom icons for user extensions.") (concat (item) (scm "texmacs-popup-menu") ": the menu which pops up when the user right-clicks on a " (TeXmacs) " document. Extending or replacing this menu is useful for instance for plugin writers: you may want to display some extra actions while removing others when the user in inside a session for your plugin."))) (section "Creating your own keyboard shortcuts") "Keymaps are specified using the command" (scm-code (document (concat "(kbd-map . " (scm-arg "keymaps") ")"))) (concat "Optionally, you may specify conditions which must be satisfied for the keymap to be valid using the " (scm ":mode") " option. For instance, the command") (scm-code (document (concat "(kbd-map (:mode in-math?) . " (scm-arg "keymaps") ")"))) (concat "specifies a list of keyboard shortcuts which will only be valid in math-mode. Each item in " (scm-arg "keymaps") " is of one of the following forms:") (scm-code (document (concat "(" (em "key-combination") " " (scm-arg "action_1") " ... " (scm-arg "action_n") ")") (concat "(" (em "key-combination") " " (scm-arg "result") ")") (concat "(" (em "key-combination") " " (scm-arg "result") " " (scm-arg "help-message") ")"))) (concat "In the first case, the " (scm-arg "action_i") " are " (scheme) " commands associated to the string " (scm-arg "key-combination") ". In the second and third case, " (scm-arg "result") " is a string which is to be inserted in the text when the " (scm-arg "key-combination") " has been completed. An optional " (scm-arg "help-message") " may be displayed when the " (scm-arg "key-combination") " is finished.") (section "Other interesting files") "Some other files may also be worth looking at:" (itemize (document (concat (item) (verbatim "$TEXMACS_PATH/fonts/enc") " contains encodings for different " (TeX) " fonts.") (concat (item) (verbatim "$TEXMACS_PATH/fonts/virtual") " contains definitions of virtual characters.") (concat (item) (verbatim "$TEXMACS_PATH/langs/natural/dic") " contains the current dictionaries used by " (TeXmacs) ".") (concat (item) (verbatim "$TEXMACS_PATH/langs/natural/hyphen") " contains hyphenation patterns for various languages.") (concat (item) (verbatim "$TEXMACS_PATH/progs/fonts") " contains " (scheme) " programs for setting up the fonts."))) (chapter (concat "The " (TeXmacs) " plug-in system")) (concat "There are many ways in which " (TeXmacs) " can be customized or extended: users may define their own style files, customize the user interface, or write links with extern programs. The plug-in system provides a universal mechanism to combine one or several such extensions in a single package. Plug-ins are both easy to install by other users and easy to write and maintain.") (section "Installing and using a plug-in") (concat "From the user's point of view, a plug-in " (verbatim (em "myplugin")) " will usually be distributed on some web-site as a binary tarball with the name") (verbatim (document (concat "    " (em "myplugin") "-" (em "version") "-" (em "architecture") ".tar.gz"))) (concat "If you installed " (TeXmacs) " yourself in the directory " (verbatim "$TEXMACS_PATH") ", then you should unpack this tarball in the directory " (verbatim "$TEXMACS_PATH/plugins") ", using") (verbatim (document (concat "    tar -zxvf " (em "myplugin") "-" (em "version") "-" (em "architecture") ".tar.gz"))) (concat "This will create a " (verbatim (em "myplugin")) " subdirectory in " (verbatim "$TEXMACS_PATH/plugins") ". As soon as you restart " (TeXmacs) ", the plug-in should be automatically recognized. Please read the documentation which comes with your plug-in in order to learn using it.") (remark (document (concat "If you did not install " (TeXmacs) " yourself, or if you do not have write access to " (verbatim "$TEXMACS_PATH") ", then you may also unpack the tarball in " (verbatim "$TEXMACS_HOME_PATH/plugins") ". Here we recall that " (verbatim "$TEXMACS_HOME_PATH") " defaults to " (verbatim "$HOME/.TeXmacs") ". When starting " (TeXmacs) ", your plug-in should again be automatically recognized."))) (remark (document (concat "If the plug-in is distributed as a source tarball like " (verbatim (concat (em "myplugin") "-" (em "version") "-src.tar.gz")) ", then you should first compile the source code before relaunching " (TeXmacs) ". Depending on the plug-in (read the instructions), this is usually done using") (verbatim (document (concat "    cd " (em "myplugin") "; make"))) "or" (verbatim (document (concat "    cd " (em "myplugin") "; ./configure; make"))))) (remark (document (concat "In order to upgrade a plug-in, just remove the old version in " (verbatim "$TEXMACS_PATH/plugins") " or " (verbatim "$TEXMACS_HOME_PATH/plugins") " using") (verbatim (document (concat "    rm -rf " (em "myplugin")))) "and reinstall as explained above.")) (section "Writing your own plug-ins") (concat "In order to write a plug-in " (verbatim (em "myplugin")) ", you should start by creating a directory") (verbatim (document (concat "    $TEXMACS_HOME_PATH/plugins/" (em "myplugin")))) (concat "where to put all your files (recall that " (verbatim "$TEXMACS_HOME_PATH") " defaults to " (verbatim "$HOME/.TeXmacs") "). In addition, you may create the following subdirectories (when needed):") (description-dash (document (concat (item* (verbatim "bin")) "For binary files.") (concat (item* (verbatim "doc")) "For documentation (not yet supported).") (concat (item* (verbatim "langs")) "For language related files, such as dictionaries (not yet supported).") (concat (item* (verbatim "lib")) "For libraries.") (concat (item* (verbatim "packages")) "For style packages.") (concat (item* (verbatim "progs")) "For " (scheme) " programs.") (concat (item* (verbatim "src")) "For source files.") (concat (item* (verbatim "styles")) "For style files."))) (concat "As a general rule, files which are present in these subdirectories will be automatically recognized by " (TeXmacs) " at startup. For instance, if you provide a " (verbatim "bin") " subdirectory, then") (verbatim (document (concat "    $TEXMACS_HOME_PATH/plugins/" (em "myplugin") "/bin"))) (concat "will be automatically added to the " (verbatim "PATH") " environment variable at startup. Notice that the subdirectory structure of a plug-in is very similar to the subdirectory structure of " (verbatim "$TEXMACS_PATH") ".") (example (document "The easiest type of plug-in only consists of data files, such as a collection of style files and packages. In order to create such a plug-in, it suffices to create directories" (verbatim (document (concat "    $TEXMACS_HOME_PATH/plugins/" (em "myplugin")) (concat "    $TEXMACS_HOME_PATH/plugins/" (em "myplugin") "/styles") (concat "    $TEXMACS_HOME_PATH/plugins/" (em "myplugin") "/packages"))) (concat "and to put your style files and packages in the last two directories. After restarting " (TeXmacs) ", your style files and packages will automatically appear in the " (menu "Document" "Style") " and " (menu "Document" "Use package") " menus."))) (concat "For more complex plug-ins, such as plug-ins with additional " (scheme) " or " (c++) " code, one usually has to provide a " (scheme) " configuration file") (verbatim (document (concat "    $TEXMACS_HOME_PATH/plugins/" (em "myplugin") "/progs/init-" (em "myplugin") ".scm"))) "This configuration file should contain an instruction of the following form" (scm-code (document (concat "(plugin-configure " (em "myplugin")) (concat "  " (em "configuration-options") ")"))) (concat "Here the " (verbatim (em "configuration-options")) " describe the principal actions which have to be undertaken at startup, including sanity checks for the plug-in. In the next sections, we will describe some simple examples of plug-ins and their configuration. Many other examples can be found in the directories") (verbatim (document "    $TEXMACS_PATH/examples/plugins" "    $TEXMACS_PATH/plugins")) (concat "Some of these are " (hlink "described" "../devel/interface/interface.en.tm") " in more detail in the chapter about writing new interfaces.") (section (concat "Example of a plug-in with " (scheme) " code")) (paragraph* (concat "The " (verbatim "world") " plug-in")) (concat "Consider the " (verbatim "world") " plug-in in the directory") (verbatim (document "    $TEXMACS_PATH/examples/plugins")) (concat "This plug-in shows how to extend " (TeXmacs) " with some additional " (scheme) " code in the file") (verbatim (document (concat "    " (example-plugin-link "world/progs/init-world.scm")))) (concat "In order to test the " (verbatim "world") " plug-in, you should recursively copy the directory") (verbatim (document "    $TEXMACS_PATH/examples/plugins/world")) (concat "to " (verbatim "$TEXMACS_PATH/plugins") " or " (verbatim "$TEXMACS_HOME_PATH/plugins") ". When relaunching " (TeXmacs) ", the plug-in should now be automatically recognized (a " (menu "World") " menu should appear in the menu bar).") (paragraph* "How it works") (concat "The file " (verbatim "init-world.scm") " essentially contains the following code:") (scm-code (document "(plugin-configure world" "  (:require #t))" "" "(when (supports-world?)" "  (display* \"Using world plug-in!\\n\"))")) (concat "The configuration option " (scm ":require") " specifies a condition which needs to be satisfied for the plug-in to be detected by " (TeXmacs) " (later on, this will for instance allow us to check whether certain programs exist on the system). The configuration is aborted if the requirement is not fulfilled.") (concat "Assuming that the configuration succeeds, the " (verbatim "supports-world?") " predicate will evaluate to " (verbatim "#t") ". In our example, the body of the " (scm "when") " statement corresponds to some further initialization code, which just sends a message to the standard output that we are using our plug-in. In general, this kind of initialization code should be very short and rather load a module which takes care of the real initialization. Indeed, keeping the " (verbatim (concat "init-" (em "myplugin") ".scm")) " files simple will reduce the startup time of" (nbsp) (TeXmacs) ".") (section (concat "Example of a plug-in with " (name "C++") " code")) (paragraph* (concat "The " (verbatim "minimal") " plug-in")) (concat "Consider the example of the " (verbatim "minimal") " plug-in in the directory") (verbatim (document "    $TEXMACS_PATH/examples/plugins")) "It consists of the following files:" (verbatim (document (concat "    " (example-plugin-link "minimal/Makefile")) (concat "    " (example-plugin-link "minimal/progs/init-minimal.scm")) (concat "    " (example-plugin-link "minimal/src/minimal.cpp")))) "In order to try the plug-in, you first have to recursively copy the directory" (verbatim (document "    $TEXMACS_PATH/examples/plugins/minimal")) (concat "to " (verbatim "$TEXMACS_PATH/progs") " or " (verbatim "$TEXMACS_HOME_PATH/progs") ". Next, running the " (verbatim "Makefile") " using") (verbatim (document "    make")) (concat "will compile the program " (verbatim "minimal.cpp") " and create a binary") (verbatim (document "    minimal/bin/minimal.bin")) (concat "When relaunching " (TeXmacs) ", the plug-in should now be automatically recognized.") (paragraph* "How it works") (concat "The " (verbatim "minimal") " plug-in demonstrates a minimal interface between " (TeXmacs) " and an extern program; the program " (verbatim "minimal.cpp") " is " (hlink "explained" "../devel/interface/interface-pipes.en.tm") " in more detail in the chapter about writing interfaces. The initialization file " (verbatim "init-minimal.scm") " essentially contains the following code:") (scm-code (document "(plugin-configure minimal" "  (:require (url-exists-in-path? \"minimal.bin\"))" "  (:launch \"minimal.bin\")" "  (:session \"Minimal\"))")) (concat "The " (scm ":require") " option checks whether " (verbatim "minimal.bin") " indeed exists in the path (so this will fail if you forgot to run the " (verbatim "Makefile") "). The " (scm ":launch") " option specifies how to launch the extern program. The " (verbatim ":session") " option indicates that it will be possible to create sessions for the " (verbatim "minimal") " plug-in using " (menu "Insert" "Session" "Minimal") ".") (section "Summary of the configuration options for plug-ins") (concat "As explained before, the " (scheme) " configuration file " (verbatim (concat (em "myplugin") "/progs/init-" (em "myplugin") ".scm")) " of a plug-in with name " (verbatim (em "plugin")) " should contain an instruction of the type") (scm-code (document (concat "(plugin-configure " (em "myplugin")) (concat "  " (em "configuration-options") ")"))) (concat "Here follows a list of the available " (verbatim (em "configuration-options")) ":") (description-dash (document (concat (item* (verbatim (with "font-series" "medium" (concat "(:winpath " (em "package-path") " " (em "inner-bin-path") ")")))) "Specify where to search for the plug-in under windows. The " (verbatim (em "package-path")) " is the usual place where the plug-in is installed. The " (verbatim (em "inner-bin-path")) " is the place where to look for the binary executable corresponding to the plug-in, relative to the " (verbatim (em "package-path")) ".") (concat (item* (verbatim (with "font-series" "medium" (concat "(:winpath " (em "package-path") " " (em "inner-bin-path") ")")))) "Analoguous to " (verbatim ":winpath") ", but under MacOS.") (concat (item* (verbatim (with "font-series" "medium" (concat "(:require " (em "condition") ")")))) "This option specifies a sanity " (verbatim (em "condition")) " which needs to be satisfied by the plug-in. Usually, it is checked that certain binaries or libraries are present on your system. If the condition fails, then " (TeXmacs) " will continue as whether your plug-in did not exist. In that case, further configuration is aborted. The " (verbatim ":require") " option usually occurs first in the list of configuration options.") (concat (item* (verbatim (with "font-series" "medium" (concat "(:versions " (em "version-cmd") ")")))) "This option specifies a " (scheme) " expression " (verbatim (em "version-cmd")) " which evaluates to a list of available versions of the plug-in.") (concat (item* (verbatim (with "font-series" "medium" (concat "(:setup " (em "cmd") ")")))) "This command is only executed when the version of the plug-in changed from one execution of " (TeXmacs) " to another one. This occurs mainly when installing new versions of " (TeXmacs) " or helper applications.") (concat (item* (verbatim (with "font-series" "medium" (concat "(:launch " (em "shell-cmd") ")")))) "This option specifies that the plug-in is able to evaluate expressions over a pipe, using a helper application which is launched using the shell-command " (verbatim (em "shell-cmd")) ".") (concat (item* (verbatim (with "font-series" "medium" (concat "(:link " (em "lib-name") " " (em "export-struct") " " (em "options") ")")))) "This option is similar to " (verbatim ":launch") ", except that the extern application is now linked dynamically. For more information, see the section about " (hlink "dynamic linking" "../devel/interface/interface-dynlibs.en.tm") ".") (concat (item* (verbatim (with "font-series" "medium" (concat "(:session " (em "menu-name") ")")))) "This option indicates that the plug-in supports an evaluator for interactive shell sessions. An item " (verbatim (em "menu-item")) " will be inserted to the " (menu "Insert" "Session") " menu in order to launch such sessions.") (concat (item* (verbatim (with "font-series" "medium" (concat "(:serializer ," (em "fun-name") ")")))) "If the plug-in can be used as an evaluator, then this option specifies the " (scheme) " function " (verbatim (em "fun-name")) " which is used in order to transform " (TeXmacs) " trees to strings.") (concat (item* (verbatim (with "font-series" "medium" (concat "(:commander ," (em "fun-name") ")")))) "This command is similar to the " (verbatim ":serializer") " option except that it is used to transform special commands to strings.") (concat (item* (verbatim (with "font-series" "medium" "(:tab-completion #t)"))) "This command indicates that the plug-in supports tab-completion.") (concat (item* (verbatim (with "font-series" "medium" "(:test-input-done #t)"))) "This command indicates that the plug-in provides a routine for testing whether the input is complete."))) (concat "It should be noticed that the configuration of the plug-in " (verbatim (em "myplugin")) " automatically creates a few predicates:") (description (document (concat (item* (with "font-series" "medium" (verbatim (concat "supports-" (em "myplugin") "?")))) "Test whether the plug-in is fully operational (all requirements are met).") (concat (item* (with "font-series" "medium" (verbatim (concat "in-" (em "myplugin") "?")))) "Test whether " (verbatim (em "myplugin")) " is the current programming language.") (concat (item* (with "font-series" "medium" (verbatim (concat (em "myplugin") "-scripts?")))) "Test whether " (verbatim (em "myplugin")) " is the current scripting language."))) (chapter (concat "The " (TeXmacs) " format")) (section (concat (TeXmacs) " trees")) (concat "All " (TeXmacs) " documents or document fragments can be thought of as " (em "trees") ". For instance, the tree") (equation* (document (tree (text (markup "with")) "mode" "math" (tree (text (markup "concat")) "x+y+" (tree (text (markup "frac")) "1" "2") "+" (tree (text (markup "sqrt")) "y+z"))))) "typically represents the formula" (equation (document (concat (label "tm-tree-ex") "x+y+" (frac "1" "2") "+" (sqrt "y+z")))) (paragraph* (concat "Internal nodes of " (TeXmacs) " trees")) (concat "Each of the internal nodes of a " (TeXmacs) " tree is a string symbol and each of the leafs is an ordinary string. A string symbol is different from a usual string only from the efficiency point of view: " (TeXmacs) " represents each symbol by a unique number, so that it is extremely fast to test weather two symbols are equal.") (paragraph* (concat "Leafs of " (TeXmacs) " trees")) (concat "Currently, all strings are represented using the " (em (concat "universal " (TeXmacs) " encoding")) ". This encoding coincides with the Cork font encoding for all characters except " (verbatim "<less>") " and " (verbatim "<gtr>") ". Character sequences starting with " (verbatim "<less>") " and ending with " (verbatim "<gtr>") " are interpreted as special extension characters. For example, " (verbatim "<less>alpha<gtr>") " stands for the letter " (math "<alpha>") ". The semantics of characters in the universal " (TeXmacs) " encoding does not depend on the context (currently, cyrillic characters are an exception, but this should change soon). In other words, the universal " (TeXmacs) " encoding may be seen as an analogue of Unicode. In the future, we might actually switch to Unicode.") (concat "The string leafs either contain ordinary text or special data. " (TeXmacs) " supports the following atomic data types:") (description (document (concat (item* "Boolean numbers") "Either " (verbatim "true") " or " (verbatim "false") ".") (concat (item* "Integers") "Sequences of digits which may be preceded by a minus sign.") (concat (item* "Floating point numbers") "Specified using the usual scientific notation.") (concat (item* "Lengths") "Floating point numbers followed by a " (hlink "length unit" "../devel/format/basics/lengths.en.tm") ", like " (verbatim "29.7cm") " or " (verbatim "2fn") "."))) (paragraph* "Serialization and preferred syntax for editing") (concat "When storing a document as a file on your harddisk or when copying a document fragment to the clipboard, " (TeXmacs) " trees have to be represented as strings. The conversion without loss of information of abstract " (TeXmacs) " trees into strings is called " (em "serialization") " and the inverse process " (em "parsing") ". " (TeXmacs) " provides three ways to serialize trees, which correspond to the standard " (hlink (concat (TeXmacs) " format") "../devel/format/basics/tm-tm.en.tm") ", the " (hlink "XML format" "../devel/format/basics/tm-tmml.en.tm") " and the " (hlink (concat (scheme) " format") "../devel/format/basics/tm-scm.en.tm") ".") (concat "However, it should be emphasized that the preferred syntax for modifying " (TeXmacs) " documents is the screen display inside the editor. If that seems surprising to you, consider that a syntax is a way to represent information in a form suitable to understanding and modification. The on-screen typeset representation of a document, together with its interactive behaviour, is a particularly concrete syntax. Moreover, in the " (menu "Document" "Source") " menu, you may find different ways to customize the way documents are viewed, such as different levels of informative flags and a " (hlink "source tree mode" "../devel/style/presentation/src-present.en.tm") " for editing style files.") (section (concat (TeXmacs) " documents")) (concat "Whereas " (TeXmacs) " document fragments can be general " (TeXmacs) " trees, " (TeXmacs) " documents are trees of a special form which we will describe now. The root of a " (TeXmacs) " document is necessarily a " (markup "document") " tag. The children of this tag are necessarily of one of the following forms:") (explain (concat (explain-macro "TeXmacs" "version") (explain-synopsis (concat (TeXmacs) " version"))) (document (concat "This mandatory tag specifies the version of " (TeXmacs) " which was used to save the document."))) (explain (concat (explain-macro "project" "ref") (explain-synopsis "part of a project")) (document "An optional project to which the document belongs.")) (explain (document (explain-macro "style" "version") (concat (explain-macro "style" (with "font-shape" "right" (explain-macro "tuple" "style" "pack-1" (math "<cdots>") "pack-n"))) (explain-synopsis "style and packages"))) (document "An optional style and additional packages for the document.")) (explain (concat (explain-macro "body" "content") (explain-synopsis "body of the document")) (document "This mandatory tag specifies the body of your document.")) (explain (concat (label "initial-env") (explain-macro "initial" "table") (explain-synopsis "initial environment")) (document (concat "Optional specification of the initial environment for the document, with information about the page size, margins, " (abbr "etc.") ". The " (src-arg "table") " is of the form " (explain-macro "collection" "binding-1" (math "<cdots>") "binding-n") ". Each " (src-arg (concat "binding-" (no-break) "i")) " is of the form " (explain-macro "associate" "var-i" "val-i") " and associates the initial value " (src-arg "val-i") " to the environment variable " (src-arg "var-i") ". The initial values of environment variables which do not occur in the table are determined by the style file and packages."))) (explain (concat (explain-macro "references" "table") (explain-synopsis "references")) (document "An optional list of all valid references to labels in the document. Even though this information can be automatically recovered by the typesetter, this recovery requires several passes. In order to make the behaviour of the editor more natural when loading files, references are therefore stored along with the document." (concat "The " (src-arg "table") " is of a similar form as above. In this case a tuple is associated to each label. This tuple is either of the form " (explain-macro "tuple" "content" "page-nr") " or " (explain-macro "tuple" "content" "page-nr" "file") ". The " (src-arg "content") " corresponds to the displayed text when referring to the label, " (src-arg "page-nr") " to the corresponding page number, and the optional " (src-arg "file") " to the file where the label was defined (this is only used when the file is part of a project)."))) (explain (concat (explain-macro "auxiliary" "table") (explain-synopsis "auxiliary data attached to the file")) (document (concat "This optional tag specifies all auxiliary data attached to the document. Usually, such auxiliary data can be recomputed automatically from the document, but such recomputations may be expensive and even require tools which are not necessarily installed on your system. The " (src-arg "table") ", which is specified in a similar way as above, associates auxiliary content to a key. Standard keys include " (verbatim "bib") ", " (verbatim "toc") ", " (verbatim "idx") ", " (verbatim "gly") ", " (abbr "etc.")))) (example (document "An article with the simple text hello world! is represented as" (equation* (document (tree (text (markup "document")) (tree (text (markup "TeXmacs")) (text (TeXmacs-version))) (tree (text (markup "style")) "article") (tree (text (markup "body")) (tree (text (markup "document")) "hello world!"))))))) (section "Default serialization") (concat "Documents are generally written to disk using the standard " (TeXmacs) " syntax (which corresponds to the " (verbatim ".tm") " and " (verbatim ".ts") " file extensions). This syntax is designed to be unobtrusive and easy to read, so the content of a document can be easily understood from a plain text editor. For instance, the formula (" (reference "tm-tree-ex") ") is represented by") (quote-env (document (framed-fragment (verbatim "<less>with|mode|math|x+y+<less>frac|1|2<gtr>+<less>sqrt|y+z<gtr><gtr>")))) (concat "On the other hand, " (TeXmacs) " syntax makes style files difficult to read and is not designed to be hand-edited: whitespace has complex semantics and some internal structures are not obviously presented. Do not edit documents (and especially style files) in the " (TeXmacs) " syntax unless you know what you are doing.") (paragraph* "Main serialization principle") (concat "The " (TeXmacs) " format uses the special characters " (verbatim "<less>") ", " (verbatim "|") ", " (verbatim "<gtr>") ", " (verbatim "\\") " and " (verbatim "/") " in order to serialize trees. By default, a tree like") (equation (document (concat (label "gen-tree-tm") (tree "f" (concat "x" (rsub "1")) "<cdots>" (concat "x" (rsub "n")))))) "is serialized as" (tm-fragment (document (verbatim (concat "<less>f|x" (rsub "1") "|...|x" (rsub "n") "<gtr>")))) (concat "If one of the arguments " (math (concat "x" (rsub "1") ",<ldots>,x" (rsub "n"))) " is a multi-paragraph tree (which means in this context that it contains a " (markup "document") " tag or a " (markup "collection") " tag), then an alternative long form is used for the serialization. If " (verbatim "f") " takes only multi-paragraph arguments, then the tree would be serialized as") (tm-fragment (document (document (verbatim (document "<less>\\f<gtr>" (concat "  x" (rsub "1")) "<less>|f<gtr>" "  ..." "<less>|f<gtr>" (concat "  x" (rsub "n")) "<less>/f<gtr>"))))) (concat "In general, arguments which are not multi-paragraph are serialized using the short form. For instance, if " (verbatim "n=5") " and " (verbatim (concat "x" (rsub "3"))) " and " (verbatim (concat "x" (rsub "5"))) " are multi-paragraph, but not " (verbatim (concat "x" (rsub "1") ",")) " " (verbatim (concat "x" (rsub "2"))) " and " (verbatim (concat "x" (rsub "4"))) ", then (" (reference "gen-tree-tm") ") is serialized as") (tm-fragment (document (document (verbatim (document (concat "<less>\\f|x" (rsub "1") "|x" (rsub "2") "<gtr>") (concat "  x" (rsub "3")) (concat "<less>|f|x" (rsub "4") "<gtr>") (concat "  x" (rsub "5")) "<less>/f<gtr>"))))) (concat "The escape sequences " (verbatim "\\<less>") ", " (verbatim "\\|") ", " (verbatim "\\<gtr>") " and " (verbatim "\\\\") " may be used to represent the characters " (verbatim "<less>") ", " (verbatim "|") ", " (verbatim "<gtr>") " and " (verbatim "\\") ". For instance, " (math "<alpha>+<beta>") " is serialized as " (verbatim "\\<less>alpha\\<gtr>+\\<less>beta\\<gtr>") ".") (paragraph* "Formatting and whitespace") (concat "The " (markup "document") " and " (markup "concat") " primitives are serialized in a special way. The " (markup "concat") " primitive is serialized as usual concatenation. For instance, the text an " (em "important") " note is serialized as") (tm-fragment (document (document (verbatim (document "an <less>em|important<gtr> note"))))) (concat "The " (markup "document") " tag is serialized by separating successive paragraphs by double newline characters. For instance, the quotation") (quote-env (document "Ik ben de blauwbilgorgel." "Als ik niet wok of worgel,")) "is serialized as" (tm-fragment (document (document (verbatim (document "<less>\\quote-env<gtr>" "  Ik ben de blauwbilgorgel." "" "  Als ik niet wok of worgel," "<less>/quote-env<gtr>"))))) "Notice that whitespace at the beginning and end of paragraphs is ignored. Inside paragraphs, any amount of whitespace is considered as a single space. Similarly, more than two newline characters are equivalent to two newline characters. For instance, the quotation might have been stored on disk as" (tm-fragment (document (document (verbatim (document "<less>\\quote-env<gtr>" "  Ik ben de           blauwbilgorgel." "" "" "  Als ik niet wok of          worgel," "<less>/quote-env<gtr>"))))) (concat "The space character may be explicitly represented through the escape sequence " (verbatim "\\ ") ". Empty paragraphs are represented using the escape sequence " (verbatim "\\;") ".") (paragraph* "Raw data") (concat "The " (markup "raw-data") " primitive is used inside " (TeXmacs) " for the representation of binary data, like image files included into the document. Such binary data is serialized as") (tm-fragment (document (document (verbatim (document (concat "<less>#" (em "binary-data") "<gtr>")))))) (concat "where the " (verbatim (em "binary-data")) " is a string of hexadecimal numbers which represents a string of bytes.") (section "XML serialization") (concat "For compatability reasons with the XML technology, " (TeXmacs) " also supports the serialization of " (TeXmacs) " documents in the XML format. However, the XML format is generally more verbose and less readable than the default " (TeXmacs) " format. In order to save or load a file in the XML format (using the " (verbatim ".tmml") " extension), you may use " (menu "File" "Export" "XML") " " (abbr "resp.") " " (menu "File" "Import" "XML") ". ") (concat "It should be noticed that " (TeXmacs) " documents do not match a predefined DTD, since the appropriate DTD for a document depends on its style. The XML format therefore merely provides an XML representation for " (TeXmacs) " trees. The syntax has both been designed to be close to the tree structure and use conventional " (acronym "XML") " notations which are well supported by standard tools.") (paragraph* "The encoding for strings") (concat "The leafs of " (TeXmacs) " trees are traslated from the universal " (TeXmacs) " encoding into Unicode. Characters without Unicode equivalents are represented as entities (in the future, we rather plan to create a " (verbatim "tmsym") " tag for representing such characters).") (paragraph* "XML representation of regular tags") (concat "Trees with a single child are simply represented by the corresponding XML tag. In the case when a tree has several children, then each child is enclosed into a " (verbatim "tm-arg") " tag. For instance, " (math (sqrt "x+y")) " is simply represented as") (quote-env (document (framed-fragment (verbatim "<less>sqrt<gtr>y+z<less>/sqrt<gtr>")))) (concat "whereas the fraction " (math (frac "1" "2")) " is represented as") (quote-env (document (framed-fragment (document (with "par-par-sep" "0fn" (document (verbatim (document "<less>frac<gtr>" "  <less>tm-arg<gtr>1<less>/tm-arg<gtr>" "  <less>tm-arg<gtr>2<less>/tm-arg<gtr>" "<less>/frac<gtr>")))))))) (concat "In the above example, the whitespace is ignored. Whitespace may be preserved by setting the standard " (verbatim "xml:space") " attribute to " (verbatim "preserve") ".") (paragraph* "Special tags") (concat "Some tags are represented in a special way in XML. The " (markup "concat") " tag is simply represented by a textual concatenation. For instance, " (math (concat (frac "1" "2") "+" (sqrt "x+y"))) " is represented as") (quote-env (document (framed-fragment (verbatim (document "<less>frac<gtr><less>tm-arg<gtr>1<less>/tm-arg<gtr><less>tm-arg<gtr>2<less>/tm-arg<gtr><less>/frac<gtr>+<less>sqrt<gtr>y+z<less>/sqrt<gtr>"))))) (concat "The " (markup "document") " tag is not explicitly exported. Instead, each paragraph argument is enclosed within a " (verbatim "tm-par") " tag. For instance, the quotation") (quote-env (document "Ik ben de blauwbilgorgel." "Als ik niet wok of worgel,")) "is represented as" (tm-fragment (document (document (verbatim (document "<less>quote-env<gtr>" "  <less>tm-par<gtr>" "    Ik ben de blauwbilgorgel." "  <less>/tm-par<gtr>" "  <less>tm-par<gtr>" "    Als ik niet wok of worgel," "  <less>/tm-par<gtr>" "<less>/quote-env<gtr>"))))) (concat "A " (markup "with") " tag with only string attributes and values is represented using the standard XML attribute notation. For instance, some " (with "color" "blue" "blue") " text would be represented as") (quote-env (document (framed-fragment (verbatim (document "some <less>with color=\"blue\"<gtr>blue<less>/with<gtr> text"))))) (concat "Conversily, " (TeXmacs) " provides the " (markup "attr") " primitive in order to represent attributes of XML tags. For instance, the XML fragment") (quote-env (document (framed-fragment (verbatim (document "some <less>mytag beast=\"heary\"<gtr>special<less>/mytag<gtr> text"))))) (concat "would be imported as " (inactive* (concat "some " (my-tag (attr "beast" "heary") "special") " text")) ". This will make it possible, in principle, to use " (TeXmacs) " as an editor of general XML files.") (section (concat (scheme) " serialization")) (concat "Users may write their own extensions to " (TeXmacs) " in the " (scheme) " extension language. In that context, " (TeXmacs) " trees are usually represented by " (scheme) " expressions. The " (scheme) " syntax was designed to be predictable, easy to hand-edit, and expose the complete internal structure of the document. For instance, the formula (" (reference "tm-tree-ex") ") is represented by") (tm-fragment (document (verbatim "(with \"mode\" \"math\" (concat \"x+y+\" (frac \"1\" \"2\") \"+\" (sqrt \"y+z\")))"))) (concat "The " (scheme) " representation may also be useful in order to represent complex macros with a lot of programmic content. Finally, " (scheme) " is the safest format when incorporating " (TeXmacs) " snippets into emails. Indeed, both the standard " (TeXmacs) " format and the XML serialization may be quite sensitive to white-space.") (concat "In order to save or load a document in " (scheme) " format, you may use " (menu "File" "Export" "Scheme") " " (abbr "resp.") " " (menu "File" "Import" "Scheme") ". Files saved in " (scheme) " format can easily be processed by external " (scheme) " programs, in the same way as files saved in XML format can easily be processed by tools for processing XML, like XSLT.") (concat "In order to copy a document fragment to an email in " (scheme) " format, you may use " (menu "Edit" "Copy to" "Scheme") ". Similarly, you may paste external " (scheme) " fragments into " (TeXmacs) " using " (menu "Edit" "Paste from" "Scheme") ". The " (scheme) " format may also used interactively inside " (scheme) " sessions or interactive commands. For instance, typing " (shortcut "(interactive exec-interactive-command)") " followed by the interactive command") (scm-code (document "(insert '(frac \"1\" \"2\"))")) (concat "inserts the fraction " (frac "1" "2") " at the current cursor position.") (section "The typesetting process") (concat "In order to understand the " (TeXmacs) " document format well, it is useful to have a basic understanding about how documents are typeset by the editor. The typesetter mainly rewrites logical " (TeXmacs) " trees into physical " (em "boxes") ", which can be displayed on the screen or on paper (notice that boxes actually contain more information than is necessary for their rendering, such as information about how to position the cursor inside the box or how to make selections).") (concat "The global typesetting process can be subdivided into two major parts (which are currently done at the same stage, but this may change in the future): evaluation of the " (TeXmacs) " tree using the stylesheet language, and the actual typesetting.") (concat "The " (hlink "typesetting primitives" "../devel/format/regular/regular.en.tm") " are designed to be very fast and they are built-in into the editor. For instance, one has typesetting primitives for horizontal concatenations (" (markup "concat") "), page breaks (" (markup "page-break") "), mathematical fractions (" (markup "frac") "), hyperlinks (" (markup "hlink") "), and so on. The precise rendering of many of the typesetting primitives may be customized through the " (hlink "built-in environment variables" "../devel/format/environment/environment.en.tm") ". For instance, the environment variable " (src-var "color") " specifies the current color of objects, " (src-var "par-left") " the current left margin of paragraphs, " (abbr "etc.")) (concat "The " (hlink "stylesheet language" "../devel/format/stylesheet/stylesheet.en.tm") " allows the user to write new primitives (macros) on top of the built-in primitives. It contains primitives for definining macros, conditional statements, computations, delayed execution, " (abbr "etc.") " The stylesheet language also provides a special " (markup "extern") " tag which offers you the full power of the " (scheme) " extension language in order to write macros.") "It should be noticed that user-defined macros have two aspects. On the one hand they usually perform simple rewritings. For instance, the macro" (tm-fragment (document (inactive* (assign "seq" (macro "var" "from" "to" (active* (math (concat (inactive* (arg "var")) (rsub (inactive* (arg "from"))) ",<ldots>," (inactive* (arg "var")) (rsub (inactive* (arg "to"))))))))))) (concat "is a shortcut in order to produce sequences like " (math (concat "a" (rsub "1") ",<ldots>,a" (rsub "n"))) ". When macros perform simple rewritings like in this example, the children " (src-arg "var") ", " (src-arg "from") " and " (src-arg "to") " of the " (markup "seq") " tag remain " (em "accessible") " from within the editor. In other words, you can position the cursor inside them and modify them. User defined macros also have a synthetic or computational aspect. For instance, the dots of a " (markup "seq") " tag as above cannot be edited by the user. Similarly, the macro") (tm-fragment (document (inactive* (assign "square" (macro "x" (times (arg "x") (arg "x"))))))) "serves an exclusively computational purpose. As a general rule, synthetic macros are sometimes easier to write, but the more accessability is preserved, the more natural it becomes for the user to edit the markup." (concat "It should be noticed that " (TeXmacs) " also produces some auxiliary data as a byproduct of the typesetting product. For instance, the correct values of references and page numbers, as well as tables of contents, indexes, " (abbr "etc.") " are determined during the typesetting stage and memorized at a special place. Even though auxiliary data may be determined automatically from the document, it may be expensive to do so (one typically has to retypeset the document). When the auxiliary data are computed by an external plug-in, then it may even be impossible to perform the recomputations on certain systems. For these reasons, auxiliary data are carefully memorized and stored on disk when you save your work.") (section "Data relation descriptions") (paragraph* (concat "The rationale behind " (abbr "D.R.D.") "s")) (concat "One major advantage of " (TeXmacs) " is that the editor uses general trees as its data format. Like for " (no-break) "XML, this choice has the advantages of being simple to understand and making documents easy to manipulate by generic tools. However, when using the editor for a particular purpose, the data format usually needs to be restricted to a subset of the set of all possible trees.") (concat "In XML, one uses Data Type Definitions (" (abbr "D.T.D.") "s) in order to formally specify a subset of the generic XML format. Such a " (abbr "D.T.D.") " specifies when a given document is valid for a particular purpose. For instance, one has " (abbr "D.T.D.") "s for documents on the web (XHTML), for mathematics " (no-break) "(MathML), for two-dimensional graphics (SVG) and so on. Moreover, up to a cetain extent, XML provides mechanisms for combining such " (abbr "D.T.D.") "s. Finally, a precise description of a " (abbr "D.T.D.") " usually also provides some kind of reference manual for documents of a certain type.") (concat "In " (TeXmacs) ", we have started to go one step further than " (abbr "D.T.D.") "s: besides being able to decide whether a given document is valid or not, it is also very useful to formally describe certain properties of the document. For instance, in an interactive editor, the numerator of a fraction may typically be edited by the user (we say that it is " (em "accessible") "), whereas the URL of a hyperlink is only editable on request. Similarly, certain primitives like " (markup "itemize") " correspond to block content, whereas other primitives like " (markup "sqrt") " correspond to inline content. Finally, certain groups of primitives, like " (markup "chapter") ", " (markup "section") ", " (markup "subsection") ", " (abbr "etc.") " behave similarly under certain operations, like conversions.") (concat "A Data Relation Description (" (abbr "D.R.D.") ") consists of a Data Type Definition, together with additional logical properties of tags or document fragments. These logical properties are stated using so called " (em "Horn clauses") ", which are also used in logical programming languages such as Prolog. Contrary to logical programming languages, it should nevertheless be relatively straightforward to determine the properties of tags or document fragments, so that certain database techniques can be used for efficient implementations. At the moment, we only started to implement this technology (and we are still using lots of C++ hacks instead of what has been said above), so a more complete formal description of " (abbr "D.R.D.") "s will only be given at a later stage.") (concat "One major advantage of the use of " (abbr "D.R.D.") "s is that it is not necessary to establish rigid hierarchies of object classes like in object oriented programming. This is particularly useful in our context, since properties like accessability, inline-ness, " (abbr "etc.") " are quite independent one from another. In fact, where " (abbr "D.T.D.") "s may be good enough for the description of passive documents, more fine-grained properties are often usefull when manipulating documents in a more interactive way.") (paragraph* (concat "Current " (abbr "D.R.D.") " properties and applications")) (concat "Currently, the " (abbr "D.R.D.") " of a document contains the following information:") (itemize (document (concat (item) "The possible arities of a tag.") (concat (item) "The accessability of a tag and its children."))) "In the near future, the following properties will be added:" (itemize (document (concat (item) "Inline-ness of a tag and its children.") (concat (item) "Tabular-ness of a tag and its children.") (concat (item) "Purpose of a tag and its children."))) "The above information is used (among others) for the following applications:" (itemize (document (concat (item) "Natural default behaviour when creating/deleting tags or children (automatic insertion of missing arguments and removal of tags with too little children).") (concat (item) "Only traverse accessible nodes during searches, spell-checking, " (abbr "etc.")) (concat (item) "Automatic insertion of " (markup "document") " or " (markup "table") " tags when creating block or tabular environments.") (concat (item) "Syntactic highlighting in source mode as a function of the purpose of tags and arguments."))) (paragraph* (concat "Determination of the " (abbr "D.R.D.") " of a document")) (concat (TeXmacs) " associate a unique " (abbr "D.R.D.") " to each document. This " (abbr "D.R.D.") " is determined in two stages. First of all, " (TeXmacs) " tries to heuristically determine " (abbr "D.R.D.") " properties of user-defined tags, or tags which are defined in style files. For instance, when the user defines a tag like") (tm-fragment (document (inactive* (assign "hi" (macro "name" (concat "Hello " (arg "name") "!")))))) (concat (TeXmacs) " automatically notices that " (markup "hi") " is a macro with one element, so it considers " (math "1") " to be the only possible arity of the " (markup "hi") " tag. Notice that the heuristic determination of the " (abbr "D.R.D.") " is done interactively: when defining a macro inside your document, its properties will automatically be put into the " (abbr "D.R.D.") " (assuming that you give " (TeXmacs) " a small amount of free time of the order of a second; this minor delay is used to avoid compromising the reactivity of the editor).") (concat "Sometimes the heuristically defined properties are inadequate. For this case, " (TeXmacs) " provides the " (markup "drd-props") " tag in order to " (hlink "manually override" "../devel/format/stylesheet/prim-macro.en.tm") " the default properties.") (section (concat (TeXmacs) " lengths")) (concat "A simple " (TeXmacs) " length is a number followed by a length unit, like " (verbatim "1cm") " or " (verbatim "1.5mm") ". " (TeXmacs) " supports three main types of units:") (description (document (concat (item* "Absolute units") "The length of an absolute unit like " (verbatim "cm") " or " (verbatim "pt") " on print is fixed.") (concat (item* "Context dependent units") "Context-dependent length units depend on the current font or other environment variables. For instance, " (verbatim "1ex") " corresponds to the height of the x character in the current font and " (verbatim "1par") " correspond to the current paragraph width.") (concat (item* "User defined units") "Any nullary macro, whose name contains only lower case roman letters followed by " (verbatim "-length") ", and which returns a length, can be used as a unit itself. For instance, the following macro defines the " (verbatim "dm") " length:") (tm-fragment (document (inactive* (assign "dm-length" (macro "10cm"))))))) (concat "Furthermore, length units can be " (em "stretchable") ". A stretchable length is represented by a triple of rigid lengths: a minimal length, a default length and a maximal length. When justifying lines or pages, stretchable lengths are automatically sized so as to produce nicely looking layout.") (concat "In the case of page breaking, the " (src-var "page-flexibility") " environment provides additional control over the stretchability of white space. When setting the " (src-var "page-flexibility") " to " (math "1") ", stretchable spaces behave as usual. When setting the " (src-var "page-flexibility") " to " (math "0") ", stretchable spaces become rigid. For other values, the behaviour is linear.") (paragraph* "Absolute length units") (description (document (concat (item* (code* "cm")) "One centimeter.") (concat (item* (code* "mm")) "One millimeter.") (concat (item* (code* "in")) "One inch.") (concat (item* (code* "pt")) "The standard typographic point corresponds to " (math "1/72.27") " of an inch.") (concat (item* (verbatim "bp")) "A big point corresponds to " (math "1/72") " of an inch.") (concat (item* (verbatim "dd")) "The Didôt point equals 1/72 of a French inch, " (abbr "i.e.") " " (verbatim "0.376mm") ".") (concat (item* (verbatim "pc")) "One pica equals 12 points.") (concat (item* (verbatim "cc")) "One cicero equals 12 Didôt points."))) (paragraph* "Rigid font-dependent length units") (description (document (concat (item* (verbatim "fs")) "The font size. When using a " (verbatim "12pt") " font, " (verbatim "1fs") " corresponds to " (verbatim "12pt") ".") (concat (item* (verbatim "fbs")) "The base font size. Typically, when selecting " (verbatim "10") " as the font size for your document and when typing large text, the base font size is " (verbatim "10pt") " and the font size " (verbatim "12pt") ".") (concat (item* (code* "ln")) "The width of a nicely looking fraction bar for the current font.") (concat (item* (code* "sep")) "A typical separation between text and graphics for the current font, so as to keep the text readable. For instance, the numerator in a fraction is shifted up by " (verbatim "1sep") ".") (concat (item* (verbatim "yfrac")) "The height of the fraction bar for the current font (approximately " (verbatim "0.5ex") ").") (concat (item* (verbatim "ex")) "The height of the x character in the current font.") (concat (item* (verbatim "emunit")) "The width of the M character in the current font."))) (paragraph* "Stretchable font-dependent length units") (description (document (concat (item* (code* "fn")) "This is a stretchable variant of " (verbatim "1quad") ". The default length of " (verbatim "1fn") " is " (verbatim "1quad") ". When stretched, " (verbatim "1fn") " may be reduced to " (verbatim "0.5fn") " and extended to " (verbatim "1.5fn") ".") (concat (item* (verbatim "fns")) "This length defaults to zero, but it may be stretched up till " (verbatim "1fn") ".") (concat (item* (verbatim "bls")) "The base line skip is the sum of " (verbatim "1quad") " and " (src-var "par-sep") ". It corresponds to the distance between successive lines of normal text.") (concat "Typically, the baselines of successive lines are separated by a distance of " (verbatim "1fn") " (in " (TeXmacs) " and " (LaTeX) " a slightly larger space is used though so as to allow for subscripts and superscripts and avoid a too densely looking text. When stretched, " (verbatim "1fn") " may be reduced to " (verbatim "0.5fn") " and extended to " (verbatim "1.5fn") ".") (concat (item* (code* "spc")) "The (stretchable) width of space character in the current font.") (concat (item* (verbatim "xspc")) "The additional (stretchable) width of a space character after a period."))) (concat (paragraph* "Box lengths") (label "box-lengths")) (concat "Box length units can only be used within some special markup elements, such as " (markup "move") ", " (markup "shift") ", " (markup "resize") ", " (markup "clipped") " and " (markup "image") ". The principal body of this content (" (abbr "e.g.") " the content being moved in the case of " (markup "move") ") is typeset as a box. The following lengths units then correspond to the size and the extents of the box.") (description (document (concat (item* (code* "w")) "The width of the box.") (concat (item* (verbatim "h")) "The height of the box.") (concat (item* (code* "l")) "The logical left " (math "x") "-coordinate of the box.") (concat (item* (code* "r")) "The logical right " (math "x") "-coordinate of the box.") (concat (item* (code* "b")) "The logical bottom " (math "y") "-coordinate of the box.") (concat (item* (code* "t")) "The logical top " (math "y") "-coordinate of the box."))) "For instance, the code" (tm-fragment (document (inactive* (move "Hello there" "" (plus "-0.5b" "-0.5t"))))) (concat "can be used to center " (move "Hello there" "" (plus "-0.5b" "-0.5t")) " at the base-line.") (paragraph* "Other length units") (description (document (concat (item* (code* "par")) "The width of the paragraph. That is the length the text can span. It is affected by paper size, margins, number of columns, column separation, cell width (if in a table), " (abbr "etc.")) (concat (item* (verbatim "pag")) "The height of the main text in a page. In a similar way as " (verbatim "par") ", this length unit is affected by page size, margins, " (abbr "etc.")) (concat (item* (code* "px")) "One screen pixel, the meaning of this unit is affected by the shrinking factor.") (concat (item* (code* "tmpt")) "The smallest length unit for internal length calculations by " (TeXmacs) ". " (verbatim "1px") " divided by the shrinking factor corresponds to " (verbatim "256tmpt") "."))) (paragraph* "Different ways to specify lengths") (concat "There are three types of lengths in " (TeXmacs) ":") (description (document (concat (item* "Simple lengths") "A string consisting of a number followed by a length unit.") (concat (item* "Abstract lengths") "An abstract length is a macro which evaluates to a length. Such lengths have the advantage that they may depend on the context.") (concat (item* "Normalized lengths") "All lengths are ultimately converted into a normalized length, which is a tag of the form " (explain-macro "tmlen" "l") " (for rigid lengths) or " (explain-macro "tmlen" "min" "def" "max") " (for stretchable lengths). The user may also use this tag in order to specify stretchable lengths. For instance, " (inactive* (tmlen (minus "1quad" "1pt") "1quad" "1.5quad")) " evaluates to a length which is " (verbatim "1quad") " by default, at least " (verbatim "1quad-1pt") " and at most " (verbatim "1.5quad") "."))) (chapter "Built-in environment variables") (concat "The way " (TeXmacs) " " (hlink "typesets" "../devel/format/basics/typesetting.en.tm") " documents is influenced by so called " (em "environment variables") ". The " (hlink "style-sheet language" "../devel/format/stylesheet/stylesheet.en.tm") " uses a so called " (em "environment") " (or context) to store both environment variables and " (hlink "macros" "../devel/format/stylesheet/prim-macro.en.tm") ". The environment variables are subdivided into two catagories: built-in variables and additional variables provided by style files. Built-in variables usually affect the layout, while additional variables mostly serve computational purposes. In the next sections of this chapter, we will describe all built-in environment variables.") (concat "A typical built-in environment variable is " (src-var "color") ". The value of an environment variable may be " (hlink "changed" "../devel/format/stylesheet/prim-env.en.tm") " permanently using " (markup "assign") " and temporarily using the " (markup "with") " primitive:") (tm-fragment (document (concat "Some " (with "color" "dark red" "colored") " text."))) (tm-fragment (document (inactive* (concat "Some " (with "color" "dark red" "colored") " text.")))) "Counters are typical environment variables defined in style-sheets." (tm-fragment (document (enumerate (document (concat (item) "A weirdly") (concat (assign "item-nr" "3") (item) "numbered list..."))))) (tm-fragment (document (inactive* (enumerate (document (concat (item) "A weirdly") (concat (assign "item-nr" "3") (item) "numbered list...")))))) (concat "The typesetting language uses " (def-index "dynamic scoping") " of variables. That means that macros can access and modify variables in their calling context. In the previous example, the " (markup "enumerate") " macro locally initializes " (src-var "item-nr") " to " (math "0") " (uses " (markup "with") ") and the " (markup "item") " macro increments it by one and shows its value. Since " (markup "enumerate") " locally redefines " (src-var "item-nr") ", the original value of " (src-var "item-nr") " is restored on exit.") (concat "Each document comes with an " (hlink "initial environment" "../devel/format/basics/tm-docs.en.tm#init-env") " with the initial values of environment values, " (abbr "i.e.") " their values just before we typeset the document. If an environment variable does not occur in the initial environment, then its initial value defaults to its value after typesetting the document style and possible additional packages. The initial environment before typesetting the style files and packages is built-in into the editor.") "Some variables, like header and footer variables, must be set inside the document, their initial environment value is ignored. Generally, they should be set by header and sectioning markup." (section "General environment variables") (explain (document (concat (var-val "mode" "text") (explain-synopsis "major mode"))) (document (concat "This very important environment variable determines the " (em "current mode") ". There are four possible values: " (verbatim "text") " (text mode), " (verbatim "math") " (mathematical mode), " (verbatim "prog") " (programming mode) and " (verbatim "src") " (source mode). The behaviour of the editor (menus, keystrokes, typesetting, " (abbr "etc.") ") depends heavily on the mode. For example, the following code may be used in order to include a mathematical formula inside text:") (tm-fragment (document (concat "The formula " (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))) " is well known."))) (tm-fragment (document (inactive* (concat "The formula " (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))) " is well known.")))) (concat "Some other environment variables (mainly the language and the font) also depend on the current mode (in this context, the source mode always behaves in a similar way as the text mode). During copy" (space "0.2spc") "&" (space "0.2spc") "paste and search" (space "0.2spc") "&" (space "0.2spc") "replace operations, " (TeXmacs) " tries to preserve the mode."))) (explain (document (var-val "language" "english") (var-val "math-language" "texmath") (concat (var-val "prog-language" "scheme") (explain-synopsis "language"))) (document (concat "A second major environment variable is the " (em "current language") ". In fact, there are three such environment variables: one for each mode. The language in which content is written is responsible for associating a precise semantics to the content. This semantics is used for different purposes:") (itemize (document (concat (item) "The language may specify rules for typesetting content. For instance, the text language specifies punctuation and hyphenation rules. Similarly the mathematical language containns spacing information for mathematical operators.") (concat (item) "Several editing operations depend on the current language: when performing a search or replace operation, " (TeXmacs) " is both mode and language sensitive. Similarly, the text language determines the dictionary to use when spell-checking the document.") (concat (item) "The language controls (among other parameters like the mode and the document format) the way content is being converted from one context to another.") "Currently, no real language-dependent conversions have been implemented yet. But in the future one may imagine that copying a piece of English text to a document written in French will perform an automatic translation. Similarly, a mathematical document might be converted from infix to postfix notation." (concat (item) "The programming language determines the current scripting language in use. Other scripting languages than " (scheme) " are currently only used for interactive sessions, but primitives like " (markup "extern") " might become language-sensitive in the future."))) "At the moment, the current language is mainly used as a hint for indicating the semantics of text: it is not required that a text written in English contains no spelling errors, or that a formula written in a mathematical language is mathematically or even syntactically correct. Nevertheless, the editor is intended to enforce correctness more and more, especially for mathematics." (concat "The language may be specified globally for the whole document in " (menu "Document" "Language") " and locally for a piece of text in " (menu "Format" "Language") "."))) (explain (document (concat (var-val "prog-session" "default") (explain-synopsis "name of programming session"))) (document (concat "This environment variables is used in addition to the " (src-var "prog-language") " variable in order to determine a concrete implementation as well as a particular instance of the current programming language. For instance, in case of the " (hlink (name "Maxima") "interface/cas/man-maxima.en.tm") " language, different implementation may be used fooor the underlying " (name "Lisp") ". Similarly, one may wish to run two different instances of " (name "Maxima") " in parallel."))) (explain (document (concat (label "magnification") (var-val "magnification" "1") (explain-synopsis "magnification"))) (document "This variable determines the magnification which is applied to all content. Magnifications bigger than one are typically useful for presentations (from slides or from a laptop):" (tm-fragment (document (concat "normal" (htab "5mm") (with "magnification" "2" "big") (htab "5mm") (with "magnification" "3" "huge")))) (tm-fragment (document (inactive* (concat "normal" (htab "5mm") (with "magnification" "2" "big") (htab "5mm") (with "magnification" "3" "huge"))))) (concat "The magnification should not be confused with the " (hlink "font size" "../devel/format/environment/env-font.en.tm#font-base-size") ": contrary to the magnification, the font size may also affect the shapes of the glyphs. The magnification is usually specified for the entire document in " (menu "Document" "Magnification") "."))) (explain (document (concat (var-val "bg-color" "white") (explain-synopsis "background color"))) (document (concat "The background color for your document, as specified in " (menu "Document" "Color" "Background") "."))) (explain (document (concat (var-val "color" "black") (explain-synopsis "foreground color"))) (document (concat "The current foreground color of text and graphics, as specified in " (menu "Document" "Color" "Foreground") " or " (menu "Format" "Color") ". Named colors, like ``" (verbatim "Salmon") "'', are supported for different color charts: " (hlink (verbatim "dvips") "https://en.wikibooks.org/wiki/LaTeX/Colors#The_68_standard_colors_known_to_dvips") ", " (hlink (verbatim "x11") "https://en.wikipedia.org/wiki/X11_color_names#Color_name_charts") " and " (hlink (verbatim "html") "http://www.w3schools.com/html/html_colornames.asp") "."))) (explain (document (concat (var-val "preamble" "false") (explain-synopsis "edit source tree?"))) (document (concat "This flag determines whether we are editing normal text or a style-sheet. The source tree or preamble mode may be selected in " (menu "Document" "Source" "Edit source tree") "."))) (explain (document (concat (var-val "info-flag" "short") (explain-synopsis "informative flags style"))) (document (concat "This variable controls the rendering of informative flags, which are for instance used to indicate the locations of otherwise invisible labels or typesetting directives. The " (src-var "info-flag") " may take the values " (verbatim "none") ", " (verbatim "short") " and " (verbatim "detailed") ":") (tm-fragment (document (concat (with "info-flag" "none" (concat "Label 1" (label "flag-label-1"))) ", " (with "info-flag" "short" (concat "Label 2" (label "flag-label-2"))) ", " (with "info-flag" "detailed" (concat "Label 3" (label "flag-label-3"))) "."))) (tm-fragment (document (inactive* (concat (with "info-flag" "none" (concat "Label 1" (label "flag-label-1"))) ", " (with "info-flag" "short" (concat "Label 2" (label "flag-label-2"))) ", " (with "info-flag" "detailed" (concat "Label 3" (label "flag-label-3"))) ".")))) (concat "Usually, the rendering of informative flags is specified document-wide in " (menu "Document" "Informative flags") "."))) (section "Specifying the current font") (concat "In this section, we describe the environment variables which control the rendering of fonts. Font properties may be controlled globally for the whole document in " (menu "Document" "Font") " and locally for document fragments in " (menu "Format" "Font") ".") (concat "From an abstract point of view, a " (em "font") " is defined to be a graphically consistent way of rendering strings. Fonts are usually made up from glyphs like x, ffi, " (math "<alpha>") ", " (math (op (big "sum"))) ", " (abbr "etc.") " When rendering a string, the string is decomposed into glyphs so as to take into account ligatures (like fi, fl, ff, ffi, ffl). Next, the individual glyphs are positioned while taking into account kerning information (in xo the o character is slightly shifted to the left so as to take profit out of the hole in the x). In the case of mathematical fonts, " (TeXmacs) " also provides a coherent rendering for resizable characters, like the large brackets in") (equation* (document (concat (around* "(" (concat (around* "(" (concat (around* "(" "" ")") (rsup (rsup "<nosymbol>"))) ")") (rsup (rsup (rsup "<nosymbol>")))) ")") "."))) (concat "Similarly, a " (em "font family") " is a family of fonts with different characteristics (like font weight, slant, " (abbr "etc.") "), but with a globally consistent rendering. One also says that the fonts in a font family mix well together. For instance, the standard computer modern roman font and its " (with "font-series" "bold" "bold") " and " (with "font-shape" "italic" "italic") " variants mix well together, but the computer modern roman font and the " (with "font" "avant-garde" "Avant Garde") " font do not.") (remark (document (concat "In versions of " (TeXmacs) " prior to 1.99.1, the fonts for the mathematical and programming modes could be controlled independently using the environment variables " (src-var "math-font") ", " (src-var "math-font-family") ", " (src-var "math-font-series") ", " (src-var "math-font-shape") ", " (src-var "prog-font") ", " (src-var "prog-font-family") ", " (src-var "prog-font-series") ", " (src-var "prog-font-shape") ". In more recent versions of " (TeXmacs) ", the environment variables " (src-var "font") ", " (src-var "font-family") ", " (src-var "font-series") " and " (src-var "font-shape") " directly control the font for all modes."))) (explain (document (concat (var-val "font" "roman") (explain-synopsis "font name"))) (document (concat "These variables control the main name of the font, also called the " (em "font family") ". For instance:") (tm-fragment (document (concat (with "font" "roman" "Computer modern roman") ", " (with "font" "pandora" "Pandora") ", " (with "font" "chancery" "Chancery") ", " (with "font" "palatino" "Palatino")))) (concat "Similarly, " (TeXmacs) " supports various mathematical fonts:") (tm-fragment (document (concat "Roman: " (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2")))) (concat "Adobe: " (math (with "math-font" "adobe" (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))))) (concat "New roman: " (math (with "math-font" "ENR" (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))))) (concat "Concrete: " (math (with "math-font" "concrete" (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))))))) (concat "Most fonts only implement a subset of all Unicode glyphs. Sometimes, the user might wish to combine several fonts to cover a larger subset. For instance, when specifying " (verbatim "roman,IPAMincho") " or " (verbatim "cjk=IPAMincho,roman") " as the " (src-var "font") " name, ordinary text and mathematics will be typeset using the default " (verbatim "roman") " font, whereas Chinese text will use the " (verbatim "IPAMincho") " font. Similarly, when specifying " (verbatim "math=Stix,roman") " as the " (src-var "font") " name, ordinary text will be typeset using the default " (verbatim "roman") " font, but mathematical formulas using the " (verbatim "Stix") " font."))) (explain (document (concat (var-val "font-family" "rm") (explain-synopsis "font variant"))) (document (concat "This variable selects a variant of the major font, like a sans serif font, a typewriter font, and so on. As explained above, variants of a given font are designed to mix well together. Physically speaking, many fonts do not come with all possible variants (sans serif, typewriter, " (abbr "etc.") "), in which case " (TeXmacs) " tries to fall back on a suitable alternative font.") (concat "Typical variants for text fonts are " (verbatim "rm") " (roman), " (verbatim "tt") " (typewriter) and " (verbatim "ss") " (sans serif):") (tm-fragment (document (concat "roman, " (with "font-family" "tt" "typewriter") " and " (with "font-family" "ss" "sans serif")) (concat "Sans serif formula: " (with "font-family" "ss" (math (concat "sin " (around* "(" "x+y" ")") "=sin x*cos y+cos x*sin y")))))))) (explain (document (concat (var-val "font-series" "medium") (explain-synopsis "font weight"))) (document (concat "The font series determines the weight of the font. Most fonts only provide " (verbatim "regular") " and " (verbatim "bold") " font weights. Some fonts also provide " (verbatim "light") " as a possible value.") (tm-fragment (document (concat "medium, " (with "font-series" "bold" "bold")))))) (explain (document (concat (var-val "font-shape" "right") (explain-synopsis "font shape"))) (document "The font shape determines other characters of a font, like its slant, whether we use small capitals, whether it is condensed, and so on. For instance," (tm-fragment (document (concat (with "font-shape" "right" "upright") ", " (with "font-shape" "slanted" "slanted") ", " (with "font-shape" "italic" "italic") ", " (with "font-shape" "left-slanted" "left slanted") ", " (with "font-shape" "small-caps" "Small Capitals") ", " (with "font-shape" "proportional" (with "font-family" "tt" "proportional typewriter")) ", " (with "font-shape" "condensed" (with "font-series" "bold" "bold condensed")) ", " (with "font-shape" "flat" (with "font-family" "ss" "flat sans serif")) ", " (with "font-shape" "long" "long")))))) (explain (document (concat (label "font-base-size") (var-val "font-base-size" "10") (explain-synopsis "font base size"))) (document (concat "The base font size is specified in " (hlink (concat (verbatim "pt") " units") "../devel/format/basics/lengths.en.tm") " and is usually invariant throughout the document. Usually, the base font size is " (verbatim "9pt") ", " (verbatim "10pt") ", " (verbatim "11pt") " or " (verbatim "12pt") ". Other font sizes are usually obtained by changing the " (hlink (src-var "magnification") "../devel/format/environment/env-general.en.tm#magnification") " or the relative " (hlink "font-size" "../devel/format/environment/#font-size") ".") (tm-fragment (document (concat (with "font-base-size" "9" "9pt") ", " (with "font-base-size" "10" "10pt") ", " (with "font-base-size" "11" "11pt") ", " (with "font-base-size" "12" "12pt")))))) (explain (document (concat (label "font-size") (var-val "font-size" "1") (explain-synopsis "font size"))) (document (concat "The real font size is obtained by multiplying the " (src-var "font-base-size") " by the " (src-var "font-size") " multiplier. The following standard font sizes are available from " (menu "Format" "Size") ":") (big-table (descriptive-table (tformat (cwith "4" "5" "1" "4" "cell-bsep" "0.25fn") (cwith "4" "5" "1" "4" "cell-tsep" "0.25fn") (table (row (cell "size") (cell "multiplier") (cell "size") (cell "multiplier")) (row (cell (with "font-size" "0.59" "Tiny")) (cell "0.59") (cell (with "font-size" "0.71" "Very small")) (cell "0.71")) (row (cell (with "font-size" "0.84" "Small")) (cell "0.84") (cell (with "font-size" "1" "Normal")) (cell "1")) (row (cell (with "font-size" "1.19" "Large")) (cell "1.19") (cell (with "font-size" "1.41" "Very large")) (cell "1.41")) (row (cell (with "font-size" "1.68" "Huge")) (cell "1.68") (cell (with "font-size" "2" "Really huge")) (cell "2"))))) "Standard font sizes.") (concat "From a mathematical point of view, the multipliers are in a geometric progression with factor " (no-break) (math (sqrt "2" "4")) ". Notice that the font size is also affected by the " (hlink "index level" "../devel/format/environment/env-math.en.tm#math-level") "."))) (explain (document (concat (var-val "dpi" "600") (explain-synopsis "fonts rendering quality"))) (document (concat "The rendering quality of raster fonts (also called Type 3 fonts), such as the fonts generated by the " (name "Metafont") " program is controlled through its discretization precision in dots per inch. Nowadays, most laser printers offer a printing quality of at least " (verbatim "600dpi") ", which is also the default " (src-var "dpi") " setting for " (TeXmacs) ". For really high quality printing, professionals usually use a precision of " (verbatim "1200dpi") ". The " (src-var "dpi") " is usually set once and for all for the whole document."))) (section "Typesetting mathematics") (explain (document (concat (label "math-level") (var-val "math-level" "0") (explain-synopsis "index level"))) (document (concat "The " (em "index level") " increases inside certain mathematical constructs such as indices and fractions. When the index level is high, formulas are rendered in a smaller font. Nevertheless, index levels higher than " (verbatim "2") " are all rendered in the same way as index level " (verbatim "2") "; this ensures that formulas like") (equation* (document (concat "<mathe>" (rsup (concat "<mathe>" (rsup (concat "<mathe>" (rsup (concat "<mathe>" (rsup "x"))))))) "=" (frac (concat "1+" (frac "1" (concat "x+<mathe>" (rsup "x")))) (concat "1+" (frac "1" (concat "<mathe>" (rsup "x") "+" (frac "1" (concat "<mathe>" (rsup (concat "<mathe>" (rsup "x")))))))))))) (concat "remain readable. The index level may be manually changed in " (menu "Format" "Index level") ", so as to produce formulas like") (equation* (document (concat "x" (rsup (with "math-level" "0" (concat "y" (rsup "z"))))))) (tm-fragment (document (math (inactive* (concat "x" (rsup (with "math-level" "0" (concat "y" (rsup "z"))))))))))) (explain (document (concat (var-val "math-display" "false") (explain-synopsis "display style"))) (document (concat "This environement variable controls whether we are in " (em "display style") " or not. Formulas which occur on separate lines like") (equation* (document (concat (frac "n" (concat "H" (around "(" (concat "<alpha>" (rsub "1") ",<ldots>,<alpha>" (rsub "n")) ")"))) "=" (frac "1" (concat "<alpha>" (rsub "1"))) "+<cdots>+" (frac "1" (concat "<alpha>" (rsub "n")))))) (concat "are usually typeset in display style, contrary to inline formulas like " (math (concat (frac "n" (concat "H" (around "(" (concat "<alpha>" (rsub "1") ",<ldots>,<alpha>" (rsub "n")) ")"))) "=" (frac "1" (concat "<alpha>" (rsub "1"))) "+<cdots>+" (frac "1" (concat "<alpha>" (rsub "n"))))) ". As you notice, formulas in display style are rendered using a wider spacing. The display style is disabled in several mathematical constructs such as scripts, fractions, binomial coefficients, and so on. As a result, the double numerators in the formula") (equation* (document (concat "H" (around "(" (concat "<alpha>" (rsub "1") ",<ldots>,<alpha>" (rsub "n")) ")") "=" (frac "n" (concat (frac "1" (concat "<alpha>" (rsub "1"))) "+<cdots>+" (frac "1" (concat "<alpha>" (rsub "n")))))))) (concat "are typeset in a smaller font. You may override the default settings using " (menu "Format" "Display style") "."))) (explain (document (concat (var-val "math-condensed" "false") (explain-synopsis "condensed display style"))) (document (concat "By default, formulas like " (math "a+<cdots>+z") " are typeset using a nice, wide spacing around the " (math (op "+")) " symbol. In formulas with scripts like " (math (concat "<mathe>" (rsup "a+<cdots>+z") "+<mathe>" (rsup "<alpha>+<cdots>+<zeta>"))) " the readability is further enhanced by using a more condensed spacing inside the scripts: this helps the reader to distinguish symbols occurring in the scripts from symbols occurring at the ground level when the scripts are long. The default behaviour can be overridden using " (menu "Format" "Condensed") "."))) (explain (document (concat (var-val "math-vpos" "0") (explain-synopsis "position in fractions"))) (document (concat "For a high quality typesetting of fraction, it is good to avoid subscripts in numerators to descend to low and superscripts in denominators to ascend to high. " (TeXmacs) " therefore provides an additional environment variable " (src-var "math-vpos") " which takes the value " (math "1") " inside numerators, " (math "<um>1") " inside denominators and " (math "0") " otherwise. In order to see the effect the different settings, consider the following formula:") (equation* (document (concat (with "math-vpos" "-1" (rigid (concat "a" (rsub "<um>1") (rsup "2")))) "+" (with "math-vpos" "0" (rigid (concat "a" (rsub "0") (rsup "2")))) "+" (with "math-vpos" "1" (rigid (concat "a" (rsub "1") (rsup "2"))))))) (tm-fragment (document (math (inactive* (concat (with "math-vpos" "-1" (rigid (active* (concat "a" (rsub "<um>1") (rsup "2"))))) "+" (with "math-vpos" "0" (rigid (active* (concat "a" (rsub "0") (rsup "2"))))) "+" (with "math-vpos" "1" (rigid (active* (concat "a" (rsub "1") (rsup "2")))))))))) (concat "In this example, the grouping is necessary in order to let the different vertical positions take effect on each " (math (concat "a" (rsub "i") (rsup "2"))) ". Indeed, the vertical position is uniform for each horizontal concatenation."))) (section "Paragraph layout") (explain (document (concat (var-val "par-mode" "justify") (explain-synopsis "paragraph alignment"))) (document (concat "This environment variable specifies the alignment of the different lines in a paragraph. Possible values are " (verbatim "left") ", " (verbatim "center") ", " (verbatim "right") " and " (verbatim "justify") ":") (big-table (document (quote-env (document (quote-env (document (block (tformat (twith "table-width" "1par") (cwith "1" "-1" "1" "-1" "cell-hyphen" "t") (table (row (cell (document (with "par-mode" "left" (document "This paragraph is aligned to the left. This paragraph is aligned to the left. This paragraph is aligned to the left.")))) (cell (document (with "par-mode" "center" (document "This paragraph is has been centered. This paragraph is has been centered. This paragraph is has been centered."))))) (row (cell (document (with "par-mode" "right" (document "This paragraph is aligned to the right. This paragraph is aligned to the right. This paragraph is aligned to the right.")))) (cell (document "This paragraph has been justified. Justification is the default alignment mode for paragraphs. So be it."))))))))))) (document "The supported modes for alignment.")))) (explain (document (concat (var-val "par-flexibility" "1000.0") (explain-synopsis "paragraph flexibility"))) (document (concat "When using the justified alignment mode, it sometimes occurs that certain lines need to be stretched a lot, thereby leaving abnormally large spaces in the middle of those lines. This is typically the case inside bibliographies with unbreakable hyperlinks. The " (src-var "par-flexibility") " variable specifies a threshold above which justification of a line is abandoned. More precisely, we switch to left alignment whenever the remaining space on a line exceeds " (src-var "par-flexibility") " times the maximal amount of stretching which still ``looks nice'' for the given font.") (big-table (document (quote-env (document (block (tformat (twith "table-width" "1par") (cwith "1" "-1" "1" "-1" "cell-hyphen" "t") (table (row (cell (document (concat "For certain paragraphs with wide unbreakable pieces of text, such as the hyperlink " (rigid (href "http://www.texmacs.org")) " it is sometimes preferrable to switch from justified to left aligned text when the spacing between words becomes to wide."))) (cell (document (with "par-flexibility" "2.0" (document (concat "For certain paragraphs with wide unbreakable pieces of text, such as the hyperlink " (rigid (href "http://www.texmacs.org")) " it is sometimes preferrable to switch from justified to left aligned text when the spacing between words becomes to wide.")))))))))))) (document "Difference between a large and small flexibility (on the left and right hand sides respectively).")))) (explain (document (concat (var-val "par-hyphen" "normal") (explain-synopsis "quality of hyphenation"))) (document (concat "This parameter controls the quality of the hyphenation algorithm. Possible values are " (verbatim "normal") " and " (verbatim "professional") ". The professional hyphenation algorithm uses a global algorithm on the entire paragraph, whereas the normal one uses a faster first-fit algorithm.") (big-table (document (with "font-base-size" "10" (document (quote-env (document (quote-env (document (block (tformat (twith "table-width" "1par") (cwith "1" "-1" "1" "-1" "cell-hyphen" "t") (table (row (cell (document (with "par-hyphen" "normal" (concat "The difference between the different hyphenation algorithms provided by " (TeXmacs) " is seen best for long paragraphs which are typeset into a narrow column. The professional hyphenation usually succeeds to minimize the number of ugly gaps between words.")))) (cell (document (with "par-hyphen" "professional" (concat "The difference between the different hyphenation algorithms provided by " (TeXmacs) " is seen best for long paragraphs which are typeset into a narrow column. The professional hyphenation usually succeeds to minimize the number of ugly gaps between words."))))))))))))))) (document "Comparison different hyphenation algorithms. At the left hand side, we have used the normal algorithm and on the right hand side the professional one. Even though there are some ugly gaps at the right hand side around ``hyphenation'', the really bad gap around ``The'' on the left hand side has been avoided.")))) (explain (document (concat (var-val "par-width" "auto") (explain-synopsis "paragraph width"))) (document "This environment variable controls the width of paragraphs. By default, it is automatically determined as a function of the page (or screen) size and margins.")) (explain (document (var-val "par-left" "0cm") (concat (var-val "par-right" "0cm") (explain-synopsis "left and right margins"))) (document "These environment variables specify absolute left and right margins for the paragraph, with respect to the default left and right margins (which are determined as a function of the page layout). For instance:" (tm-fragment (document "This text uses the default margins." (with "par-left" "1cm" (document (concat "This text uses a left margin of " (verbatim "1cm")))) (with "par-left" "2cm" (document (concat "This text uses a left margin of " (verbatim "2cm")))) (with "par-left" "3cm" (document (concat "This text uses a left margin of " (verbatim "3cm")))) (with "par-left" "3cm" "par-right" "3cm" (document (concat "The left and right margins of this text have both been set to " (verbatim "3cm") "."))))) (concat "Environments like " (markup "itemize") " and " (markup "quote-env") " which maybe nested usually compute new margins as a function of the old values by adding or subtracting some space:") (tm-fragment (document (inactive* (assign "quote-env" (macro "body" (style-with "src-compact" "none" (surround (vspace* "0.5fn") (concat (right-flush) (vspace "0.5fn")) (with "par-left" (plus (value "par-left") "3fn") "par-right" (plus (value "par-right") "3fn") "par-first" "0fn" "par-par-sep" "0.25fn" (arg "body"))))))))))) (explain (document (concat (var-val "par-first" "1.5fn") (explain-synopsis "first indentation"))) (document (concat "The " (src-var "par-first") " parameter specifies the additional indentation which is used for the first line of the paragraph. The aim of first indentations is to indicate the starts of new paragraphs. An alternative technique is the use of vertical whitespace.") (big-table (document (quote-env (document (quote-env (document (block (tformat (twith "table-width" "1par") (cwith "1" "-1" "1" "-1" "cell-hyphen" "t") (table (row (cell (document (with "par-par-sep" "0fn" (document (with "par-first" "1.5fn" (document (concat "The " (tmstyle "article") " and " (tmstyle "book") " styles in " (TeXmacs) " indictate the starts of new paragraphs through the use of a first indentation.") (concat "The " (tmstyle "generic") " and " (tmstyle "letter") " styles rather use vertical whitespace."))))))) (cell (document (with "par-par-sep" "0.5fn" (document (concat "The " (tmstyle "generic") " and " (tmstyle "letter") " styles in " (TeXmacs) " indictate the starts of new paragraphs through the use of vertical whitespace.") (concat "The " (tmstyle "article") " and " (tmstyle "book") " styles rather use a first indentation.")))))))))))))) (document (concat (label "par-first-tab") "Two classical ways to indicate the starts of new paragraphs."))))) (explain (document (concat (var-val "par-sep" "0.2fn") (explain-synopsis "extra separation between successive lines"))) (document (concat "The sum of the font size and " (inactive (value "par-sep")) " determines the ideal distance between two successive base lines in a paragraph (also called the ``base line skip''). Of course, when the lines contain large boxes, then this distance may need to be increased. When " (verbatim "1fn") " for " (inactive (value "par-sep")) ", one may for instance produce documents with a double interline space:") (tm-fragment (document (with "par-sep" "1fn" (document (concat "A double interline space corresponds to " (var-val "par-sep" "1fn") ". Double interline spaces are often used by lazy people who want to pretend that they have written many pages. They generally do not care about tropical rain forests."))))) "In the case when two successive lines use different base line skips, then the maximal value is used in order to compute the ideal distance between their baselines. This allows for a reasonable spacing when the font size is changed from one paragraph to another:" (tm-fragment (document (with "par-par-sep" "0fn" (document "Normal text." (very-large "Some very large text.") "And back to normal.")))))) (explain (document (concat (var-val "par-line-sep" "0.025fn*") (explain-synopsis "extra space between lines"))) (document (concat "This parameter corresponds an additional stretchable amount of whitespace between successive lines in a paragraph. Setting " (inactive (value "par-line-sep")) " to a small stretchable value which defaults to " (math "0") " allows the page breaker to correctly stretch pages which contain a very long textual paragraph. Indeed, " (inactive (value "par-line-sep")) " vanishes, then the height of a textual paragraph is of the form " (math "a+b*n") ", where " (math "a") " and " (math "b") " are constants and " (math "n") " is the number of lines. There is no reason why the usable height of a page should be of this form."))) (explain (document (concat (var-val "par-par-sep" "0.5fn*") (explain-synopsis "extra space between paragraphs"))) (document (concat "The " (src-var "par-par-sep") " parameter specifies the amount of vertical whitespace which separates two successive paragraphs. This space is determined in " (hlink "stretchable length units" "../devel/format/basics/lengths.en.tm") ". By default, " (TeXmacs) " does not use any whitespace between successive paragraphs, except when no nice page breaks could be found (this explains the use of the " (verbatim "fn*") " length unit). Starts of new paragraphs are rather indicated through the use of first indentations (see table " (reference "par-first-tab") ").") (concat "In the case when two successive paragraph use different paragraph separations, then the maximum of the two is taken. In fact, the " (src-var "par-par-sep") " length is added to both the vertical spacing before and the vertical spacing after the paragraph."))) (explain (document (var-val "par-hor-sep" "0.5fn") (concat (var-val "par-ver-sep" "0.2fn") (explain-synopsis "minimal space between ink"))) (document (concat "When a paragraph contains several exceptionally large boxes, then " (TeXmacs) " attempts to ``shove successive lines into another'' as long as none of the boxes collide:") (with "font-base-size" "10" (document (tm-fragment (document (concat "Consider a fraction which decends more than usual like " (math (frac "1" "x+1")) " at the end of a line and an expression like " (math (concat "<mathe>" (rsup (concat "<mathe>" (rsup "x"))))) " which is higher than usual.") (concat "When these expressions occur at different places, then " (TeXmacs) " tries to render the successive lines in a compact manner.") (concat "In the case of a fraction " (math (frac "1" "x+1")) " and an exceptionally high expression at the wrong place, like the expression " (math (concat "<mathe>" (rsup (concat "<mathe>" (rsup "x"))))) " here, the boxes are separated by " (src-var "env-ver-sep") "."))))) (concat "As soon as the horizontal distance between two large boxes is less than " (src-var "par-hor-sep") ", then they are considered to be in collision. In that case, the vertical distance between them must be at least " (src-var "par-ver-sep") ". Also, the amount of showing never exceeds " (verbatim "1ex") ".") (concat "When using an interline space of " (verbatim "1.5") " or " (verbatim "2") ", the default value of " (src-var "par-ver-sep") " allows the user to type larger formulas in the text while preserving a uniform layout. When using a small " (src-var "par-sep") " and a large " (inactive (value "par-ver-sep")) ", the distance between two successive lines remains small, except when their contents are horizontally close. This may for instance be used to reduce the space between a short like followed by a centered equation."))) (explain (document (concat (var-val "par-fnote-sep" "0.2fn") (explain-synopsis "minimal space between different footnotes"))) (document "This parameter controls the amount of vertical space between successive footnotes.")) (explain (document (concat (var-val "par-columns" "1") (explain-synopsis "number of columns"))) (document "This environment variable specifies the number of columns into which the text is being typeset. Different numbers of columns may be used successively in the same document.")) (explain (document (concat (var-val "par-columns-sep" "2fn") (explain-synopsis "distance between columns"))) (document "This environment variable specifies the amount of horizontal whitespace which separates different columns in multi-column mode.")) (section "Page layout") (concat "In this section, we describe how " (TeXmacs) " fills pages with typesetted content. Besides specifying the settings on how to print a document, the user may also determine the way pages should be rendered on screen. It should be noticed that the number of environment variables is redundant in the sense that some variables are computed as a function of other ones. For instance, by default, the paragraph width is computed as a function of the page size and the left and right margins.") (paragraph* "Paper specific variables") (explain (document (concat (var-val "page-type" "a4") (explain-synopsis "the size of pages"))) (document (concat "Specify the size of a page when printing out. Most standard formats are available in " (menu "Document" "Page" "Size") ". By default, the paper size is the one of your printer (the default printer settings may be changed in " (menu "Edit" "Preferences" "Printer") "). When the " (src-var "page-type") " is set to " (verbatim "user") ", then the page size is given by " (src-var "page-width") " and " (src-var "page-height") "."))) (explain (document (concat (var-val "page-orientation" "portrait") (explain-synopsis "page orientation"))) (document (concat "The orientation of pages can be either " (verbatim "portrait") " or " (verbatim "landscape") "."))) (explain (document (concat (var-val "page-nr" "0") (explain-synopsis "current page number"))) (document (concat "The current page number. This environment variable should be manipulated with care, since it is not yet available at typesetting time. For a reliable determination of page numbers, one may combine the " (markup "label") " and " (markup "page-ref") " primitives. Nevertheless, the " (src-var "page-nr") " variable can be used in the macros which render page headers and footers."))) (explain (document (concat (src-var "page-the-page") (explain-synopsis "display the page number"))) (document (concat "This environment variable really contains the macro which is used for rendering the page-number. By default, it renders " (src-var "page-nr") ". The macro takes no arguments. In order to simulate a document whose first page number is " (math "123") ", one may redefine") (tm-fragment (document (inactive* (assign "page-the-page" (macro (plus (value "page-nr") "122")))))))) (explain (document (concat (var-val "page-breaking" "optimal") (explain-synopsis "page breaking algorithm"))) (document (concat "This parameter specifies the page breaking algorithm. The default " (verbatim "optimal") " algorithm takes into account the global document and tries hard to avoid bad page breaks. The alternative " (verbatim "sloppy") " algorithm uses a fast first-fit algorithm, but produces bad page break with a higher probability. The " (verbatim "medium") " quality algorithm is the same as the " (verbatim "optimal") " algorithm, except for two column content."))) (explain (document (concat (var-val "page-flexibility" "1.0") (explain-synopsis "flexibility for stretching"))) (document (concat "This parameter specifies how much stretchable spaces may be extended or reduced in order to fill pages which are too short or too long. A page flexibility of " (math "1") " allows spaces to be stretched to their minimal and maximal values. A page flexibility of " (math "0") " prevents spaces to be stretched. For other values of " (src-var "page-flexibility") " the behaviour is linear."))) (explain (document (concat (var-val "page-shrink" "1fn") (explain-synopsis "allowed amount of page shrinking"))) (document "In the case when it is very hard to find good page breaks, this parameter specifies an additional amount of space by which a page is allowed to be reduced.")) (explain (document (concat (var-val "page-extend" "0fn") (explain-synopsis "allowed amount of page extensions"))) (document "In the case when it is very hard to find good page breaks, this parameter specifies an additional amount of space by which a page is allowed to be extended.")) (paragraph* "Screen specific variables") (explain (document (concat (var-val "page-medium" "papyrus") (explain-synopsis "the page medium"))) (document (concat "This environment variable, which is initialized using " (menu "Document" "Page" "Type") ", specifies how pages are rendered on the screen. The following values are available:") (description (document (concat (item* (verbatim "paper")) "Page breaks are visually indicated on the screen. This mode is useful for ajusting the final version of a document before printing or sending it to a publisher. However, the use of this mode slows down the editor since every modification in the document triggers the page-breaking algorithm.") (concat "Notice also that the mere selection of this mode does not imply the screen margins and page decorations to be as on paper. In order to previsualize a document in a fully realistic way, you should also set " (menu "Document" "Page" "Screen margins" "Show header and footer") " and " (menu "Document" "Page" "Screen margins" "Margins as on paper") ".") (concat (item* (verbatim "papyrus")) "The paragraph width is the same as on paper, but page breaking is disabled. This mode is most useful during the editing phase of a document which will ultimately be printed out. It combines a reasonable editing speed with realistic line breaks.") (concat (item* (verbatim "automatic")) "The paragraph width is as large as possible so as to fit into the current window and page breaking is disabled. This setting, which makes optimal use of the available space on your screen, is useful for documents which are not intended to be printed out. It may for instance be selected when using " (TeXmacs) " as a browser or as an interface to computer algebra systems."))))) (explain (document (concat (var-val "page-screen-width" "10cm") (explain-synopsis "width of the rendering window"))) (document (concat "In " (verbatim "automatic") " mode, this environement variable contains the width of the screen."))) (explain (document (concat (var-val "page-screen-height" "10cm") (explain-synopsis "height of the rendering window"))) (document (concat "In " (verbatim "automatic") " mode, this environement variable contains the height of the screen."))) (explain (document (concat (var-val "page-screen-margin" "true") (explain-synopsis "special margins for screen editing?"))) (document "This flag specifies whether the screen margins are manually specified by the user, or whether they are the same as on paper.")) (explain (document (var-val "page-screen-left" "5mm") (var-val "page-screen-right" "5mm") (var-val "page-screen-top" "15mm") (concat (var-val "page-screen-bot" "15mm") (explain-synopsis "left margin on screen"))) (document (concat "When " (src-var "page-screen-margin") " is " (verbatim "true") ", then these environment variables determine the margins which are to be used for rendering on the screen."))) (explain (document (concat (var-val "page-show-hf" "false") (explain-synopsis "show headers and footers on screen?"))) (document (concat "This flag determines whether the page headers and footers should be visible on the screen. When set to " (verbatim "true") ", it should be noticed that the headers and footers are not always correctly updated when editing. In the case when you suspect them to be wrong, refreshing the display by scrolling down and up should display the correct values."))) (paragraph* "Specifying the margins") (concat "The parameters for page margins are represented schematically at the left hand side in figure " (no-break) (reference "tm-page-fig") ". One may either specify the paragraph width as a function of the left and right margins, or " (em "vice versa") ". The left and right margins may depend on whether the page number is odd or even.") (explain (document (var-val "page-width-margin" "false") (concat (var-val "page-height-margin" "false") (explain-synopsis "compute margins from main text dimensions?"))) (document (concat "When " (src-var "page-width-margin") " is set to " (verbatim "false") ", then the paragraph width " (src-var "par-width") " is determined automatically from the page size and the left and right margins. When set to " (verbatim "true") ", the left and right margins are determined as a function of the page size, the paragraph width, " (src-var "page-odd-shift") " and " (src-var "page-even-shift") ". For compatability with " (TeX) "/" (LaTeX) ", it is also possible to set " (src-var "page-width-margin") " to " (verbatim "tex") ", in which case the horizontal margins are determined from " (src-var "page-odd") ", " (src-var "page-even") " and " (src-var "par-width") ". The " (src-var "page-height-margin") " variable plays a similar role for the vertical margins."))) (explain (document (var-val "page-width" "auto") (concat (var-val "page-height" "auto") (explain-synopsis "page width"))) (document (concat "By default, the width and height of a page are automatically determined from the page type. When " (src-var "page-type") " is set to " (verbatim "user") ", then the user may manually specify the page size using " (src-var "page-width") " and " (src-var "page-height") "."))) (explain (document (var-val "page-odd" "auto") (concat (var-val "page-even" "auto") (explain-synopsis "left margin"))) (document (concat "If " (src-var "page-width-margin") " is set to " (verbatim "false") ", then " (src-var "page-odd") " and " (src-var "page-even") " specify the left margins for odd and even pages. If " (src-var "page-width-margin") " is " (verbatim "true") ", then these values are computed as a function of the page size, the paragraph width, " (src-var "page-odd-shift") " and " (src-var "page-even-shift") ". When " (src-var "page-odd") " and " (src-var "page-even") " are set to " (verbatim "auto") ", then a nice default left margin is determined as a function of the specified page type."))) (explain (document (concat (var-val "page-right" "auto") (explain-synopsis "right margin"))) (document (concat "If " (src-var "page-width-margin") " is set to " (verbatim "false") ", then " (src-var "page-right") " specifies the right margin for odd pages. The right margin for even pages is given by the formula") (equation* (document (concat (text (src-var "page-right")) "+" (text (src-var "page-even")) "-" (text (src-var "page-odd"))))) (concat "If " (src-var "page-width-margin") " is " (verbatim "true") " or when " (src-var "page-right") " is set to " (verbatim "auto") ", then the right margin is determined in a similar way as the left margin."))) (explain (document (var-val "page-odd-shift" "0mm") (concat (var-val "page-even-shift" "0mm") (explain-synopsis "margin shifts"))) (document (concat "If " (src-var "page-width-margin") " is set to " (verbatim "true") ", then the left margins for odd and even pages are determined from the page size, paragraph width and the margin shifts using the formulas") (eqnarray* (document (tformat (table (row (cell (text (src-var "page-even"))) (cell "=") (cell (concat (frac (concat (text (src-var "page-width")) "-" (text (src-var "par-width"))) "2") "+" (text (src-var "page-odd-shift"))))) (row (cell (text (src-var "page-odd"))) (cell "=") (cell (concat (frac (concat (text (src-var "page-width")) "-" (text (src-var "par-width"))) "2") "+" (text (src-var "page-even-shift"))))))))) "The right margin is always taken to be such that the paragraph width and the left and right margins sum up to the page width.")) (quote-env (document (big-figure (image (tuple (raw-data "%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: f2pspost.dvi
%%BoundingBox: 133 213 660 584
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o f2pspost.ps f2pspost
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2004.07.19:1740
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600 (f2pspost.dvi)
@start
%DVIPSBitmapFont: Fa cmmi12 12 9
/Fa 9 120 df<EB0FE0EA07FFA338001FC0130F131FA25CA3133F91C8FCA35B137EA313
FE5BA312015BEC0FC0EC3FF00003EBF07C9038F3C03E9038F7001F01FE14804848130F49
14C05B16E0485A5BA3121F5BA2151F123F90C7FCA2153F4815C0127EA2157F16805A1600
5DA24A5A007C5CA24A5A4A5A5D003C130F003E495A001E495A001F017EC7FC6C5B3807C1
F03801FFC06C6CC8FC23467CC429>98 D<EE01FC16FFA3EE03F816011603A217F0A21607
A217E0A2160FA217C0A2161FA21780A2163FA21700EC0FC091387FF07F903801F8389039
07E01C7E90380FC00E90393F0007FE49130301FE5C485A491301120348485C120F491303
121F5E485A1507127F495CA2150F12FF90C75BA2151FA2485DA2033F13301770EE0060A2
4B13E017C015FE007E130102031301003ED9073E1380003F010E13036C011C14006C6C48
6C5A3A07C0F00F0E3A01FFC007FC3A007F0001F02E467CC433>100
D<EE07E0EE1FF8EE7C1CEEF80E923801F03E923803E07F17FFED07E116C117FE92380FC0
FC177817004B5AA4153F93C7FCA45D157EA491B61280A3DA00FCC7FCA314015DA414035D
A414075DA4140F5DA5141F5DA4143F92C8FCA45C147EA45CA45C1301A25CA2EA1C03007F
5B12FF5C13075C4848C9FC12F8EA601EEA783CEA1FF0EA07C0305A7BC530>102
D<14FE137FA3EB01FC13001301A25CA21303A25CA21307A25CA2130FA25CA2131FA25CED
3FC090393F81FFF0913887C0FC91380E007E023C133ED97F70133F4A7F4A14805C13FF91
C7FC5BA24848143F17005BA200035D167E5BA2000715FE5E5B1501000F5DA24913035E00
1F1607030713064914E0150F003FEDC00E170C90C7141CEE80184816381730007E167017
E000FE91380781C0EEC38048913801FF000038EC007C30467BC438>104
D<EB03F8EA01FFA3380007F013031307A214E0A2130FA214C0A2131FA21480A2133FA214
00A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA25B
A2123FA290C7FCA248136014E0007E13C0A2130100FE138012FCA21303007C13005B1306
EA3E0EEA1E1CEA0FF8EA03E015467CC41D>108 D<01F8D903FCEC7F80D803FED91FFF90
3803FFE0D8071F903B7C0FC00F81F83E0E0F80E007E01C00FC001C9026C3C0030178137C
271807C700D9F0E0137E02CE902601F1C0133E003801DCDAFB80133F003001D892C7FCD9
0FF814FF0070495C0060495CA200E04949485CD8C01F187E4A5C1200040715FE013F6091
C75BA2040F14014960017E5D1903041F5D13FE494B130762043F160E0001060F130C4992
C713C0191F4CED801C00031A1849027E1638F2003004FE167000071A60494A16E0F201C0
030192380F0380000FF18700494AEC03FED80380D90070EC00F84F2D7DAB55>I<01F8EB
0FC0D803FEEB7FF0D8070FEBF038000E903883C07C3A0C07C701FC001C13CE0018EBDC03
003813D8003013F8D90FF013F800709038E000E0006015005C12E0EAC01F5C1200A2133F
91C8FCA35B137EA313FE5BA312015BA312035BA312075BA3120F5BEA0380262D7DAB2C>
114 D<141C147EA314FE5CA313015CA313035CA313075CA2007FB512FCB6FC15F839000F
C000A2131F5CA3133F91C7FCA35B137EA313FE5BA312015BA312035BA21570000714605B
15E015C0000F130101C013801403EC070000071306140E5C6C6C5A000113F03800FFC001
3FC7FC1E3F7EBD23>116 D<013E1738D9FF80D901C013FC2603C3C0903907E001FE3807
03E0380601F0000E150F001C16C0D8180316000038187E0030031F143E00705ED8600717
1E5C163FD8E00F92C7121C00C049160CEA001F4A49141C047E1418133F91C7FC04FE1438
491730017E5CA20301157001FE1760495C19E019C0A24949481301198018031900606D01
07140670130E017C010F5C017E010C1418013ED91CFC13386DD9387E13F0903B0FC0F01F
01C0903B03FFC00FFF809028007F0001FEC7FC3F2D7DAB46>119
D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
1 0 bop Black Black Black 515 4214 a @beginspecial 0
@llx 0 @lly 525 @urx 369 @ury 5250 @rwi @setspecial
%%BeginDocument: pre.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: pre.fig
%%Creator: fig2dev Version 3.2 Patchlevel 3d
%%CreationDate: Mon Jul 19 17:40:40 2004
%%For: vdhoeven@zonnebloem (Joris van der Hoeven)
%%BoundingBox: 0 0 525 369
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def
/col32 {0.745 0.765 0.745 srgb} bind def
/col33 {0.745 0.000 0.000 srgb} bind def

end
save
newpath 0 369 moveto 0 0 lineto 525 0 lineto 525 369 lineto closepath clip newpath
-70.8 368.6 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
 0.06299 0.06299 sc
%
% Fig objects follow
%
% Polyline
n 1125 0 m 9450 0 l 9450 5850 l 1125 5850 l
 cp gs col32 1.00 shd ef gr 
% Polyline
7.500 slw
n 6075 3600 m
 7200 3600 l gs col0 s gr 
% Polyline
n 6075 3600 m
 7200 3600 l gs col0 s gr 
% Polyline
n 1350 225 m 5175 225 l 5175 5625 l 1350 5625 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
n 2025 900 m 4500 900 l 4500 4950 l 2025 4950 l
 cp gs col32 1.00 shd ef gr gs col0 s gr 
% Polyline
gs  clippath
2040 2505 m 2040 2445 l 1956 2445 l 2016 2475 l 1956 2505 l cp
1335 2445 m 1335 2505 l 1419 2505 l 1359 2475 l 1419 2445 l cp
eoclip
n 1350 2475 m
 2025 2475 l gs col32 1.00 shd ef gr gs col33 s gr gr

% arrowhead
n 1419 2445 m 1359 2475 l 1419 2505 l 1419 2445 l  cp gs col33 1.00 shd ef gr  col33 s
% arrowhead
n 1956 2505 m 2016 2475 l 1956 2445 l 1956 2505 l  cp gs col33 1.00 shd ef gr  col33 s
% Polyline
gs  clippath
5190 2505 m 5190 2445 l 5106 2445 l 5166 2475 l 5106 2505 l cp
4485 2445 m 4485 2505 l 4569 2505 l 4509 2475 l 4569 2445 l cp
eoclip
n 4500 2475 m
 5175 2475 l gs col32 1.00 shd ef gr gs col33 s gr gr

% arrowhead
n 4569 2445 m 4509 2475 l 4569 2505 l 4569 2445 l  cp gs col33 1.00 shd ef gr  col33 s
% arrowhead
n 5106 2505 m 5166 2475 l 5106 2445 l 5106 2505 l  cp gs col33 1.00 shd ef gr  col33 s
% Polyline
gs  clippath
3120 915 m 3180 915 l 3180 831 l 3150 891 l 3120 831 l cp
3180 210 m 3120 210 l 3120 294 l 3150 234 l 3180 294 l cp
eoclip
n 3150 225 m
 3150 900 l gs col32 1.00 shd ef gr gs col33 s gr gr

% arrowhead
n 3180 294 m 3150 234 l 3120 294 l 3180 294 l  cp gs col33 1.00 shd ef gr  col33 s
% arrowhead
n 3120 831 m 3150 891 l 3180 831 l 3120 831 l  cp gs col33 1.00 shd ef gr  col33 s
% Polyline
gs  clippath
3120 5640 m 3180 5640 l 3180 5556 l 3150 5616 l 3120 5556 l cp
3180 4935 m 3120 4935 l 3120 5019 l 3150 4959 l 3180 5019 l cp
eoclip
n 3150 4950 m
 3150 5625 l gs col32 1.00 shd ef gr gs col33 s gr gr

% arrowhead
n 3180 5019 m 3150 4959 l 3120 5019 l 3180 5019 l  cp gs col33 1.00 shd ef gr  col33 s
% arrowhead
n 3120 5556 m 3150 5616 l 3180 5556 l 3120 5556 l  cp gs col33 1.00 shd ef gr  col33 s
% Polyline
gs  clippath
4515 3630 m 4515 3570 l 4431 3570 l 4491 3600 l 4431 3630 l cp
2010 3570 m 2010 3630 l 2094 3630 l 2034 3600 l 2094 3570 l cp
eoclip
n 2025 3600 m
 4500 3600 l gs col32 1.00 shd ef gr gs col33 s gr gr

% arrowhead
n 2094 3570 m 2034 3600 l 2094 3630 l 2094 3570 l  cp gs col33 1.00 shd ef gr  col33 s
% arrowhead
n 4431 3630 m 4491 3600 l 4431 3570 l 4431 3630 l  cp gs col33 1.00 shd ef gr  col33 s
% Polyline
n 5400 225 m 9225 225 l 9225 5625 l 5400 5625 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
n 6300 4950 m 8775 4950 l 8775 5175 l 6300 5175 l
 cp gs col32 1.00 shd ef gr gs col0 s gr 
% Polyline
n 6300 675 m 8775 675 l 8775 900 l 6300 900 l
 cp gs col32 1.00 shd ef gr gs col0 s gr 
% Polyline
n 5625 1800 m 5985 1800 l 5985 2250 l 5625 2250 l
 cp gs col32 1.00 shd ef gr gs col0 s gr 
% Polyline
gs  clippath
6000 1650 m 6000 1590 l 5916 1590 l 5976 1620 l 5916 1650 l cp
5610 1590 m 5610 1650 l 5694 1650 l 5634 1620 l 5694 1590 l cp
eoclip
n 5625 1620 m
 5985 1620 l gs col32 1.00 shd ef gr gs col33 s gr gr

% arrowhead
n 5694 1590 m 5634 1620 l 5694 1650 l 5694 1590 l  cp gs col33 1.00 shd ef gr  col33 s
% arrowhead
n 5916 1650 m 5976 1620 l 5916 1590 l 5916 1650 l  cp gs col33 1.00 shd ef gr  col33 s
% Polyline
gs  clippath
6315 2460 m 6315 2400 l 6231 2400 l 6291 2430 l 6231 2460 l cp
5970 2400 m 5970 2460 l 6054 2460 l 5994 2430 l 6054 2400 l cp
eoclip
n 5985 2430 m
 6300 2430 l gs col32 1.00 shd ef gr gs col33 s gr gr

% arrowhead
n 6054 2400 m 5994 2430 l 6054 2460 l 6054 2400 l  cp gs col33 1.00 shd ef gr  col33 s
% arrowhead
n 6231 2460 m 6291 2430 l 6231 2400 l 6231 2460 l  cp gs col33 1.00 shd ef gr  col33 s
% Polyline
gs  clippath
7395 4965 m 7455 4965 l 7455 4881 l 7425 4941 l 7395 4881 l cp
7455 4485 m 7395 4485 l 7395 4569 l 7425 4509 l 7455 4569 l cp
eoclip
n 7425 4500 m
 7425 4950 l gs col32 1.00 shd ef gr gs col33 s gr gr

% arrowhead
n 7455 4569 m 7425 4509 l 7395 4569 l 7455 4569 l  cp gs col33 1.00 shd ef gr  col33 s
% arrowhead
n 7395 4881 m 7425 4941 l 7455 4881 l 7395 4881 l  cp gs col33 1.00 shd ef gr  col33 s
% Polyline
gs  clippath
7395 1365 m 7455 1365 l 7455 1281 l 7425 1341 l 7395 1281 l cp
7455 885 m 7395 885 l 7395 969 l 7425 909 l 7455 969 l cp
eoclip
n 7425 900 m
 7425 1350 l gs col32 1.00 shd ef gr gs col33 s gr gr

% arrowhead
n 7455 969 m 7425 909 l 7395 969 l 7455 969 l  cp gs col33 1.00 shd ef gr  col33 s
% arrowhead
n 7395 1281 m 7425 1341 l 7455 1281 l 7395 1281 l  cp gs col33 1.00 shd ef gr  col33 s
% Polyline
n 6300 1350 m 8775 1350 l 8775 3150 l 6300 3150 l
 cp gs col32 1.00 shd ef gr gs col0 s gr 
% Polyline
n 6300 3825 m 8775 3825 l 8775 4500 l 6300 4500 l
 cp gs col32 1.00 shd ef gr gs col0 s gr 
% Polyline
gs  clippath
8295 3840 m 8355 3840 l 8355 3756 l 8325 3816 l 8295 3756 l cp
8355 3135 m 8295 3135 l 8295 3219 l 8325 3159 l 8355 3219 l cp
eoclip
n 8325 3150 m
 8325 3825 l gs col33 s gr gr

% arrowhead
n 8355 3219 m 8325 3159 l 8295 3219 l 8355 3219 l  cp gs col33 1.00 shd ef gr  col33 s
% arrowhead
n 8295 3756 m 8325 3816 l 8355 3756 l 8295 3756 l  cp gs col33 1.00 shd ef gr  col33 s
% Polyline
n 6120 3690 m
 7560 3690 l gs col0 s gr 
% Polyline
gs  clippath
7575 3630 m 7575 3570 l 7491 3570 l 7551 3600 l 7491 3630 l cp
6105 3570 m 6105 3630 l 6189 3630 l 6129 3600 l 6189 3570 l cp
eoclip
n 6120 3600 m
 7560 3600 l gs col33 s gr gr

% arrowhead
n 6189 3570 m 6129 3600 l 6189 3630 l 6189 3570 l  cp gs col33 1.00 shd ef gr  col33 s
% arrowhead
n 7491 3630 m 7551 3600 l 7491 3570 l 7491 3630 l  cp gs col33 1.00 shd ef gr  col33 s
$F2psEnd
rs

%%EndDocument
 @endspecial 0.742 0.000 0.000 TeXcolorrgb 783 2630 a
Fa(l)p Black 0.742 0.000 0.000 TeXcolorrgb 2429 2607
a(r)p Black 0.742 0.000 0.000 TeXcolorrgb 1676 3977 a(b)p
Black 0.742 0.000 0.000 TeXcolorrgb 1679 1496 a(t)p Black
0.742 0.000 0.000 TeXcolorrgb 1589 2961 a(w)p Black 0.742 0.000 0.000
TeXcolorrgb 3911 3670 a(f)p Black 0.742 0.000 0.000 TeXcolorrgb
3913 1780 a(h)p Black 0.742 0.000 0.000 TeXcolorrgb 3095
2583 a(m)p Black 0.742 0.000 0.000 TeXcolorrgb 2936 1922
a(w)p Black 0.742 0.000 0.000 TeXcolorrgb 3500 2985 a(l)p
Black 0.742 0.000 0.000 TeXcolorrgb 4341 3032 a(d)p Black
Black Black Black eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
") "ps") "0.5w" "0.5h" "" "") (document (concat (label "tm-page-fig") "Schematic representation of the layout of pages. On the left hand side, the parameters " (math "l") ", " (math "r") ", " (math "t") " and " (math "b") " respectively correspond to the left, right, top and bottom margins, and " (math "w") " corresponds to the paragraph width. On the right hand side, " (math "h") ", " (math "f") ", " (math "d") " and " (math "m") " correspond to the header, footer, footnote and marginal note separations, " (math "w") " to the width of marginal notes, and " (math "l") " to the length of the footnote bar."))))) (paragraph* "Page decorations") (explain (document (concat (label "header-footer-env") (var-val "page-odd-header" "")) (var-val "page-odd-footer" "") (var-val "page-even-header" "") (concat (var-val "page-even-footer" "") (explain-synopsis "header for odd pages"))) (document "These environment variables contain the header and footer texts for odd and even pages.")) (explain (document (var-val "page-head-sep" "8mm") (concat (var-val "page-foot-sep" "8mm") (explain-synopsis "separation between headers/fotters and text"))) (document (concat "These parameters determine the space between the main text and page headers and footers. They correspond to the " (math "h") " and " (math "f") " distances at the right hand side of figure " (reference "tm-page-fig") "."))) (explain (document (concat (var-val "page-fnote-sep" "1.0fn") (explain-synopsis "space between footnotes and text"))) (document (concat "The separation between the main text and footnotes, " (abbr "i.e.") " the distance " (math "d") " in figure " (reference "tm-page-fig") "."))) (explain (document (concat (var-val "page-fnote-barlen" "7.5fn") (explain-synopsis "length of footnote bars"))) (document "The length of the foornote bar.")) (explain (document (concat (var-val "page-float-sep" "1.5fn") (explain-synopsis "separation between floats and text"))) (document "The separation between the main text and floating objects.")) (explain (document (concat (var-val "page-mnote-sep" "5mm") (explain-synopsis "separation between marginal notes and text"))) (document "The separation between marginal notes and the main text (not implemented yet).")) (explain (document (concat (var-val "page-mnote-width" "15mm") (explain-synopsis "width of marginal notes"))) (document "The width of marginal notes (not implemented yet).")) (section "Table layout") (concat "The environment variables for tables can be subdivided in variables (prefixed by " (src-var "table-") ") which apply to the whole table and those (prefixed by " (src-var "cell-") ") which apply to individual cells. Whereas usual environment variables are set with " (markup "assign") " and " (markup "with") ", the tabular environment variables are rather set with the " (hlink (concat (markup "tformat") " primitive") "../devel/format/regular/prim-table.en.tm") ". This makes it possible to apply certain settings to any rectangular subtable of the entire table and in particular to rows or columns. For more details, see the " (hlink "documentation" "../devel/format/regular/prim-table.en.tm#table-twith") " of the " (markup "twith") " and " (markup "cwith") " primitives.") (paragraph* "Layout of the table as a whole") (explain (document (var-val "table-width" "") (concat (var-val "table-height" "") (explain-synopsis "hint for table dimensions"))) (document (concat "These parameters indicate a hint for the dimensions of the table. The " (src-var "table-hmode") " and " (src-var "table-vmode") " variables determine how to take into account these settings."))) (explain (document (var-val "table-hmode" "") (concat (var-val "table-vmode" "") (explain-synopsis "determination of table dimensions"))) (document (concat "These parameters specify how to determine the dimensions of the table. At the moment, the values of " (src-var "table-hmode") " and " (src-var "table-vmode") " are actually ignored and " (src-var "table-width") " and " (src-var "table-height") " are interpreted as the minimal width and height of the table."))) (explain (document (var-val "table-halign" "l") (concat (var-val "table-valign" "f") (explain-synopsis "alignment inside text"))) (document (concat "These parameters determine how the table should be aligned in the surrounding text. Possible values for " (src-var "table-halign") " are " (verbatim "l") " (left), " (verbatim "c") " (center) and " (verbatim "r") " (right), and possible values for " (src-var "table-valign") " are " (verbatim "t") " (top), " (verbatim "f") " (centered at fraction bar height), " (verbatim "c") " (center) and " (verbatim "b") " (bottom).") (concat "In addition to the above values, the alignment can take place with respect to the baselines of particular cells. Such values for " (src-var "table-halign") " are " (verbatim "L") " (align " (abbr "w.r.t.") " the left column), " (verbatim "C") " (align " (abbr "w.r.t.") " the middle column), " (verbatim "R") " (align " (abbr "w.r.t.") " the right column) and " (verbatim "O") " (align " (abbr "w.r.t.") " the priviledged origin column " (src-var "table-col-origin") "). Similarly, " (src-var "table-halign") " may take the additional values " (verbatim "T") " (align " (abbr "w.r.t.") " the top row), " (verbatim "C") " (align " (abbr "w.r.t.") " the middle row), " (verbatim "B") " (align " (abbr "w.r.t.") " the bottom row) and " (verbatim "O") " (align " (abbr "w.r.t.") " the priviledged origin row " (src-var "table-row-origin") ")."))) (explain (document (var-val "table-row-origin" "0") (concat (var-val "table-col-origin" "0") (explain-synopsis "priviledged cell"))) (document "Table coordinates of an priviledged ``origin cell'' which may be used for aligning the table in the surrounding text (see above).")) (explain (document (var-val "table-lsep" "0fn") (var-val "table-rsep" "0fn") (var-val "table-bsep" "0fn") (concat (var-val "table-tsep" "0fn") (explain-synopsis "padding around table"))) (document "Padding around the table (in addition to the padding of individual cells).")) (explain (document (var-val "table-lborder" "0ln") (var-val "table-rborder" "0ln") (var-val "table-bborder" "0ln") (concat (var-val "table-tborder" "0ln") (explain-synopsis "border around table"))) (document "Border width for the table (in addition to borders of the individual cells).")) (explain (document (concat (var-val "table-hyphen" "n") (explain-synopsis "allow for hyphenation?"))) (document (concat "A flag which specifies whether page breaks may occur at the middle of rows in the table. When " (src-var "table-hyphen") " is set to " (verbatim "y") ", then such page breaks may only occur when") (enumerate (document (concat (item) " The table is not surrounded by other markup in the same paragraph.") (concat (item) "The rows whether the page break occurs has no borders."))) (concat "An example of a tabular environment which allows for page breaks is " (markup "eqnarray*") "."))) (explain (document (var-val "table-min-rows" "") (var-val "table-min-cols" "") (var-val "table-max-rows" "") (concat (var-val "table-max-cols" "") (explain-synopsis "constraints on the table's size"))) (document (concat "It is possible to specify a minimal and maximal numbers of rows or columns for the table. Such settings constraint the behaviour of the editor for operations which may modify the size of the table (like the insertion and deletion of rows and columns). This is particularly useful for tabular macros. For instance, " (src-var "table-min-columns") " and " (src-var "table-max-columns") " are both set to " (math "3") " for the " (markup "eqnarray*") " environment."))) (paragraph* "Layout of the individual cells") (explain (document (concat (var-val "cell-background" "") (explain-synopsis "background color"))) (document "A background color for the cell.")) (explain (document (var-val "cell-width" "") (concat (var-val "cell-height" "") (explain-synopsis "hint for cell dimensions"))) (document (concat "Hints for the width and the height of the cell. The real width and height also depend on the modes " (src-var "cell-hmode") " and " (src-var "cell-vmode") ", possible filling (see " (src-var "cell-hpart") " and " (src-var "cell-vpart") " below), and, of course, on the dimensions of other cells in the same row or column."))) (explain (document (var-val "cell-hpart" "") (concat (var-val "cell-vpart" "") (explain-synopsis "fill part of unused space"))) (document (concat "When the sum " (math "s") " of the widths of all columns in a table is smaller than the width " (math "w") " of the table itself, then it should be specified what should be done with the unused space. The " (src-var "cell-hpart") " parameter specifies a part in the unusued space which will be taken by a particular cell. The horizontal part taken by a column is the maximum of the horizontal parts of its composing cells. Now let " (math (concat "p" (rsub "i"))) " the so determined part for each column (" (math (concat "i<in>" (around "{" "1,<ldots>,n" "}"))) "). Then the extra horizontal space which will be distributed to this column is " (math (concat "p" (rsub "i") "*" (around "(" "w-s" ")") "/" (around "(" (concat "p" (rsub "1") "+<cdots>+p" (rsub "n")) ")"))) ". A similar computation determines the extra vertical space which is distributed to each row."))) (explain (document (var-val "cell-hmode" "exact") (concat (var-val "cell-vmode" "exact") (explain-synopsis "determination of cell dimensions"))) (document (concat "These parameters specify how to determine the width and the height of the cell. If " (src-var "cell-hmode") " is " (verbatim "exact") ", then the width is given by " (src-var "cell-width") ". If " (src-var "cell-hmode") " is " (verbatim "min") " or " (verbatim "max") ", then the width is the minimul " (abbr "resp.") " maximum of " (src-var "cell-width") " and the width of the content. The height is determined similarly."))) (explain (document (var-val "cell-halign" "l") (concat (var-val "cell-valign" "B") (explain-synopsis "cell alignment"))) (document (concat "These parameters determine the horizontal and vertical alignment of the cell. Possible values of " (src-var "cell-halign") " are " (verbatim "l") " (left), " (verbatim "c") " (center), " (verbatim "r") " (right), " (verbatim ".") " (decimal dot), " (verbatim ",") " (decimal comma) and " (verbatim "R") " (vertical baseline). Possible values of " (src-var "cell-valign") " are " (verbatim "t") " (top), " (verbatim "c") " (center), " (verbatim "b") " (bottom) and " (verbatim "B") " (baseline)."))) (explain (document (var-val "cell-lsep" "0fn") (var-val "cell-rsep" "0fn") (var-val "cell-bsep" "0fn") (concat (var-val "cell-tsep" "0fn") (explain-synopsis "cell padding"))) (document "The amount of padding around the cell (at the left, right, bottom and top).")) (explain (document (var-val "cell-lborder" "0ln") (var-val "cell-rborder" "0ln") (var-val "cell-bborder" "0ln") (concat (var-val "cell-tborder" "0ln") (explain-synopsis "cell borders"))) (document (concat "The borders of the cell (at the left, right, bottom and top). The displayed border between cells " (math (concat "T" (rsub "i,j"))) " and " (math (concat "T" (rsub "i,j+1"))) " at positions " (math (around "(" "i,j" ")")) " and " (math (around "(" "i,j+1" ")")) " is the maximum of the borders between the right border of " (math (concat "T" (rsub "i,j"))) " and the left border of " (math (concat "T" (rsub "i,j+1"))) ". Similarly, the displayed border between cells " (math (concat "T" (rsub "i,j"))) " and " (math (concat "T" (rsub "i+1,j"))) " is the maximum of the bottom border of " (math (concat "T" (rsub "i,j"))) " and the top border of " (math (concat "T" (rsub "i+1,j"))) "."))) (explain (document (concat (var-val "cell-vcorrect" "a") (explain-synopsis "vertical correction of text"))) (document (concat "As described above, the dimensions and the alignment of a cell may depend on the dimensions of its content. When cells contain text boxes, the vertical bounding boxes of such text may vary as a function of the text (the letter ``k'' " (abbr "resp.") " ``y'' ascends " (abbr "resp.") " descends further than ``x''). Such differences sometimes leads to unwanted, non-uniform results. The vertical cell correction allows for a more uniform treatment of text of the same font, by descending and/or ascending the bounding boxes to a level which only depends on the font. Possible values for " (src-var "cell-vcorrect") " are " (verbatim "n") " (no vertical correction), " (verbatim "b") " (vertical correction of the bottom), " (verbatim "t") " (vertical correction of the top), " (verbatim "a") " (vertical correction of bottom and the top)."))) (explain (document (concat (var-val "cell-hyphen" "n") (explain-synopsis "allow for hyphenation inside cells"))) (document (concat "By default, the cells contain inline content which is not hyphenated. By selecting " (menu "Table" "Special cell properties" "Hyphenation" "Multi-paragraph") ", the cell contents becomes multi-paragraph. In that case, " (src-var "cell-hyphen") " determines how this content is hyphenated. Possible values are " (verbatim "n") " (disable line breaking) and " (verbatim "b") ", " (verbatim "c") " and " (verbatim "t") " (enable line breaking and align at the bottom, center " (abbr "resp.") " top line)."))) (explain (document (var-val "cell-row-span" "1") (concat (var-val "cell-col-span" "1") (explain-synopsis "span of a cell"))) (document (concat "Certain cells in a table are allowed to span over other cells at their right or below them. The " (src-var "cell-row-span") " and " (src-var "cell-col-span") " specify the row span and column span of the cell."))) (explain (document (concat (var-val "cell-decoration" "") (explain-synopsis "decorating table for cell"))) (document (concat "This environment variable may contain a decorating table for the cell. Such a decoration enlarges the table with extra columns and cells. The " (markup "tmarker") " primitive determines the location of the original decorated cell and its surroundings in the enlarged table are filled up with the decorations. Cell decorations are not really used at present and may disappear in future versions of " (TeXmacs) "."))) (explain (document (concat (var-val "cell-orientation" "portrait") (explain-synopsis "orientation of cell"))) (document (concat "Other orientations for cells than " (verbatim "portrait") " have not yet been implemented."))) (explain (document (var-val "cell-row-nr" "1") (concat (var-val "cell-col-nr" "1") (explain-synopsis "current cell position"))) (document "In the future, these environment variables should contain the current cell position during the typesetting process.")) (section "Editing source trees") (concat "The different rendering styles for source trees are described in more detail in the " (hlink "section" "../devel/style/presentation/src-present-global.en.tm") " about the global presentation of source trees. The corresponding environment variables are briefly described here.") (explain (document (concat (var-val "src-style" "angular") (explain-synopsis "rendering style for source tags"))) (document (concat "The principal rendering style for source trees as specified in " (menu "Document" "Source" "Style") ". Possible values are " (verbatim "angular") ", " (verbatim "scheme") ", " (verbatim "functional") " and " (verbatim "latex") "."))) (explain (document (concat (var-val "src-special" "normal") (explain-synopsis "how to render special tags"))) (document (concat "How to render special tags like " (markup "concat") ", " (markup "document") ", " (markup "compound") ", " (abbr "etc.") ", as specified in " (menu "Document" "Source" "Special") ". Possible values are " (verbatim "raw") ", " (verbatim "format") ", " (verbatim "normal") " and " (verbatim "maximal") "."))) (explain (document (concat (var-val "src-compact" "normal") (explain-synopsis "compactication level"))) (document (concat "How compact should tags be rendered, as specified in " (menu "Document" "Source" "Compactification") ". Possible values are " (verbatim "none") ", " (verbatim "inline") ", " (verbatim "normal") ", " (verbatim "inline tags") " and " (verbatim "all") "."))) (explain (document (concat (var-val "src-close" "compact") (explain-synopsis "closing style for long tags"))) (document (concat "The rendering style of closing tags as specified in " (menu "Document" "Source" "Closing style") ". Possible values are " (verbatim "repeat") ", " (verbatim "long") ", " (verbatim "compact") " and " (verbatim "minimal") "."))) (section "Miscellaneous environment variables") "The following miscellaneous environment variables are mainly intended for internal use:" (explain (document (concat (var-val "save-aux" "true") (explain-synopsis "save auxiliary content"))) (document "This flag specifies whether auxiliary content has to be saved along with the document.")) (explain (document (concat (var-val "sfactor" "5") (explain-synopsis "shrinking factor"))) (document "The shrinking factor which is used for rendering.")) (explain (document (concat (var-val "par-no-first" "false") (explain-synopsis "disable first indentation for next paragraph?"))) (document "This flag disables first indentation for the next paragraph.")) (explain (document (concat (src-var "cell-format") (explain-synopsis "current cell format"))) (document "This variable us used during the typsetting of tables in order to store the with-settings which apply to the current cell.")) (explain (document (src-var "atom-decorations") (src-var "line-decorations") (src-var "page-decorations") (src-var "xoff-decorations") (concat (src-var "yoff-decorations") (explain-synopsis "auxiliary variables for decorations"))) (document "These environment variables store auxiliary information during the typsetting of decorations.")) (chapter (concat "Built-in " (TeXmacs) " primitives")) (concat "In this chapter, we describe those built-in " (TeXmacs) " primitives which are intended to be used in normal documents. The additional primitives which are used for writing style files are described in a separate chapter.") (section "Fundamental primitives") (explain (concat (explain-macro "document" "par-1" (math "<cdots>") "par-n") (explain-synopsis "vertical sequence of paragraphs")) (document "This primitive is used for sequences of logical paragraphs. A simple, plain text document is made of a sequence of paragraphs. For instance," (tm-fragment (document "A simple document." "Made of several paragraphs. The second paragraph is very long, so that it is hyphenated across several line.")) (concat "is internally represented as a " (markup "document") " with two subtrees:") (tm-fragment (document (with "src-special" "raw" (inactive* (document "A simple document." "Made of several paragraphs. The second paragraph is very long, so that it is hyphenated across several line."))))) (concat "From the visual point of view, different paragraphs are often separated by some vertical whitespace. Alternatively, new paragraphs are indicated through the use of an additional indentation. The root of a " (TeXmacs) " document is usually a " (markup "document") " node.") (concat "The " (markup "document") " tag is also used for marking multi-paragraph content inside other tags, such lists or theorem-like environments. Environments which require the use of a " (markup "document") " tag for at least one argument are called ``block environments''."))) (explain (concat (explain-macro "paragraph" "unit-1" (math "<cdots>") "unit-n") (explain-synopsis "vertical sequence of paragraph units")) (document (concat "This not yet implemented primitive is a variant of " (markup "document") ". While a document is made up of logical paragraphs, a paragraph is made up of ``paragraph units''. From a visual point of view, different paragraphs are singled out using some additional space or indentation. New paragraph units rather correspond to simple new lines. Typically, displayed equations are also paragraph units in a larger paragraph."))) (explain (concat (explain-macro "concat" "item-1" (math "<cdots>") "item-n") (explain-synopsis "horizontal sequence of inline markup")) (document "This primitive is used for sequences of line items, also called ``inline content''. For instance," (tm-fragment (document (concat "Some " (em "emphasized") " text."))) "is internally represented as:" (tm-fragment (document (with "src-special" "raw" (inactive* (concat "Some " (em "emphasized") " text."))))) (concat "The " (markup "concat") " operator is essential to put compound structures in trees taking multiple parameters. For example, let us place the previous fragment in a multi-paragraph context:") (tm-fragment (document "Multiple paragraphs." (concat "Some " (em "emphasized") " text."))) (concat "In this example, we need the " (markup "concat") " tag in order to indicate that ``Some " (em "emphasized") " text.'' correponds to a single paragraph:") (tm-fragment (document (with "src-special" "raw" (inactive* (document "A simple document." (concat "Some " (em "emphasized") " text.")))))) (concat "Notice that block tags like " (markup "document") " may contain inline tags such as " (markup "concat") " as its children, but not " (em "vice versa") ". In order to typeset line content before or after block content, one has to use the " (markup "surround") " tag below."))) (explain (document (concat (explain-macro "surround" "left" "right" "body") (explain-synopsis "surround block content with inline content"))) (document (concat "Although it is not possible in " (TeXmacs) " to use block content inside horizontal concatenations, it is sometimes useful to add some additional inline content before or after a block environment. The " (markup "surround") " primitive serves this purpose, by adding a " (src-arg "left") " and " (src-arg "right") " surrounding to some block content " (src-arg "body") ". For instance,") (tm-fragment (document (inactive* (document (surround (active* (concat (math (with "color" "red" "<lightning>")) " ")) "" (document (theorem (document (active* (concat "Given " (math (concat "P<in><bbb-T>" (around "{" "F" "}"))) " and " (math "f<less>g<in><bbb-T>") " with " (math (concat "P" (around "(" "f" ")") "*P" (around "(" "g" ")") "<less>0")) ", there exists an " (math "h<in><bbb-T>") " with " (math (concat "P" (around "(" "h" ")") "=0")) ".")))))))))) "produces" (tm-fragment (document (surround (concat (math (with "color" "red" "<lightning>")) " ") "" (document (theorem (document (concat "Given " (math (concat "P<in><bbb-T>" (around "{" "F" "}"))) " and " (math "f<less>g<in><bbb-T>") " with " (math (concat "P" (around "(" "f" ")") "*P" (around "(" "g" ")") "<less>0")) ", there exists an " (math "h<in><bbb-T>") " with " (math (concat "P" (around "(" "h" ")") "=0")) "."))))))) (concat "In general, the " (markup "surround") " is mainly used in style files, but it occasionally turns out to be useful in regular documents as well."))) (section "Formatting primitives") (subsection "White space primitives") (explain (document (explain-macro "vspace" "len") (concat (explain-macro "vspace" "len" "min" "max") (explain-synopsis "vertical space after"))) (document (concat "This primitive inserts an elastic vertical space after the current paragraph. All operands must be " (hlink "length values" "../devel/format/language/lengths.en.tm") ". The " (src-arg "len") " argument specifies the default length and the " (src-arg "min") " and " (src-arg "max") " arguments the bounds to vertical stretching for page breaking and filling. If " (src-arg "min") " and " (src-arg "max") " are not specified, then they are determined implicitly from the length unit of " (src-arg "len") ".") "Notice that operands are not evaluated, so they must be literal strings.")) (explain (document (explain-macro "vspace*" "len") (concat (explain-macro "vspace*" "len" "min" "max") (explain-synopsis "vertical space before"))) (document (concat "This primitive is similar to " (markup "vspace") ", except that the vertical space is inserted " (em "before") " the current paragraph. The actual vertical space between two consecutive paragraphs is the " (em "maximum") ", not the sum, of the vertical spaces specified by the the " (markup "vspace") " and " (markup "vspace*") " tags in the surrounding paragraphs."))) (explain (document (explain-macro "space" "len") (concat (explain-macro "space" "len" "bot" "top") (explain-synopsis "rigid horizontal space"))) (document (concat "This primitive inserts an empty box whose width is " (src-arg "len") ", and whose bottom and top sides are at distances " (src-arg "bot") " and " (src-arg "top") " from the baseline.") (concat "If " (src-arg "bot") " and " (src-arg "top") " are not specified, then an empty box is inserted whose bottom is on the baseline and whose height is the same as the lowercase letter " (samp "x") " in the current font.") "Notice that operands are not evaluated, so they must be literal strings.")) (explain (document (explain-macro "hspace" "len") (concat (explain-macro "hspace" "len" "min" "max") (explain-synopsis "stretchable horizontal space"))) (document (concat "This primitive inserts a stretchable horizontal space of nominal width " (src-arg "len") ", which must be a " (hlink "length value" "../devel/format/language/lengths.en.tm") ". The " (src-arg "min") " and " (src-arg "max") " arguments specify bounds to horizontal stretching for line breaking and filling. If " (src-arg "min") " and " (src-arg "max") " are not specified, then they are determined implicitly from the length unit of " (src-arg "len") ".") "Notice that operands are not evaluated, so they must be literal strings.")) (explain (document (explain-macro "htab" "min") (concat (explain-macro "htab" "min" "weight") (explain-synopsis "horizontal spring"))) (document "Springs are horizontal spaces which extend so the containing paragraph takes all the available horizontal space. When a paragraph is line wrapped, split in several visual lines, only springs in the last line are extended." (concat "A spring has a " (em "minimal width") " and a " (em "weight") ". If the weight is 0, the spring is " (em "weak") ", otherwise it is " (em "strong") ". If a line contains mixed weak and strong springs, only the strong springs extend. ") "The fraction of the available horizontal space taken up by each strong spring is proportional to its weight. If there are only weak springs, they share the available space evenly." (indent (document (concat (explain-macro "htab" "min") " inserts a strong spring of minimal width " (src-arg "min") " and of weight unity. The " (src-arg "min") " operand must be a " (hlink "length value" "../devel/format/language/lengths.en.tm") ".") (concat (explain-macro "htab" "min" "weight") " specifies the weight, which can be a positive decimal number or one of the two special values documented below.") (concat (explain-macro "htab" "min" (src-value "first")) " inserts a " (em "tail weak") " spring, only the first one in a paragraph is significant.") (concat (explain-macro "htab" "min" (src-value "last")) " inserts a " (em "head weak") " spring, only the last one in a paragraph is significant."))) "Operands are not evaluated and must be literal strings." "Weak springs are useful in style-sheets. For example, tail weak springs are used to make the list environment extend to across the full paragraph, so vertical motion commands in nested lists behave as expected. In regular documents, springs are often used to place some text on the right side of the page and some other text on the left side.")) (subsection "Line breaking primitives") (concat "A simple document is a sequence of " (def-index "logical paragraphs") ", one for each subtree of a " (markup "document") " or " (markup "paragraph") " node. Paragraphs whose width exceed the available horizontal space are broken into " (em "physical lines") " by the hyphenation algorithm. By default, hyphenated lines are justified: horizontal spaces can be shrunk or extended in order to produce a good-looking layout.") (explain (document (concat (explain-macro "new-line") (explain-synopsis "start a new paragraph"))) (document "This is a deprecated tag in order to split a logical paragraph into several logical paragraphs without creating explicit subtrees for all paragraphs." "We recall that logical paragraphs are important structures for the typesetting process. Many primitives and environment variables (vertical spacing, paragraph style, indentation, page breaking, etc.) operate on whole paragraphs or at the boundaries of the enclosing paragraph.")) (explain (document (concat (explain-macro "next-line") (explain-synopsis "start a new line"))) (document (concat "This is a tag which will become deprecated as soon as the " (markup "paragraph") " primitive will be correctly implemented. Its usage is similar to the " (markup "new-line") " tag with the difference that we start a new logical paragraph unit instead of a new logical paragraph.") (concat "Currently, the " (markup "next-line") " tag can also be used in order to force a line break with the additional property that the line before the break is not justified or filled."))) (explain (document (concat (explain-macro "line-break") (explain-synopsis "line breaking hint, with filling"))) (document (concat "Print an invisible space with zero hyphenation penalty. The line breaking algorithm searches for the set of hyphenation points minimizing the total penalty, so line breaking is much more likely to occur at a " (markup "line-break") " than anywhere else in its vicinity.") (concat "Unlike " (markup "next-line") ", this is a hint which may or may not be obeyed by the typesetter, and it does not prevent the previous line from being filled."))) (explain (document (concat (explain-macro "no-break") (explain-synopsis "forbid line breaking at this point"))) (document (concat "Set an hyphenation point with an infinite penalty. That is useful when the hyphenation patterns for a language fall short of preventing some forbidden patterns like ``arse-nal'' or ``con-genital''. An alternative way to prevent breaks is to use the " (markup "rigid") " tag."))) (subsection "Indentation primitives") (concat "There are two main ways to distinguish between successive paragraphs: separate them by a small vertical space, or use an indentation for each new paragraph. The indentation can be explicitly controlled using the " (markup "no-indent") ", " (markup "yes-indent") ", " (markup "no-indent*") " and " (markup "yes-indent*") " tags. The " (markup "no-indent") " and " (markup "yes-indent") " primitives apply to the current paragraph, while the " (markup "no-indent*") " and " (markup "yes-indent*") " apply the next paragraph.") (explain (document (explain-macro "no-indent") (explain-macro "yes-indent")) (document "Disable or enable indentation for the current paragraph. For instance, the code" (tm-fragment (document (inactive* (document (concat (no-indent) "This is a long paragraph which demonstrates the disabling indentation using the " (markup "no-indent") " primitive.") (concat (yes-indent) "This is a long paragraph which demonstrates enabling indentation using the " (markup "yes-indent") " primitive."))))) "typically produces" (tm-fragment (document (with "par-first" "2fn" (document (concat (no-indent) "This is a long paragraph which demonstrates the disabling indentation using the " (markup "no-indent") " primitive.") (concat (yes-indent) "This is a long paragraph which demonstrates enabling indentation using the " (markup "yes-indent") " primitive."))))))) (explain (document (explain-macro "no-indent*") (explain-macro "yes-indent*")) (document "Disable or enable indentation for the next paragraph. For instance," (tm-fragment (document (inactive* (document (concat "A first paragraph." (yes-indent*)) "A second paragraph.")))) "typically produces" (tm-fragment (document (with "par-first" "2fn" (document (concat "A first paragraph." (yes-indent*)) "A second paragraph.")))) (concat "Notice that " (markup "no-indent") " and " (markup "yes-indent") " override " (markup "no-indent*") " and " (markup "yes-indent*") " directives in the previous paragraph.") (concat "Currently, the " (markup "no-indent*") " and " (markup "yes-indent*") " tags are mainly used in order to control the indentation after section titles or environments like " (markup "equation") " which usually correspond to paragraph units. In the future, when sectional tags will take the section bodies as arguments, and when the " (markup "paragraph") " tag will be correctly implemented, the " (markup "no-indent*") " and " (markup "yes-indent*") " will become deprecated."))) (subsection "Page breaking primitives") (concat "The physical lines in a document are broken into pages in a way similar to how paragraphs are hyphenated into lines. The page breaker performs " (def-index "page filling") ", it tries to distribute page items evenly so text runs to the bottom of every page. It also tries to avoid " (def-index "orphans and widows") ", which are single or pairs of soft lines separated from the rest of their paragraph by a page break, but these can be produced when there is no better solution.") (explain (document (concat (explain-macro "no-page-break") (explain-synopsis "prevent automatic page breaking after this line"))) (document (concat "Prevent the occurrence of an automatic page break after the current line. Set an infinite page breaking penalty for the current line, similarly to " (markup "no-break") ".") "Forbidden page breaking points are overridden by ``new page'' and ``page break'' primitives.")) (explain (document (concat (explain-macro "no-page-break*") (explain-synopsis "prevent automatic page breaking before this line"))) (document (concat "Similar to " (markup "no-page-break") ", but set the page breaking penalty of the previous line."))) (explain (document (concat (explain-macro "new-page") (explain-synopsis "start a new page after this line"))) (document "Cause the next line to appear on a new page, without filling the current page. The page breaker will not try to position the current line at the bottom of the page.")) (explain (document (concat (explain-macro "new-page*") (explain-synopsis "start a new page before this line"))) (document (concat "Similar to " (markup "new-page") ", but start the new page before the current line. This directive is appropriate to use in chapter headings."))) (explain (document (concat (explain-macro "page-break") (explain-synopsis "force a page break after this line"))) (document "Force a page break after the current line. A forced page break is different from a new page, the page breaker will try to position the current line at the bottom of the page." (concat "Use only to fine-tune the automatic page breaking. Ideally, this should be a hint similar to " (markup "line-break") ", but this is implemented as a directive, use only with extreme caution."))) (explain (document (concat (explain-macro "page-break*") (explain-synopsis "force a page break before this line"))) (document (concat "Similar to " (markup "page-break") ", but force a page break before the current line."))) (concat "When several new page and page break directives apply to the same point in the document, only the first one is effective. Any " (markup "new-page") " or " (markup "page-break") " after the first one in a line is ignored. Any " (markup "new-page") " or " (markup "page-break") " in a line overrides any " (markup "new-page*") " or " (markup "page-break*") " in the following line. Any " (markup "new-page*") " or " (markup "page-break*") " after the first one in a line is ignored.") (subsection "Box operation primitives") (explain (document (concat (explain-macro "move" "content" "delta-x" "delta-y") (explain-synopsis "adjust position"))) (document (concat "This primitive moves the box with the specified " (src-arg "content") " by " (src-arg "delta-x") " to the right and " (rigid (src-arg "delta-y")) " upwards. It may be used for fine-grained positioning. During the evaluation of " (src-arg "delta-x") " and " (src-arg "delta-y") ", the " (hlink "box lengths" "../devel/format/basics/lengths.en.tm#box-lengths") " " (verbatim "w") ", " (verbatim "h") ", " (verbatim "l") ", " (verbatim "r") ", " (verbatim "b") " and " (verbatim "t") " of " (src-arg "content") " are defined."))) (explain (document (concat (explain-macro "shift" "content" "delta-x" "delta-y") (explain-synopsis "shift contents, not the bounding box"))) (document (concat "This primitive is similar to " (markup "move") ", except that the bounding box of the shifted " (src-arg "content") " is the same as the bounding box of the original " (src-arg "content") "."))) (explain (document (concat (explain-macro "resize" "content" "left-lim" "bot-lim" "right-lim" "top-lim") (explain-synopsis "adjust size"))) (document (concat "Resize the box for the " (src-arg "content") " according to new left, bottom, right and top limits " (src-arg "left-lim") ", " (src-arg "bot-lim") ", " (src-arg "right-lim") " and " (src-arg "top-lim") ". The limits may be specified in terms of the " (hlink "box lengths" "../devel/format/basics/lengths.en.tm#box-lengths") " " (verbatim "w") ", " (verbatim "h") ", " (verbatim "l") ", " (verbatim "r") ", " (verbatim "b") " and " (verbatim "t") " of " (src-arg "content") ". For instance, the code") (tm-fragment (document (inactive* (concat "(" (resize "Hopsa" (minus "1l" "5mm") "" (plus "1r" "5mm") "") ")")))) (concat "widens the box for ``Hopsa'' by " (verbatim "5mm") " on each side:") (tm-fragment (document (concat "(" (resize "Hopsa" (minus "1l" "5mm") "" (plus "1r" "5mm") "") ")"))))) (explain (document (concat (explain-macro "clipped" "content" "left-lim" "bot-lim" "right-lim" "top-lim") (explain-synopsis "adjust size and clip"))) (document (concat "This primitive is similar to " (markup "resize") ", except that the " (src-arg "content") " is clipped so as to fit in the specified new bounding box."))) (explain (document (concat (explain-macro "if*" "condition" "content") (explain-synopsis "conditional appearance of box"))) (document (concat "The box with the " (src-arg "content") " is displayed as usual if the " (src-arg "condition") " is satisfied and displayed as whitespace otherwise. This primitive is used in particular for the definition of the " (markup "phantom") " macro. For instance, the non-text ``" (if* "false" "phantom") "'' is produced using " (inactive* (if* "false" "phantom")) "."))) (explain (document (concat (explain-macro "repeat" "content" "pattern") (explain-synopsis "fill line"))) (document (concat "This primitive can be used to decorate some " (src-arg "content") " with a given " (src-arg "pattern") ". For instance, when defining the macro") (tm-fragment (document (inactive* (assign "wipe-out" (macro "x" (repeat (arg "x") (with "color" "red" "/"))))))) (concat "the code " (inactive* (wipe-out "obsolete")) " produces " (with "wipe-out" (macro "x" (repeat (arg "x") (with "color" "red" "/"))) (wipe-out "obsolete")) ". The " (markup "repeat") " primitive may also be used to fill the current line with a given content, like the dots in tables of contents." (repeat (htab "5mm") "...")))) (explain (document (explain-macro "datoms" "foo" "content") (explain-macro "dlines" "foo" "content") (concat (explain-macro "dpages" "foo" "content") (explain-synopsis "decorations"))) (document (concat "These primitives are used to decorate " (em "a posteriori") " the lines of a paragraph, the lines of a page, or the pages of a document. Currently, only decorations of atoms on lines of a paragraph have been implemented.") (concat "The first argument " (src-arg "foo") " is a macro which will be applied to all boxes in the line and the second argument " (src-arg "content") " is the part of the paragraph to which the decoration will be applied. For instance, the construction") (tm-fragment (document (inactive* (style-with "src-compact" "none" (datoms (macro "x" (active* (block (tformat (table (row (cell (arg "x")))))))) (arg "body")))))) "may be used in order to visualize the boxes in a given paragraph:" (quote-env (document (datoms (macro "x" (active* (block (tformat (table (row (cell (arg "x")))))))) "Here is a sufficiently long paragraph. Here is a sufficiently long paragraph. Here is a sufficiently long paragraph. Here is a sufficiently long paragraph. Here is a sufficiently long paragraph. Here is a sufficiently long paragraph."))) (concat "When used in combination with the " (markup "repeat") " primitive, one may for instance produce the dotted lines in tables of contents using the macro") (tm-fragment (document (inactive* (style-with "src-compact" "none" (assign "toc-dots" (macro (style-with "src-compact" "none" (datoms (macro "x" (repeat (arg "x") (concat (space "0.2fn") "." (space "0.2fn")))) (htab "5mm"))))))))) (concat "Notice that the " (markup "datoms") " primitive is quite fragile, because the " (src-arg "foo") " macro has no access to the environment in which " (src-arg "content") " is typeset."))) (section "Mathematical primitives") (explain (document (explain-macro "left" "large-delimiter") (explain-macro "left" "large-delimiter" "size") (explain-macro "left" "large-delimiter" "bottom" "top") (explain-macro "mid" "large-delimiter" (math "<cdots>")) (concat (explain-macro "right" "large-delimiter" (math "<cdots>")) (explain-synopsis "large delimiters"))) (document "These primitives are used for producing large delimiters, like in the formula" (equation* (document (concat (around* "<langle>" (concat (frac "1" (concat "a" (rsub "1"))) (mid "|") (frac "1" (concat "a" (rsub "2"))) (mid "|") "<cdots>" (mid "|") (frac "1" (concat "a" (rsub "n")))) "<rangle>") "."))) (concat "Matching left and right delimiters are automatically sized so as contain the enclosed expression. Between matching left and right delimiters, the formula may contain an arbitrary number of middle delimiters, which are sized in a similar way. Contrary to " (TeX) ", the depth of a large delimiter is not necessarily equal to its height, so as to correctly render formulas like") (equation* (document (concat "f" (around* "(" (frac "1" (concat "x+" (frac "1" (concat "y+" (frac "1" "z"))))) ")")))) (concat "The user may override the automatically determined size by specifying additional length parameters " (src-arg "size") " or " (src-arg "bottom") " and " (src-arg "top") ". For instance,") (tm-fragment (document (inactive* (concat "f" (left "(" "-8mm" "4mm") "x" (mid "|" "8mm") "y" (right ")" "-4mm" "8mm"))))) "is rendered as" (equation* (document (concat "f" (around* "(" (concat "x" (mid "|" "8mm") "y") ")")))) (concat "The " (src-arg "size") " may also be a number " (math "n") ", in which case the " (math "n") "-th available size for the delimiter is taken. For instance,") (tm-fragment (document (inactive* (concat "g" (left "(" "0") (left "(" "1") (left "(" "2") (left "(" "3") "z" (right ")" "3") (right ")" "2") (right ")" "1") (right ")" "0"))))) "is rendered as" (equation* (document (concat "g" (around* "(" (around* "(" (around* "(" (around* "(" "z" ")") ")") ")") ")")))))) "" (explain (document (concat (explain-macro "big" "big-symbol") (explain-synopsis "big symbols"))) (document "This primitive is used in order to produce big operators as in" (equation (document (concat (label "big-example") (big "sum") (rsub "i=0") (rsup "<infty>") "a" (rsub "i") "*z" (rsup "i")))) (concat "The size of the operator depends on whether the formula is rendered in ``display style'' or not. Formulas in separate equations, like (" (reference "big-example") "), are said to be rendered in display style, contrary to formulas which occur in the main text, like " (math (concat (big "sum") (rsub "i=0") (rsup "<infty>") "a" (rsub "i") "*z" (rsup "i"))) ". The user may use " (menu "Format" "Display style") " to override the current settings.") (concat "Notice that the formula (" (reference "big-example") ") is internally represented as") (tm-fragment (document (inactive* (concat (big "sum") (rsub "i=0") (rsup "<infty>") "a" (rsub "i") "*z" (rsup "i") (big "."))))) (concat "The invisible big operator " (inactive* (big ".")) " is used to indicate the end of the scope of " (inactive* (big "sum")) "."))) (explain (document (concat (explain-macro "frac" "num" "den") (explain-synopsis "fractions"))) (document (concat "The " (markup "frac") " primitive is used in order to render fractions like " (math (frac "x" "y")) ". In display style, the numerator " (src-arg "num") " and denominator " (src-arg "den") " are rendered in the normal size, but display style is turned of when typesetting " (src-arg "num") " and " (src-arg "den") ". When the display style is turned of, then the arguments are rendered in script size. For instance, the content") (tm-fragment (document (inactive* (frac "1" (concat "a" (rsub "0") "+" (frac "1" (concat "a" (rsub "1") "+" (frac "1" (concat "a" (rsub "2") "+<ddots>"))))))))) "is rendered in display style as" (equation* (document (frac "1" (concat "a" (rsub "0") "+" (frac "1" (concat "a" (rsub "1") "+" (frac "1" (concat "a" (rsub "2") "+<ddots>")))))))))) (explain (document (explain-macro "sqrt" "content") (concat (explain-macro "sqrt" "content" "n") (explain-synopsis "roots"))) (document (concat "The " (markup "sqrt") " primitive is used in order to render square roots like " (math (sqrt "x")) " or " (src-arg "n") "-th roots like " (math (sqrt "x" "3")) ". The root symbol is automatically sized so as to encapsulate the " (src-arg "content") ":") (equation* (document (sqrt (frac (concat "f" (around "(" "x" ")")) (concat "y" (rsup "2") "+z" (rsup "2"))) "i+j"))))) (explain (document (explain-macro "lsub" "script") (explain-macro "lsup" "script") (explain-macro "rsub" "script") (concat (explain-macro "rsup" "script") (explain-synopsis "scripts"))) (document (concat "These primitives are used in order to attach a " (src-arg "script") " to the preceeding box in a horizontal concatenation (in the case of right scripts) or the next one (in the case of left scripts). When there is no such box, then the script is attached to an empty box. Moreover, when both a subscript and a superscript are specified on the same side, then they are merged together. For instance, the expression") (tm-fragment (document (inactive* (concat (rsub "a") (rsup "b") "+" (lsub "1") (lsup "2") "x" (rsub "3") (rsup "4") "=y" (rsub "1") "+" (lsub "c"))))) "is rendered as" (equation* (document (concat (rsub "a") (rsup "b") "+" (lsub "1") (lsup "2") "x" (rsub "3") (rsup "4") "=y" (rsub "1") "+" (lsub "c")))) "When a right script is attached to an operator (or symbol) which accepts limits, then it is rendered below or above instead of beside the operator:" (equation* (document (concat "lim" (rsub "n<rightarrow><infty>") "a" (rsub "n")))) "Scripts are rendered in a smaller font in non-display style. Nevertheless, in order to keep formulas readable, the size is not reduced below script-script-size.")) (explain (document (explain-macro "lprime" "prime-symbols") (concat (explain-macro "rprime" "prime-symbols") (explain-synopsis "primes"))) (document (concat "Left and right primes are similar to left and right superscripts, except that they behave in a different way when being edited. For instance, when your cursor is behind the prime symbol in " (math (concat "f" (rprime "'"))) " and you press backspace, then the prime is removed. If you are behind " (math (concat "f" (rsup "n"))) " and you press backspace several times, then you first enter the superscript, next remove " (math "n") " and finally remove the superscript. Notice also that " (src-arg "prime-symbols") " is necessarily a string of concatenated prime symbols. For instance, " (math (concat "f" (rprime "'<dag>"))) " is represented by " (inactive* (concat "f" (rprime "'<dag>"))) "."))) (explain (document (explain-macro "below" "content" "script") (concat (explain-macro "above" "content" "script") (explain-synopsis "scripts above and below"))) (document (concat "The " (markup "below") " and " (markup "above") " tags are used to explicitly attach a " (src-arg "script") " below or above a given " (src-arg "content") ". Both can be mixed in order to produce content with both a script below and above:") (equation* (document (concat (above (below "xor" "i=1") "<infty>") " x" (rsub "i")))) "can be produced using" (tm-fragment (document (inactive* (concat (above (below "xor" "i=1") "<infty>") " x" (rsub "i"))))))) (explain (document (explain-macro "wide" "content" "wide-symbol") (concat (explain-macro "wide*" "content" "wide-symbol") (explain-synopsis "wide symbols"))) (document (concat "These primitives can be used in order to produce wide accents above or below some mathematical " (src-arg "content") ". For instance " (math (wide "x+y" "<bar>")) " corresponds to the markup " (inactive* (wide "x+y" "<bar>")) "."))) (explain (document (concat (explain-macro "neg" "content") (explain-synopsis "negations"))) (document (concat "This primitive is mainly used for producing negated symbols or expressions, such as " (math (neg "<rightarrowtail>")) " or " (math (neg "a")) "."))) (explain (document (concat (explain-macro "tree" "root" "child-1" (math "<cdots>") "child-n") (explain-synopsis "trees"))) (document (concat "This primitive is used to produce a tree with a given " (src-arg "root") " and children " (src-arg "child-1") " until " (src-arg "child-n") ". The primitive should be used recursively in order to produce trees. For instance,") (equation* (document (tree "+" "x" "y" (tree "<times>" "2" "y" "z")))) "corresponds to the markup" (tm-fragment (document (inactive* (tree "+" "x" "y" (tree "<times>" "2" "y" "z"))))) "In the future, we plan to provide further style parameters in order to control the rendering.")) (section "Table primitives") (concat "Tables are always present in documents inside evaluable tags which take a " (markup "tformat") " operand. All fundamental table structures have inaccessible borders. The basic top-level table tag is " (markup "tabular") ".") (explain (document (concat (explain-macro "tformat" "with-1" (math "<cdots>") "with-n" "table") (explain-synopsis "table formatting container"))) (document (concat "Every tabular structure in a document contains a " (markup "tformat") " tag.") (concat (explain-macro "tformat" "table") " means the table and cell variables defined in the top-level table tag are not modified. The " (src-arg "table") " argument may be a " (markup "table") " or a nested " (markup "tformat") " tag, the latter does not appear in documents but is produced by the evaluation of the top-level tag.") (concat (explain-macro "tformat" "with-1" (math "<cdots>") "with-n" "table") " is used when the table contains specific formatting information. The " (src-arg "with-1") " to " (src-arg "with-n") " arguments must all be " (markup "twith") " or " (markup "cwith") " tags."))) (explain (document (concat (label "table-twith") (explain-macro "twith" "var" "val") (explain-synopsis "set a table variable"))) (document (concat "The formatting of the table as a whole is specified by a number of " (em "table variables") ", which are used internally and do not appear in the environment like regular typesetter variables.") (concat "The " (markup "twith") " primitive sets the table variable " (src-arg "var") " (literal string) to the value " (src-arg "val") " (evaluated)."))) (explain (document (concat (label "table-cwith") (explain-macro "cwith" "top-row" "bot-row" "left-col" "right-col" "var" "val") (explain-synopsis "set a cell variable for a range"))) (document (concat "The formatting of cells is specified by a number of " (em "cell variables") ", which are used internally and do not appear in the environment like regular typesetter variables. Rows, columns, and generally any rectangular range of cells can associated to a cell variable setting by a single " (markup "cwith") " tag.") (concat "The " (markup "cwith") " primitive sets the cell variable " (src-arg "var") " (literal string) to the value " (src-arg "val") " (evaluated) for the range of cells spanning rows " (src-arg "top-row") " to " (src-arg "bot-row") " and columns " (src-arg "left-col") " to " (src-arg "right-col") " (literal non-zero integers).") "Range coordinates must be non-zero literal integers, positive values are counted left to right and top to bottom, negative values are counted right to left and bottom to top. For example, 2 means the second row or column and -1 means the last row or column." (concat "Typical values for " (math (concat "(" (text (src-arg "top-row")) "," (text (src-arg "bot-row")) "," (text (src-arg "left-col")) "," (text (src-arg "right-col")) ")")) " are " (math (around "(" (concat "r,r," (op "") "1," (op "-") "1") ")")) " for ``row " (math "r") "'', " (math (around "(" (concat (op "") "1," (op "-") "1,c,c") ")")) " for ``column " (math "c") "'', and " (math (around "(" "r,r,c,c" ")")) " for ``the cell at row " (math "r") ", column " (math "c") "''. When new cells are inserted, it makes a difference whether the rows are counted from the top or bottom, and the columns are counted from the left or right. If " (math "m") " is the number of rows and " (math "n") " the number of columns, then " (math "r") " and " (math "r-m-1") " represent the same row" (emdash) "the former is relative to the top border while the latter is relative the bottom border. Similarly, " (math "c") " and " (math "c-n-1") " represent the same column."))) (explain (document (concat (explain-macro "table" "row-1" (math "<cdots>") "row-n") (explain-synopsis "row container"))) (document (concat "The only purpose of the " (markup "table") " tag is to contain " (markup "row") " tags. The number of rows in a table is the number of subtrees in its " (markup "table") " tag."))) (explain (document (concat (explain-macro "row" "cell-1" (math "<cdots>") "cell-k") (explain-synopsis "cell container"))) (document (concat "The only purpose of the " (markup "row") " tag is to contain " (markup "cell") " tags. All " (markup "row") " tags in a given " (markup "table") " must have exactly as many subtrees, all " (markup "cell") " tags, as there are columns in the table."))) (explain (document (concat (explain-macro "cell" "content") (explain-synopsis "cell data container"))) (document (concat "Table cells can contain any document fragment. A " (markup "cell") " may directly contain an " (re-index "inline content") " tag or a " (markup "concat") ", if it has " (re-index "block content") " it must always contain a " (markup "document") " tree.") (concat "A " (markup "cell") " whose operand is a " (markup "document") " is a " (def-index "multi-paragraph cell") ". Since tables are allowed in " (re-index "line context") ", this is the only construct which allows, indirectly, the nesting of a " (re-index "block context") " within a " (re-index "line context") ". Note that most block content can only be typeset correctly within an hyphenated cell, this is controlled by the " (src-var "cell-hyphen") " table variable."))) (explain (document (concat (explain-macro "subtable" "table") (explain-synopsis "subtable cell data"))) (document (concat "In addition to regular markup, cells can accept " (markup "") (markup "subtable") " as an operand. The operand of " (markup "subtable") " is a " (markup "tformat") " tree containing regular table data.") (concat "A similar effect can be obtained with normal table by setting the cell's padding to zero in all directions, the extra twist of a " (markup "subtable") " is its inaccessible border positions."))) (explain (document (concat (explain-macro "tmarker" "table") (explain-synopsis "decoration origin marker"))) (document (concat "This tag is used in the definition of cell decorations, see the documentation of the " (src-var "cell-decoration") " environment variable.") (concat "It is also used outside tables, in the " (markup "switch") " tag to mark the currently displayed position."))) (explain (document (concat (explain-macro "tabular" "table") (explain-synopsis "built-in tabular macro"))) (document (concat "This macro implements standard left aligned tables without borders. Although the " (markup "tabular") " macro is built-in into " (TeXmacs) ", it should not really be considered as a primitive. However, it is not part of any style file either."))) (section "Linking primitives") (explain (document (concat (explain-macro "label" "name") (explain-synopsis "reference target"))) (document (concat "The operand must evaluate to a literal string, it is used as a target name which can be referred to by " (markup "reference") ", " (markup "pageref") " and " (markup "hlink") " tags.") "Label names should be unique in a document and in a project." (concat "Examples in this section will make references to an example " (markup "label") " named ``there''.") (tm-fragment (document (inactive* (label "there")))))) (explain (document (concat (explain-macro "reference" "name") (explain-synopsis "reference to a name"))) (document (concat "The operand must evaluate to a literal string, which is the name of a " (markup "label") " defined in the current document or in another document of the current project.") (tm-fragment (document (inactive* (reference "there")))) (concat "The " (markup "reference") " is typeset as the value of the variable " (src-var "the-label") " at the point of the target " (markup "label") ". The " (src-var "the-label") " variable is set by many numbered structures: sections, figures, numbered equations, " (no-break) "etc.") (concat "A " (markup "reference") " reacts to mouse clicks as an hyperlink."))) (explain (document (concat (explain-macro "pageref" "name") (explain-synopsis "page reference to a name"))) (document (concat "The operand must evaluate to a literal string, which is the name of a " (markup "label") " defined in the current document or in another document of the current project.") (tm-fragment (document (inactive* (pageref "there")))) (concat "The " (markup "") (markup "pageref") " is typeset as the number of the page containing the target " (markup "label") ". Note that page numbers are only computed when the document is typeset with page-breaking, that is not in ``automatic'' or ``papyrus'' page type.") (concat "A " (markup "pageref") " reacts to mouse clicks as an hyperlink."))) (explain (document (concat (explain-macro "hlink" "content" "url") (explain-synopsis "inline hyperlink"))) (document (concat "This primitive produces an hyperlink with the visible text " (src-arg "content") " pointing to " (src-arg "url") ". The " (src-arg "content") " is typeset as inline " (src-arg "url") ". The " (src-arg "url") " must evaluate to a literal string in " (abbr "URL") " syntax and can point to local or remote documents, positions inside documents can be be specified with labels.") "The following examples are typeset as hyperlinks pointing to the label ``there'', respectively in the same document, in a document in the same directory, and on the web." (tm-fragment (document (inactive* (hlink "same document" "../devel/format/regular/#there")) (inactive* (hlink "same directory" "../devel/format/regular/file.tm#there")) (inactive* (hlink "on the web" "http://example.org/#there")))) "If the document is not editable, the hyperlink is traversed by a simple click, if the document is editable, a double-click is required.")) (explain (document (concat (explain-macro "include" "url") (explain-synopsis "include another document"))) (document (concat "The operand must be a literal string and is interpreted as a file name. The content of this file is typeset in place of the " (markup "include") " tag, which must be placed in " (re-index "block context") "."))) (explain (document (concat (explain-macro "action" "content" "script") (explain-synopsis "attach an action to content"))) (document (concat "Bind a " (scheme) " " (src-arg "script") " to a double mouse click on " (src-arg "content") ". For instance, when clicking " (action "here" "(lambda () (system \"xterm &\"))") ", you may launch an " (verbatim "xterm") ". This action is encoded by") (tm-fragment (document (inactive* (action "here" "(lambda () (system \"xterm &\"))")))) (concat "When clicking on actions, the user is usually prompted for confirmation, so as to avoid security problems. The user may control the desired level of security in " (menu "Edit" "Preferences" "Security") ". Programmers may also declare certain " (scheme) " routines to be ``secure''. " (scheme) " programs which only use secure routines are executed without confirmation from the user."))) (section "Miscellaneous physical markup") (explain (document (concat (explain-macro "rigid" "content") (explain-synopsis "atomic entity"))) (document (concat "Typeset the " (src-arg "content") ", which must be " (re-index "line content") ", as an atomic line item. Hyphenation within the " (markup "rigid") " and special spacing handling on its borders are disabled."))) (explain (document (concat (explain-macro "float" "type" "where" "body") (explain-synopsis "floating page insertion"))) (document (concat "Floating insertions are page items which are typeset ``out of band'', they are associated to two boxes: the anchor box marks the structural position of the " (markup "float") ", the floating box contains the typeset " (src-arg "body") " operand. This facility is used by footnotes and floating blocks.") (concat "The first and second operands are evaluated, but for clarity the first operand appears as a literal string in the examples. Since the " (src-arg "body") " is typeset out of band, it may be " (re-index "block content") " even if the " (markup "float") " occurs in " (re-index "line context") ".") (indent (document (concat (explain-macro "float" (src-value "footnote") "" "body") " produces a footnote insertion, this should only be used within the " (markup "footnote") " macro and is considered style markup. The floating box of a footnote is typeset at the end of the the page containing the anchor box.") (concat (explain-macro "float" (src-value "float") "where" "body") " produces a floating block, this is considered physical markup. The position of the floating box is chosen by the page breaker, which uses this extra freedom to minimize the page breaking penalty.") (concat "The " (src-arg "where") " operand must evaluate to a string which may contain the following characters:") (description (document (concat (item* "t") "Allow the floating box at page " (em "top") ".") (concat (item* "b") "Allow the floating box at page " (em "bottom") ".") (concat (item* "h") "Allow the floating box ``" (em "here") "'', in the middle of the page near the anchor box.") (concat (item* "f") (em "Force") " the floating box within the same page as the anchor box."))))))) (explain (document (concat (explain-macro "specific" "medium" "body") (explain-synopsis "medium-specific content"))) (document (concat "This primitive marks " (src-arg "body") " for output only on the specified " (src-arg "medium") ". The following values of " (src-arg "medium") " are supported:") (description (document (concat (item* "texmacs") "The " (src-arg "body") " is typeset as usual line content.") (concat (item* "latex") "The " (src-arg "body") ", which must be a string, is not visible from within " (TeXmacs) ", but it will be included in a verbatim way when the document is exported to " (LaTeX) ".") (concat (item* "html") "Similar to the " (verbatim "latex") " medium, but for " (name "HTML") " exports.") (concat (item* "screen") "The " (src-arg "body") " is only typeset when the document is visualized on a screen. This may be useful to provide additional visual information to the user during the editing phase which should disappear when printing out. A similar tag which may be used for this purpose is " (markup "flag") ".") (concat (item* "printer") "This medium is complementary to " (verbatim "screen") ", when the " (src-arg "body") " should only be visible when printing out, but not when the document is displayed on the screen."))))) (explain (concat (explain-macro "raw-data" "data") (explain-synopsis "binary content")) (document (concat "In some contexts you need to embed uneditable data inside a document, most of the time this is uneditable binary data. The " (markup "raw-data") " primitive makes it impossible to view or modify its subtree from within the editor."))) (chapter "Primitives for writing style files") (section "Environment primitives") "The current environment both defines all style parameters which affect the typesetting process and all additional macros provided by the user and the current style. The primitives in this section are used to access and modify environment variables." (explain (document (concat (explain-macro "assign" "var" "val") (explain-synopsis "variable mutation"))) (document (concat "This primitive sets the environment variable named " (src-arg "var") " (string value) to the value of the " (src-arg "val") " expression. This primitive is used to make non-scoped changes to the environment, like defining markup or increasing counters.") (concat "This primitive affects the evaluation process " (emdash) "through " (markup "value") ", " (markup "provides") ", and macro definitions" (emdash) " and the typesetting process " (emdash) "through special typesetter variables.") (example (document "Enabling page breaking by style." (concat "The " (verbatim "page-medium") " is used to enable page breaking. Since only the " (re-index "initial environment") " value for this variable is effective, this assignation must occur in a style file, not within a document.") (tm-fragment (document (inactive* (assign "page-medium" "paper")))))) (example (document "Setting the chapter counter." (concat "The following snippet will cause the immediately following chapter to be number 3. This is useful to get the the numbering right in " (verbatim "book") " style when working with projects and " (markup "include") ".") (tm-fragment (document (inactive* (assign "chapter-nr" "2")))))) (concat "The operand must be a literal string and is interpreted as a file name. The content of this file is typeset in place of the " (markup "include") " tag, which must be placed in " (re-index "block context") "."))) (explain (document (concat (explain-macro "with" "var-1" "val-1" (math "<cdots>") "var-n" "val-n" "body") (explain-synopsis "variable scope"))) (document (concat "This primitive temporarily sets the environment variables " (src-arg "var-1") " until " (src-arg "var-n") " (in this order) to the evaluated values of " (src-arg "val-1") " until " (src-arg "val-n") " and typesets " (src-arg "body") " in this modified environment. All non-scoped change done with " (markup "assign") " to " (src-arg "var-1") " until " (src-arg "var-n") " within " (src-arg "body") " are reverted at the end of the " (markup "with") ".") "This primitive is used extensively in style files to modify the typesetter environment. For example to locally set the text font, the paragraph style, or the mode for mathematics.")) (explain (document (concat (explain-macro "value" "var") (explain-synopsis "variable value"))) (document (concat "This primitive evaluates the current value of the environment variable " (src-var "var") " (literal string). This is useful to display counters and generally to implement environment-sensitive behavior.") "This primitive is used extensively in style files to modify the typesetter environment. For example to locally set the text font, the paragraph style, or the mode for mathematics.")) (explain (document (concat (explain-macro "provides" "var") (explain-synopsis "definition predicate"))) (document (concat "This predicate evaluates to " (verbatim "true") " if the environment variable " (src-var "var") " (string value) is defined, and to " (verbatim "false") " otherwise.") (concat "That is useful for modular markup, like the " (markup "session") " environments, to fall back to a default appearance when a required package is not used in the document."))) (section "Macro primitives") "Macros can be used to define new tags and to build procedural abstractions in style files." (concat "Older versions of " (TeXmacs) " used to make a distinction between macros (all children accessible) and functions (no accessible child). In modern " (TeXmacs) " there are only macros: the accessibility of children is determined heuristically and can be controlled with " (markup "drd-props") "." (htab "5mm")) (explain (document (concat (explain-macro "macro" "var-1" (math "<cdots>") "var-n" "body") (explain-synopsis "macro of fixed arity"))) (document (concat "This primitive returns a macro (the " (TeXmacs) " analogue of a " (math "<lambda>") "-expression) with " (math "n") " arguments, named after the literal strings " (src-arg "var-1") " until " (src-arg "var-n") ".") (concat "New tags are defined by storing macros in the environment. Most of the time, macros are stored without scope with " (markup "assign") ", but it is sometimes useful to redefine a tag locally within the scope of a " (markup "with") ". For example, itemized and enumerated environment redefine " (markup "item") " locally.") (example (document (concat "Definition of the " (markup "abbr") " tag") (tm-fragment (document (inactive* (assign "abbr" (macro "x" (rigid (arg "x"))))))))) (concat "Storing a " (markup "macro") " in the environment defines a tag whose arity is fixed to the number of arguments taken by the macro."))) (explain (document (concat (explain-macro "arg" "var" "index-1" (math "<cdots>") "index-n") (explain-synopsis "retrieve macro arguments"))) (document (concat "This primitive is used to retrieve the arguments of a macro within its body. For instance, " (explain-macro "arg" "var") " expands the content of the macro argument with name " (src-arg "var") " (literal string). Of course, this argument must be defined by a " (markup "macro") " containing the " (markup "arg") " tag.") (concat "This tag is similar to " (markup "value") ", but differs in important ways:") (itemize (document (concat (item) "The argument namespace is distinct from the environment, " (explain-macro "arg" "var") " and " (explain-macro "value" "var") " will generally evaluate to different values (although you should not rely on this).") (concat (item) "The value of " (markup "arg") " retains the position of the macro argument in the document tree, that makes it possible to edit the arguments of a macro-defined tag while it is active."))) (concat "When more than one argument is specified, " (explain-macro "arg" "var" "index-1" (math "<cdots>") "index-n") " expands to a subtree of the argument " (src-arg "var") ". The value of the named argument must be a compound tree (not a string). The operands " (src-arg "var") " until " (src-arg "index-n") " must all evaluate to positive integers and give the path to the subtree of the macro argument."))) (explain (document (concat (explain-macro "xmacro" "var" "body") (explain-synopsis "macro with a variable arity"))) (document (concat "This primitive returns a macro (the " (TeXmacs) " analogue of a " (math "<lambda>") "-expression) capable of taking any number of arguments. The arguments are stored in the macro variable with name " (src-arg "var") " (a literal string) during the evaluation of the " (src-arg "body") ". The " (math "i") "-th individual argument can then be accessed using " (explain-macro "arg" "var" "i") "."))) (explain (document (explain-macro "map-args" "foo" "root" "var") (explain-macro "map-args" "foo" "root" "var" "first") (concat (explain-macro "map-args" "foo" "root" "var" "first" "last") (explain-synopsis "map a tag on subtrees of an argument"))) (document (concat "This primitive evaluates to a tree whose root is labeled by " (src-arg "root") " and whose children are the result of applying the macro " (src-arg "foo") " to the children of the macro argument with name " (src-arg "var") ".") (concat "By default, the macro " (src-arg "foo") " is applied to all children. If " (src-arg "first") " has been specified, then we rather start at the " (math "i") "-th child of " (src-arg "var") ", where " (math "i") " is the result of evaluating " (src-arg "first") ". If " (src-arg "last") " has been specified too, then we stop at the " (math "j") "-th child of " (src-arg "var") " (the " (math "j") "-th child not being included), where " (math "j") " is the result of evaluating " (src-arg "last") ". In this last case, the arity of the returned tree is therefore " (math "j-i") ".") (concat "Stated otherwise, " (markup "map-args") " applies " (src-arg "foo") " to all subtrees of the macro argument " (src-arg "var") " (or a range of subtrees if " (src-arg "first") " and " (src-arg "last") " are specified) and collects the result in a tree with label " (src-arg "root") ". In addition, the second argument to " (src-arg "foo") " gives its position of the first argument in the expansion of " (src-arg "var") ".") (concat "The " (markup "map-args") " is analogue to the " (scheme) " function " (verbatim "map") ". Since " (TeXmacs) " use labeled trees, the label of the mapping list must also be specified.") (example (document "Comma-separated lists." (concat "The " (markup "comma-separated") " tag has any arity (though it does not make much sense with arity zero) and typesets its operands interspersed with commas.") (tm-fragment (document (inactive* (assign "comma-extra" (macro "x" (concat ", " (arg "x"))))) (inactive* (assign "comma-separated" (xmacro "args" (style-with "src-compact" "none" (concat (arg "args" "0") (map-args "comma-extra" "concat" "args" "1")))))))))))) (explain (document (concat (explain-macro "eval-args" "var") (explain-synopsis "macro with a variable arity"))) (document (concat "This primitive evaluates to the tree with the same label as the expansion of the argument " (src-arg "var") " and whose subtrees are the result of the evaluation of the subtrees of the expansion of " (src-arg "var") "."))) (explain (document (concat (explain-macro "compound" "foo" "arg-1" (math "<cdots>") "arg-n") (explain-synopsis "expand an unnamed macro"))) (document (concat "This primitive is useful to expand macros which are the result of a computation: it applies the macro which is the result of the evaluation of " (src-arg "foo") " to the arguments " (src-arg "arg-1") " until " (src-arg "arg-n") ". The " (markup "compound") " primitive is useful in call-back and lambda programming idioms, where a " (def-index "higher-level macro") " is given a macro as an operand, which it may later apply under certain conditions or with operands which are not known to the client code.") (concat "Actually, in the current implementation, " (src-arg "foo") " may either evaluate to a macro or to a literal string which gives the name of a macro. However, we discourage users to rely on the second case.") (example (document "Lambda programming with macros." (concat "In the code below, " (explain-macro "filter" "pred" "t") " expects a macro " (src-arg "pred") " and a tuple " (src-arg "t") " on input and returns a tuple containing the elements of " (src-arg "t") " for which " (src-arg "pred") " evaluates to " (verbatim "true") ".") (tm-fragment (document (inactive* (assign "filter" (macro "pred" "t" (style-with "src-compact" "none" (if (equal (length (arg "t")) "0") (tuple) (style-with "src-compact" "none" (merge (style-with "src-compact" "none" (if (compound (arg "pred") (look-up (arg "t") "0")) (tuple (look-up (arg "t") "0")) (tuple))) (filter (arg "pred") (range (arg "t") "1" (length (arg "t"))))))))))))) (concat "As an application, we may define a macro " (explain-macro "evens" "t") ", which expects " (src-arg "t") " to be a tuple containing integers, and which returns the tuple of integers in " (src-arg "t") " which are divisible by 2.") (tm-fragment (document (inactive* (assign "evens" (macro "t" (filter (macro "x" (equal (mod (arg "x") "2") "0")) (arg "t"))))))))))) (explain (document (concat (explain-macro "drd-props" "var" "prop-1" "val-1" (math "<cdots>") "prop-n" "val-n") (explain-synopsis (concat "set " (abbr "D.R.D.") " properties of a tag")))) (document (concat "The arity and children accessibility of tags defined by macros are determined heuristically by default. The " (markup "drd-props") " primitive overrides this default for the environment variable (usually a macro) with name " (src-arg "var") ". The currently supported property-value pairs are:") (description-dash (document (concat (item* (concat "(arity, " (math "n") ")")) "Sets the arity to the given fixed value " (math "n") " (literal integer).") (concat (item* "(accessible, all)") "Make it impossible to deactivate the tag with normal editor actions. Inaccessible children become effectively uneditable.") (concat (item* "(accessible, none)") "Make it impossible to position the caret within the tag when it is active, so children can only be edited when the tag is inactive."))))) (explain (document (concat (explain-macro "get-label" "expression") (explain-synopsis "label of an expression"))) (document (concat "Returns the label of the tree obtained when evaluating " (src-arg "expression") "."))) (explain (document (concat (explain-macro "get-arity" "expression") (explain-synopsis "arity of an expression"))) (document (concat "Returns the arity of the tree obtained when evaluating " (src-arg "expression") "."))) (section "Flow control primitives") (explain (document (explain-macro "if" "condition" "if-body") (concat (explain-macro "if" "condition" "if-body" "else-body") (explain-synopsis "conditional markup"))) (document (concat "This primitive can be used to typeset " (src-arg "if-body") " only if the " (src-arg "condition") " is satisfied. If the optional " (src-arg "else-body") " is specified, then it is typeset if and only if the " (src-arg "condition") " fails.") (remark (document "It should be noticed that the use of conditional markup can be a bit tricky due to the fact that the accessability of arguments cannot necessarily be checked beforehand. For instance, in the macro definition" (tm-fragment (document (inactive* (macro "x" (if (visibility-flag) (arg "x")))))) (concat "the macro argument " (src-arg "x") " is accessible if and only if " (inactive* (visibility-flag)) " evaluates to true. This condition cannot necessarily be checked " (em "a priori") ". For certain editing operations, like searches or spell checking, the incorrect determination of the accessability may lead to the positioning of the cursor at unaccessible places, or to the ignorance of certain markup. In the future, we plan to improve this aspect of the editor, but it is better to avoid conditional markup whenever another solution can be found."))) (remark (document (concat "The conditional constructs are only fully implemented for inline markup. In the case when you need conditional markup for block structures you currently have to write macros for the if-case and the else-case and use the " (markup "compound") " tag. For instance:") (tm-fragment (document (inactive* (assign "cold" (macro "x" (with "color" "blue" (arg "x"))))) (inactive* (assign "hot" (macro "x" (with "color" "red" (arg "x"))))) (inactive* (assign "adaptive" (macro "x" (compound (if (summer) (value "hot") (value "cold")) (arg "x"))))))))))) (explain (document (explain-macro "case" "cond-1" "body-1" (math "<cdots>") "cond-n" "body-n") (concat (explain-macro "case" "cond-1" "body-1" (math "<cdots>") "cond-n" "body-n" "else-body") (explain-synopsis "case distinction"))) (document "These commands are respectively equivalent to" (tm-fragment (document (inactive* (if (arg "cond-1") (arg "body-1") (concat (active* (math "<cdots>")) (if (arg "cond-n") (arg "body-n"))))) (inactive* (if (arg "cond-1") (arg "body-1") (concat (active* (math "<cdots>")) (if (arg "cond-n") (arg "body-n") (arg "else-body"))))))))) (explain (document (concat (explain-macro "while" "condition" "body") (explain-synopsis "repeated evaluation"))) (document (concat "This construct maybe used in order to repeatly execute a given " (src-arg "body") " while a given " (src-arg "condition") " is satisfied. For instance, when declaring") (tm-fragment (document (inactive* (assign "count" (macro "from" "to" (with "i" (arg "from") (style-with "src-compact" "none" (concat (while (less (value "i") (arg "to")) (concat (value "i") ", " (assign "i" (plus (value "i") "1")))) (arg "to"))))))))) (concat "the code " (inactive* (count "1" "50")) " produces") (tm-fragment (document (with "count" (macro "from" "to" (with "i" (arg "from") (concat (while (less (value "i") (arg "to")) (concat (value "i") ", " (assign "i" (plus (value "i") "1")))) (arg "to")))) (count "1" "50")))))) (section "Evaluation control primitives") (concat "This section describes several primitives for controlling the way expressions in the style-sheet language are evaluated. The primitives are analoguous to the " (scheme) " primitives " (verbatim "eval") ", " (verbatim "quote") ", " (verbatim "quasiquote") ", " (abbr "etc.") ", although the " (TeXmacs) " conventions are slightly " (hlink "different" "../devel/style/design/style-eval.en.tm") " than those used by conventional functional languages like " (name "Scheme") ".") (explain (document (concat (explain-macro "eval" "expr") (explain-synopsis "force evaluation"))) (document (concat "Typeset the result of the evaluation of " (src-arg "expr") ". This primitive is usually combined with a tag like " (markup "quote") " or " (markup "quasiquote") " for delaying the evaluation."))) (explain (document (concat (explain-macro "quote" "expr") (explain-synopsis "delayed evaluation"))) (document (concat "Evaluation of the expression " (explain-macro "quote" "expr") " yields " (src-arg "expr") " itself. This kind of delayed evaluation may be useful in combination with the " (markup "eval") " primitive which forces evaluation."))) (explain (document (concat (explain-macro "quasiquote" "expr") (explain-synopsis "delay evaluation and substitution"))) (document (concat "This tag is a variant of the " (markup "quote") " tag, which returns the expression " (src-arg "expr") " in which all subexpressions of the form " (explain-macro "unquote" "subexpr") " have been replaced by the evaluations of " (src-arg "subexpr") ". For instance,") (tm-fragment (document (inactive* (assign "hello" (quasiquote (macro "name" (concat (unquote (localize "Hello")) " " (arg "name") "."))))))) (concat "may be used to define a macro " (markup "hello") " whose value is localized for the current language. In a French document, the declaration would typically be equivalent to") (tm-fragment (document (inactive* (assign "hello" (macro "name" (concat "Bonjour " (arg "name") ".")))))) (concat "Notice however that it is usually better not to use the " (markup "quasiquote") " primitive for such applications. When defining") (tm-fragment (document (inactive* (assign "hello" (macro "name" (concat (localize "Hello") " " (arg "name") ".")))))) (concat "the typesetting of " (inactive* (hello "Name")) " would naturally adapt itself to the current language, while the above version would always use the language at the moment of the definition of the macro. Nevertheless, the first form does have the advantage that the localization of the word ``Hello'' only has to be computed once, when the macro is defined. Therefore, the " (markup "quasiquote") " primitive may sometimes be used in order to improve performance."))) (explain (document (concat (explain-macro "unquote" "subexpr") (explain-synopsis "mark substitutable subexpressions"))) (document (concat "This tag is used in combination with " (markup "quasiquote") " and " (markup "quasi") " in order to mark the subexpressions which need to be evaluated."))) (explain (document (concat (explain-macro "unquote*" "subexprs") (explain-synopsis "unquote splicing"))) (document (concat "This tag is similar to " (markup "unquote") ", except that the argument " (src-arg "subexprs") " now evaluates to a list of subexpressions, which are inserted into the arguments of the parent node. For instance, consider the macro") (tm-fragment (document (inactive* (assign "fun" (xmacro "x" (style-with "src-compact" "none" (quasi (tree "dup" (unquote* (quote-arg "x")) (unquote* (quote-arg "x")))))))))) (concat "Then " (inactive* (fun "a" "b" "c")) " is typeset as") (equation* (document (with "fun" (xmacro "x" (quasi (tree "dup" (unquote* (quote-arg "x")) (unquote* (quote-arg "x"))))) (fun "a" "b" "c")))))) (explain (document (concat (explain-macro "quasi" "expr") (explain-synopsis "substitution"))) (document (concat "This tag is a shortcut for " (explain-macro "eval" (with "font-shape" "right" (explain-macro "quasiquote" "expr"))) ". This primitive is often used in the " (TeXmacs) " style files in order to write macros which define sets of other macros. For instance, the macro") (tm-fragment (document (inactive* (assign "new-theorem" (macro "name" "text" (quasi (assign (unquote "name") (macro "body" (surround (concat (no-indent) (strong (concat (unquote (arg "text")) ". "))) (right-flush) (arg "body")))))))))) "may be used in order to define new theorem-like environments.")) (explain (document (concat (explain-macro "quote-value" "var") (explain-synopsis "retrieve a value but don't evaluate"))) (document (concat "When retrieving an environment variable " (src-arg "var") ", one is usually interested in its typesetted value, as given by " (explain-macro "value" "var") ". In some cases, it may be useful to access the real, non-typesetted value. This can be done with " (explain-macro "quote-value" "var") "."))) (explain (document (concat (explain-macro "quote-arg" "var" "index-1" (math "<cdots>") "index-n") (explain-synopsis "retrieve an argument but don't evaluate"))) (document (concat "When retrieving (a subexpression of) a macro argument " (src-arg "var") ", one is usually interested in its typesetted value, as given by " (explain-macro "arg" "var" "index-1" (math "<cdots>") "index-n") ". In some cases, it may be useful to access the real, non-typesetted value. This can be done with " (explain-macro "quote-arg" "var" "index-1" (math "<cdots>") "index-n") "."))) (section "Functional operators") (concat "Functional operators are used for computational purposes during the typesetting phase, such as increasing counters, localizing strings like theorem and so on. A fundamental set of basic functional operators are built-in primitives. New functional operators can easily be added using the " (markup "extern") " primitive. Functional operators operate on five main types of arguments: strings, numbers, lengths, booleans and tuples. Some operators are overloaded, so that they can be used for several types.") (subsection "Operations on text") (explain (document (concat (explain-macro "length" "expr") (explain-synopsis "length of a string"))) (document (concat "If " (src-arg "expr") " is a string, the length of the string is returned. For instance, " (inactive* (length "Hello")) " evaluates to " (length "Hello") "."))) (explain (document (concat (explain-macro "range" "expr" "start" "end") (explain-synopsis "extract a substring"))) (document (concat "Return the substring of " (src-arg "expr") " starting at position " (src-arg "start") " and ending at position " (src-arg "end") " (not included). For instance, " (inactive* (range "hottentottententententoonstelling" "9" "15")) " evaluates to " (range "hottentottententententoonstelling" "9" "15") "."))) (explain (document (concat (explain-macro "merge" "expr-1" (math "<cdots>") "expr-n") (explain-synopsis "concatenate strings"))) (document (concat "This primitive may be used to concatenate several strings " (src-arg "expr-1") " until " (src-arg "expr-n") ". For instance, " (inactive* (merge "Hello" "World")) " produces " (merge "Hello" "World") "."))) (explain (document (concat (explain-macro "number" "number" "render-as") (explain-synopsis "alternative rendering of numbers"))) (document (concat "Renders a " (src-arg "number") " in a specified way. Supported values for " (src-arg "render-as") " are") (description (document (concat (item* "roman") "Lower case Roman: " (inactive* (number "18" "roman")) " " (math "<longrightarrow>") " " (number "18" "roman") ".") (concat (item* "Roman") "Upper case Roman: " (inactive* (number "18" "Roman")) " " (math "<longrightarrow>") " " (number "18" "Roman") ".") (concat (item* "alpha") "Lower case letters: " (inactive* (number "18" "alpha")) " " (math "<longrightarrow>") " " (number "18" "alpha") ".") (concat (item* "Alpha") "Upper case letters: " (inactive* (number "18" "Alpha")) " " (math "<longrightarrow>") " " (number "18" "Alpha") ".") (concat (item* "arabic") "Arabic numbers: " (inactive* (number "18" "arabic")) " " (math "<longrightarrow>") " " (number "18" "arabic") ".") (concat (item* "fnsymbol") "Footnotes symbols: " (inactive* (number "2" "fnsymbol")) " " (math "<longrightarrow>") " " (number "2" "fnsymbol") "."))))) (explain (document (explain-macro "date") (explain-macro "date" "format") (concat (explain-macro "date" "format" "language") (explain-synopsis "obtain the current date"))) (document (concat "Returns the current date in a specified " (src-arg "format") " (which defaults to a standard language-specific format when empty) and a specified " (src-arg "language") " (which defaults to English). The format is similar to the one used by the " (name "Unix") " " (verbatim "date") " command. For instance, " (inactive* (date)) " evaluates to ``" (date) "'', " (inactive* (date "" "french")) " to ``" (date "" "french") "'' and " (inactive* (date "%d %B om %k:%M" "dutch")) " to ``" (date "%d %B om %k:%M" "dutch") "''."))) (explain (document (concat (explain-macro "translate" "what" "from" "into") (explain-synopsis "translation of strings"))) (document (concat "Returns the translation of a string " (src-arg "what") " of the language " (src-arg "from") " into the language " (src-arg "into") ", using the built-in " (TeXmacs) " dictionaries. The languages should be specified in lowercase letters. For instance, " (inactive* (translate "File" "english" "french")) " yields ``" (translate "File" "english" "french") "''.") (concat "The list of currently available languages can be checked in the " (menu "Document" "Language") " menu. The built-in " (TeXmacs) " dictionaries can be found in") (verbatim "    $TEXMACS_PATH/languages/natural/dic") (concat "When attempting to use a non-existing dictionary, the program may quit. For most purposes, it is more convenient to use the " (markup "localize") " macro, which converts a string from English into the current language."))) (subsection "Arithmetic operations") (explain (document (explain-macro "plus" "expr-1" (math "<cdots>") "expr-n") (concat (explain-macro "minus" "expr-1" (math "<cdots>") "expr-n") (explain-synopsis "addition and subtraction"))) (document (concat "Add or subtract numbers or lengths. For instance, " (inactive* (plus "1" "2.3" "5")) " yields " (plus "1" "2.3" "5") " and " (inactive* (plus "1cm" "5mm")) " produces " (plus "1cm" "5mm") ". In the case of subtractions, the last argument is subtracted from the sum of the preceding arguments. For instance, " (inactive* (minus "1")) " produces " (minus "1") " and " (inactive* (minus "1" "2" "3" "4")) " yields " (no-break) (minus "1" "2" "3" "4") "."))) (explain (document (concat (explain-macro "times" "expr-1" (math "<cdots>") "expr-n") (explain-synopsis "multiplication"))) (document (concat "Multiply two numbers " (src-arg "expr-1") " until " (src-arg "expr-n") ". One of the arguments is also allowed to be a length, in which case a length is returned. For instance, " (inactive* (times "3" "3")) " evaluates to " (times "3" "3") " and " (inactive* (times "3" "2cm")) " to " (times "3" "2cm") "."))) (explain (document (concat (explain-macro "over" "expr-1" (math "<cdots>") "expr-n") (explain-synopsis "division"))) (document (concat "Divide the product of all but the last argument by the last argument. For instance, " (inactive* (over "1" "2" "3" "4" "5" "6" "7")) " evaluates to " (over "1" "2" "3" "4" "5" "6" "7") ", " (inactive* (over "3spc" "7")) " to " (over "3spc" "7") ", and " (inactive* (over "1cm" "1pt")) " to " (over "1cm" "1pt") "."))) (explain (document (explain-macro "div" "expr-1" "expr-2") (concat (explain-macro "mod" "expr-1" "expr-2") (explain-synopsis "division with remainder"))) (document (concat "Compute the result of the division of an integer " (src-arg "expr-1") " by an integer " (src-arg "expr-2") ", or its remainder. For instance, " (inactive* (div "18" "7")) "=" (div "18" "7") " and " (inactive* (mod "18" "7")) "=" (mod "18" "7") "."))) (explain (document (explain-macro "equal" "expr-1" "expr-2") (explain-macro "unequal" "expr-1" "expr-2") (explain-macro "less" "expr-1" "expr-2") (explain-macro "lesseq" "expr-1" "expr-2") (explain-macro "greater" "expr-1" "expr-2") (concat (explain-macro "greatereq" "expr-1" "expr-2") (explain-synopsis "comparing numbers or lengths"))) (document (concat "Return the result of the comparison between two numbers or lengths. For instance, " (inactive* (less "123" "45")) " yields " (less "123" "45") " and " (inactive* (less "123mm" "45cm")) " yields " (less "123mm" "45cm") "."))) (subsection "Boolean operations") (explain (document (explain-macro "or" "expr-1" (math "<cdots>") "expr-n") (explain-macro "and" "expr-1" (math "<cdots>") "expr-n")) (document (concat "Returns the result of the boolean or/and on the expressions " (src-arg "expr-1") " until " (src-arg "expr-n") ". For instance, " (inactive* (or "false" (equal "1" "1") "false")) " yields " (or "false" (equal "1" "1") "false") "."))) (explain (document (explain-macro "xor" "expr-1" "expr-2")) (document (concat "Returns the exclusive or of two expressions " (src-arg "expr-1") " and " (src-arg "expr-2") ", " (abbr "i.e.") " " (inactive* (xor "true" "true")) " yields " (xor "true" "true") "."))) (explain (document (explain-macro "not" "expr")) (document (concat "Returns the negation of " (src-arg "expr") "."))) (subsection "Operations on tuples") (explain (document (concat (explain-macro "tuple" "expr-1" (math "<cdots>") "expr-n") (explain-synopsis "construct a tuple"))) (document (concat "Forms a tuple from the expressions " (src-arg "expr-1") " until " (src-arg "expr-n") "."))) (explain (document (concat (explain-macro "is-tuple" "expr") (explain-synopsis "tuple predicate"))) (document (concat "Tests whether a given expression " (src-arg "expr") " evaluates to a tuple."))) (explain (document (concat (explain-macro "length" "expr") (explain-synopsis "length of a tuple"))) (document (concat "If " (src-arg "expr") " is a tuple, then we return its arity. For instance, " (inactive* (length (tuple "hop" "hola"))) " evaluates to " (length (tuple "hop" "hola")) "."))) (explain (document (concat (explain-macro "look-up" "tuple" "which") (explain-synopsis "access an entry in a tuple"))) (document (concat "Returns the element with index " (src-arg "which") " in " (src-arg "tuple") ". For instance, " (inactive* (look-up (tuple "a" "b" "c") "1")) " yields " (look-up (tuple "a" "b" "c") "1") "."))) (explain (document (concat (explain-macro "range" "expr" "start" "end") (explain-synopsis "extract a subtuple"))) (document (concat "Return the subtuple of " (src-arg "expr") " starting at position " (src-arg "start") " and ending at position " (src-arg "end") " (not included). For instance, " (inactive* (range (tuple "a" "hola" "hop" "b" "c") "2" "4")) " evaluates to " (range (tuple "a" "hola" "hop" "b" "c") "2" "4") "."))) (explain (document (concat (explain-macro "merge" "expr-1" (math "<cdots>") "expr-n") (explain-synopsis "concatenate tuples"))) (document (concat "This primitive may be used to concatenate several tuples " (src-arg "expr-1") " until " (src-arg "expr-n") ". For instance, " (inactive* (merge (tuple "1" "2") (tuple "3" "4" "5"))) " produces " (merge (tuple "1" "2") (tuple "3" "4" "5")) "."))) (section "Transient markup") "The tags described in this section are used to control the rendering of style files and style file elements. It both contains markup for activation and disactivation of content and for the rendering of tags." (explain (document (explain-macro "active" "content") (explain-macro "active*" "content") (explain-macro "inactive" "content") (concat (explain-macro "inactive*" "content") (explain-synopsis "activation/disactivation of content"))) (document (concat "These tags can be used to temporarily or permanently change the " (em "activity") " of the " (src-arg "content") ". In usual documents, tags are by default active. In style files, they are by default inactive. For instance, an activated fraction is rendered as " (frac "1" "2") "; when deactivated, it is rendered as " (inactive* (frac "1" "2")) ".") (concat "The " (markup "active") " and " (markup "inactive") " tags only activate or desactivate the root tag of the " (src-arg "content") ". Typically, a tag which contains hidden information (like " (markup "hlink") ") can be deactivated by positioning the cursor just behind it and pressing " (key "backspace") ". This action just deactivates the hyperlink, but not the potentially complicated body of the hyperlink. Therefore, the hyperlink is transformed into an inactive tag of the form " (explain-macro "inactive" (with "font-shape" "right" (explain-macro "hlink" "body" "ref"))) ".") (concat "The " (markup "active*") " and " (markup "inactive*") " variants are used to activate or deactivate the whole " (src-arg "content") " (except when other (dis-)activation tags are found inside the " (src-arg "content") "). The " (markup "inactive*") " is used frequently inside the present documentation in order to show the inactive representation of " (TeXmacs) " content. Nevertheless, it is sometimes desirable to reactivate certain subtrees inside deactivated content. For instance, the following piece of deactivated code (using " (markup "disactive*") ") contains the reactivated subexpression " (math (with "color" "red" "<heartsuit><heartsuit><heartsuit>")) " (using " (markup "active*") "):") (tm-fragment (document (inactive* (assign "love" (macro "from" (concat (active* (math (with "color" "red" "<heartsuit><heartsuit><heartsuit>"))) " from " (arg "from") ".")))))))) (explain (document (concat (explain-macro "inline-tag" "name" "arg-1" (math "<cdots>") "arg-n") (explain-synopsis "rendering of inline tags"))) (document (concat "This tag is used for the default inline rendering of an inactive tag with a given " (src-arg "name") " and arguments " (src-arg "arg-1") " until " (src-arg "arg-n") ". For instance, " (inactive* (inline-tag "foo" "x" "y")) " produces " (inline-tag "foo" "x" "y") ". The style of the rendering may be customized in the " (menu "Document" "Source" "Source tags") " menu, or by modifying the " (src-var "src-style") ", " (src-var "src-special") ", " (src-var "src-compact") " and " (src-var "src-close") " environment variables."))) (explain (document (explain-macro "open-tag" "name" "arg-1" (math "<cdots>") "arg-n") (explain-macro "middle-tag" "name" "arg-1" (math "<cdots>") "arg-n") (concat (explain-macro "close-tag" "name" "arg-1" (math "<cdots>") "arg-n") (explain-synopsis "rendering of multi-line tags"))) (document (concat "These tags are similar to " (markup "inline-tag") ", when some of the arguments of the tag run over several lines. Typical HTML-like tags would correspond to " (explain-macro "open-tag" "name") " and " (explain-macro "close-tag" "name") ". Since " (TeXmacs) " macros may take more than one argument, a " (markup "middle-tag") " is provided for separating distinct multi-paragraph arguments. Moreover, the opening, middle and closing tags may take additional inline arguments for rendering in a compact fashion. For instance, the code") (tm-fragment (document (inactive* (document (open-tag "theorem") (indent "The weather should be nice today.") (close-tag "theorem"))))) "is rendered by default as" (tm-fragment (document (open-tag "theorem") (indent "The weather should be nice today.") (close-tag "theorem"))) (concat "The rendering may be customized in a similar way as in the case of " (markup "inline-tag") "."))) (explain (document (explain-macro "style-with" "var-1" "val-1" (math "<cdots>") "var-n" "val-n" "body") (concat (explain-macro "style-with*" "var-1" "val-1" (math "<cdots>") "var-n" "val-n" "body") (explain-synopsis "alter presentation in style files only"))) (document (concat "This tag may be used in order to temporarily modify the rendering of inactive tags, by setting each environment variable " (src-arg "var-i") " to " (src-arg "val-i") " in the local typesetting context of " (src-arg "body") ". When importing a style file, each " (markup "style-with") "/" (markup "style-with*") " tag is replaced by its " (src-arg "body") ". In the case of " (markup "style-with") ", the modified rendering is only applied to the root tag of the " (src-arg "body") ". In the case of " (markup "style-with*") ", the rendering is modified for the entire " (src-arg "body") "."))) (explain (document (explain-macro "style-only" (with "font-shape" "right" (explain-macro "foo" "content"))) (concat (explain-macro "style-only*" (with "font-shape" "right" (explain-macro "foo" "content"))) (explain-synopsis "content for use in style files only"))) (document (concat "This tag may be used in order to render an inactive tags as whether we applied the macro " (markup "foo") " on it. When importing a style file, each " (markup "style-only") "/" (markup "style-only*") " tag is replaced by its " (src-arg "content") ". In the case of " (markup "style-only") ", the modified rendering is only applied to the root tag of the " (src-arg "content") ". In the case of " (markup "style-only*") ", the rendering is modified for the entire " (src-arg "content") "."))) (explain (document (explain-macro "symbol" "symbol") (explain-macro "latex" "cmd") (explain-macro "hybrid" "cmd") (concat (explain-macro "hybrid" "cmd" "arg") (explain-synopsis "auxiliary tags for entering special content"))) (document "These tags are used only temporarily when entering special content." (concat "When pressing " (shortcut "(make 'symbol)") ", a " (markup "symbol") " tag is created. After entering the name of the symbol, or the ASCII-code of the symbol and pressing return, the " (markup "symbol") " tag is replaced by the corresponding symbol (usually a string enclosed in " (verbatim "<less><gtr>") ").") (concat "When pressing " (key "\\") ", a " (markup "hybrid") " tag is created. After entering a string and pressing return, it is determined whether the string corresponds to a " (LaTeX) " command, a macro argument, a macro or an environment variable (in this order). If so, then the " (markup "hybrid") " tag is replaced by the appropriate content. When pressing " (key "\\") " while a selection is active, then the selection automatically becomes the argument of the hybrid command (or the hybrid command itself, when recognized).") (concat "The " (markup "latex") " tag behaves similarly as the " (markup "hybrid") " tag except that it only recognizes " (LaTeX) " commands."))) (concat "The rendering macros for source trees are built-in into " (TeXmacs) ". They should not really be considered as primitives, but they are not part of any style file either.") (explain (document (concat (explain-macro "indent" "body") (explain-synopsis "indent some content"))) (document (concat "Typeset the " (src-arg "body") " using some indentation."))) (explain (document (concat (explain-macro "rightflush") (explain-synopsis "indent some content"))) (document "Flush to the right. This macro is useful to make the end of a block environment run until the right margin. This allows for more natural cursor positioning and a better layout of the informative boxes.")) (explain (document (explain-macro "src-macro" "macro-name") (explain-macro "src-var" "variable-name") (explain-macro "src-arg" "argument-name") (explain-macro "src-tt" "verbatim-content") (explain-macro "src-integer" "interger") (explain-macro "src-length" "length") (concat (explain-macro "src-error" "message") (explain-synopsis "syntactic highlighting on purpose"))) (document "These macros are used for the syntactic highlighting of source trees. They determine how to render subtrees which correspond to macro names, variable names, argument names, verbatim content, integers, lengths and error messages.")) (explain (document (explain-macro "src-title" "title") (explain-macro "src-style-file" "name" "version") (explain-macro "src-package" "name" "version") (concat (explain-macro "src-package-dtd" "name" "version" "dtd" "dtd-version") (explain-synopsis "style and package administration"))) (document (concat "These macros are used for the identification of style files and packages and their corresponding " (abbr "D.T.D.") "s. The " (markup "src-title") " is a container for " (markup "src-style-file") ", " (markup "src-package") ", " (markup "src-package-dtd") " as well as " (markup "src-license") " and " (markup "src-copyright") " macros.") (concat "The " (markup "src-style-file") " tag specifies the " (src-arg "name") " and " (src-arg "version") " of a style file and sets the environment variable with " (src-var (concat (src-arg "name") "-style")) " to " (src-arg "version") ". The " (markup "src-package-dtd") " specifies the " (src-arg "name") " and " (src-arg "version") " of a package, as well as the corresponding " (src-arg "dtd") " and its version " (src-arg "dtd-version") ". It sets the environment variable " (src-var (concat (src-arg "name") "-package")) " to " (src-arg "version") " and " (src-var (concat (src-arg "dtd") "-dtd")) " to " (src-arg "dtd-version") ". The " (markup "src-package") " tag is a shorthand for " (markup "src-package-dtd") " when the name of the " (abbr "D.T.D.") " coincides with the name of the package."))) (section "Miscellaneous style-sheet primitives") (explain (document (concat (explain-macro "extern" "scheme-foo" "arg-1" (math "<cdots>") "arg-n") (explain-synopsis "apply extern typesetting macro"))) (document (concat "This primitive allows the user to implement macros in " (scheme) ". The primitive applies the " (scheme) " function or macro " (src-arg "scheme-foo") " to the arguments " (src-arg "arg-1") " until " (src-arg "arg-n") ". For instance, the code " (inactive* (extern "(lambda (name) `(concat \"hi \" ,name))" "dude")) " yields ``" (extern "(lambda (name) `(concat \"hi \" ,name))" "dude") "''.") (concat "The arguments " (src-arg "arg-1") " until " (src-arg "arg-n") " are evaluated and then passed as trees to " (src-arg "scheme-foo") ". When defining a macro which relies on extern scheme code, it is therefore recommended to pass the macro arguments using the " (markup "quote-arg") " primitive:") (tm-fragment (document (inactive* (assign "inc-div" (macro "x" "y" (style-with "src-compact" "none" (extern "(lambda (x y) `(frac ,x (concat \"1+\" ,y)))" (quote-arg "x") (quote-arg "y")))))))) (concat "It has been foreseen that the accessability of the macro arguments " (src-arg "x") " and " (src-arg "y") " is preserved for this kind of definitions. However, since " (TeXmacs) " does not heuristically analyze your " (scheme) " code, you will have to manually set the " (abbr "D.R.D.") " properties using " (markup "drd-props") ".") (concat "Notice also that the " (scheme) " function " (src-arg "scheme-foo") " should only rely on secure scheme functions (and not on functions like " (verbatim "system") " which may erase your hard disk). User implemented " (scheme) " functions in plug-ins may be defined to be secure using the " (verbatim ":secure") " option. Alternatively, the user may define all " (scheme) " routines to be secure in " (menu "Edit" "Preferences" "Security" "Accept all scripts") "."))) (explain (document (concat (explain-macro "write" "aux" "content") (explain-synopsis "write auxiliary information"))) (document (concat "Adds " (src-arg "content") " to the auxiliary section " (src-arg "aux") " of the document. This tag is used for instance by " (inactive* (nocite "citekey")) " to add entries to the automatically generated bibliography at the end of the document, without inserting a citation in the text."))) (explain (document (explain-macro "flag" "content" "color") (concat (explain-macro "flag" "content" "color" "var") (explain-synopsis "display an informative flag"))) (document (concat "This tag is used to in order to inform the user about information which is present in the document, but not visible when printed out. " (TeXmacs) " displays such informative flags for labels, formatting directives such as page breaks, and so on. In " (menu "Document" "Informative flags") ", the user may specify how the informative flags should be rendered.") (concat "The two-argument variant displays an informative flag with a given " (src-arg "content") " and " (src-arg "color") ". The " (src-arg "content") " is only rendered when selecting " (menu "Document" "Informative flags" "Detailed") ". For instance, " (inactive* (flag "warning" "red")) " is rendered as " (flag "warning" "red") ". The optional " (src-arg "var") " argument may be used in order to specify that the flag should only be visible if the macro argument " (src-arg "var") " corresponds to an accessible part of the document. For instance, " (TeXmacs) " automatically generates labels for section titles (so as to include them in the table of contents), but it is undesirable to display informative flags for such labels."))) (section "Internal primitives") (concat "The primitives in this section are merely for internal use by " (TeXmacs) " only. They are documented for the sake of completeness, but you should only use them if you really know what you are doing.") (explain (concat (explain-macro "uninit") (explain-synopsis "unknown content or unintialized data")) (document "This primitive is mainly used for default uninialized value of environment variables; the main advantage of this tag is to be distinct from the empty string.")) (explain (concat (explain-macro "unknown") (explain-synopsis "unknown content or unintialized data")) (document "This primitive is mainly used for default uninialized value of environment variables; the main advantage of this tag is to be distinct from the empty string." (concat "This value is less likely to be encountered than " (src-macro "uninit")))) (explain (concat (explain-macro "error" "message") (explain-synopsis "error messages")) (document "This primitive should never appear in documents. It is provided as aid in tracking down invalid constructs. It is produced at evaluation time by any kind of primitive which is given improper operands.")) (explain (document (explain-macro "collection" "binding-1" (math "<cdots>") "binding-n") (concat (explain-macro "associate" "key" "value") (explain-synopsis "collections of bindings"))) (document (concat "The " (markup "collection") " tag is used to represent hashtables with bindings " (src-arg "binding-1") " until " (src-arg "binding-n") ". Each binding is of the form " (explain-macro "associate" "key" "value") ", with a " (src-arg "key") " and an associated " (src-arg "value") "."))) (explain (document (concat (explain-macro "attr" "key-1" "val-1" (math "<cdots>") "key-n" "val-n") (explain-synopsis "XML-like attributes"))) (document (concat "This tag is included for future compatibility with XML. It is used for encoding XML-style attributes by " (TeXmacs) " trees. For instance, the fragment") (quote-env (document (framed-fragment (verbatim (document "<less>blah color=\"blue\" emotion=\"verbose\"<gtr>" "  Some XML stuff" "<less>/blah<gtr>"))))) "would typically be represented as" (tm-fragment (document (inactive* (blah (attr "color" "blue" "emotion" "verbose") "Some XML stuff")))))) (explain (document (explain-macro "tag" "content" "annotation") (concat (explain-macro "meaning" "content" "annotation") (explain-synopsis "associate a meaning to some content"))) (document (concat "Associate a special meaning to some " (src-arg "content") ". Currently, no real use has been made of these tags."))) (explain (document (concat (explain-macro "backup" "save" "stack") (explain-synopsis "save values on stack"))) (document "Used to represent temporarily saved values on a stack.")) (explain (document (concat (explain-macro "dbox") (explain-synopsis "marker for decorations"))) (document (concat "This primitive is only intended for internal use by the " (markup "datoms") ", " (markup "dlines") " and " (markup "dpages") " primitives."))) (explain (document (concat (explain-macro "rewrite-inactive" "t" "var") (explain-synopsis "internal primitive for rendering inactive markup"))) (document "This internal primitive is used for rewriting an inactive tree into a new tree whose rendering corresponds to the rendering of the inactive tree. It may be successfully invoked from within a macro." (concat "e.g. " (inactive* (assign "show-inactive" (macro "x" (rewrite-inactive (arg "x") ""))))) (concat "which might be invoked to show itself or another assigned variable using " (src-macro "quasiquote") " in this manner: " (inactive* (quasiquote (show-inactive (unquote (value "show-inactive")))))) "")) (explain (document (explain-macro "new-dpage") (concat (explain-macro "new-dpage*") (explain-synopsis "new double page"))) (document "Yet to be implemented primitives for starting a new double page.")) (explain (document (concat (explain-macro "identity" "markup") (explain-synopsis "identity macro"))) (document (concat "The identity macro is built-in into " (TeXmacs) ". It should not really be considered as a primitive, but it is not part of any style file either."))) (concat "In addition to these primitives for internal use only, there are also quite a few obsolete primitives, which are no longer being used by " (TeXmacs) ", but whose names should be avoided when creating your own macros. The full list of obsolete primitives is: " (markup "format") ", " (markup "line-sep") ", " (markup "with-limits") ", " (markup "split") ", " (markup "old-matrix") ", " (markup "old-table") ", " (markup "old-mosaic") ", " (markup "old-mosaic-item") ", " (markup "set") ", " (markup "reset") ", " (markup "expand") ", " (markup "expand*") ", " (markup "hide-expand") ", " (markup "apply") ", " (markup "begin") ", " (markup "end") ", " (markup "func") ", " (markup "env") ", " (markup "authorize") ".") (chapter (concat "The standard " (TeXmacs) " styles")) (concat "The user may select a major style from the " (menu "Document" "Style") " menu. The major style usually reflects the kind of document you want to produce (like a letter, an article or a book) or a particular layout policy (like publishing an article in a given journal).") (concat "The user may further customize the main style, by selecting one or more additional style packages. Some of these packages are available in the menu " (menu "Document" "Style" "Add package") ". Other style packages mainly customize specific tags, and they can be selected from the " (menu "Focus" "Preferences" "Style options") " menu group, whenever available. For instance, inside a theorem, you may use " (menu "Focus" "Preferences" "European numbering") " to enable European style numbering for theorem-like environments (that is, theorems, propositions, lemmas, " (abbr "etc.") " are all numbered using their own individual counters).") (concat "In this chapter, we will survey the standard document styles and packages provided by " (TeXmacs) ". Most style files and packages have an abstract interface, the " (abbr "d.t.d.") " (data domain definition), which specifies which macros are exported by the style or package, and how to use them. Distinct styles or packages (like " (tmpackage "header-article") " and " (tmpackage "header-book") ") may share the same abstract interface, but differ in the way macros are rendered. For this reason, we will mainly be concerned with the description of the standard " (abbr "d.t.d.") "s, except when we focus on the rendering. Users may customize standard styles by defining new ones which match the same abstract interface (see the chapter on " (hlink (concat "writing " (TeXmacs) " style files") "../devel/style/style.en.tm") ").") (section "General organization") (subsection (concat "Standard " (TeXmacs) " styles")) (concat "The main " (TeXmacs) " styles are:") (explain (tmstyle "generic") (document "This is the default style when you open a new document. The purpose of this style is to produce quick, informal documents. For this reason, the layout of paragraphs is very simple: instead of indenting the first lines of paragraphs, they are rather separated by white-space.")) (explain (tmstyle "article") (document (concat "This style may be used for writing short scientific articles, which are subdivided into sections. The numbering of environments like theorems, remarks, " (abbr "etc.") " is relative to the entire document. If you use the " (tmpackage "number-long-article") " package, then the numbers are prefixed by the section number."))) (explain (tmstyle "beamer") (document (concat "This style may be used for the creation of highly interactive laptop presentations. By default, we use a ``bluish'' theme similar to the " (LaTeX) " beamer package, but other themes can be selected from the menus."))) (explain (tmstyle "book") (document (concat "This is the basic style for writing books. Books are assumed to be subdivided into chapters and numbers of environments are prefixed by the chapter number. In general, it is also comfortable to store each chapter in a separate file, so that they can be edited more efficiently. This issue is explained in more detail in the section about " (hlink "books and multifile documents" "links/man-multifile.en.tm") "."))) (explain (tmstyle "seminar") (document (concat "Documents based on this style are typically printed on slides for presentations using an overhead projector. You may also want to use it when making presentation directly from your laptop, after selecting " (menu "View" "Presentation mode") ". Notice however, that slides correspond to real pages, whereas you rather should use ``switches'' in presentation mode."))) (explain (tmstyle "source") (document (concat "This is the privileged style for editing style files and packages. It enables ``source mode'', so that documents are rendered in a way which makes the structure fully apparent. For more details, we refer to the section on the " (hlink "rendering of style files" "../devel/style/presentation/src-present.en.tm") "."))) (concat "The " (tmstyle "article") " style admits several variants, so as to make the layout correspond to the policy of specific journals. Currently, we have implemented " (TeXmacs) " analogues of the common " (LaTeX) " styles " (tmstyle "amsart") ", " (tmstyle "acmconf") ", " (tmstyle "elsart") ", " (tmstyle "ieeeconf") ", " (tmstyle "aip") ", " (tmstyle "aps") ", " (tmstyle "svjour") ", etc. Similarly, we are developing styles " (tmstyle "tmarticle") " and " (tmstyle "tmbook") " which provide an alternative layout for articles and books.") (concat "In addition to variants of the " (tmstyle "article") " and " (tmstyle "book") " styles, " (TeXmacs) " provides also a few other styles, which are based on the main styles, but which provide some additional markup.") (explain (tmstyle "letter") (document (concat "This style is based on the informal " (tmstyle "generic") " style, but it provides additional markup for writing letters. The additional macros are mainly used for headers and endings of letters."))) (explain (tmstyle "exam") (document (concat "This style, which is again based on " (tmstyle "generic") ", provides some additional markup for headers of exams. It also customizes the rendering of exercises."))) (explain (tmstyle "tmdoc") (document (concat "This style is used for writing the " (TeXmacs) " documentation. It contains several tags for special types of content and extensions for linking, indexing, document traversal, " (abbr "etc.") ". Some aspects of this style are still under heavy development."))) (subsection (concat "Standard " (TeXmacs) " packages")) (concat "First of all, " (TeXmacs) " provides several packages for customizing the behaviour of the standard styles:") (explain (tmpackage "number-long-article") (document (concat "This package induces all numbers of environments (theorems, remarks, equations, figures, " (abbr "etc.") ") to be prefixed by the current section number. It is usually used in combination with the " (tmstyle "article") " style (for long articles) and the " (tmstyle "book") " style (for books with long chapters)."))) (explain (tmpackage "number-europe") (document (concat "By default, " (TeXmacs) " uses ``American style numbering''. This means that the same counter is used for numbering similar environments like theorem and proposition. In other words, a remark following ``Theorem 3'' will be numbered ``Remark 4''. If you want each environment to have its individual counter, then you should enable ``European style numbering'', by selecting the " (tmpackage "number-europe") " package."))) (explain (tmpackage "number-us") (document "This package may be used in order to switch back to American style numbering in the case when a third parties style file enforces European style numbering.")) (explain (tmpackage "structured-list") (document (concat "This is an experimental package. By default, items in unnumbered lists or enumerations take no arguments and items in descriptions one argument. When using the " (tmpackage "structured-list") " package, they take an optional additional argument with the body of the item."))) (explain (tmpackage "structured-section") (document (concat "This is an experimental package. By default, sectional tags only take a title argument. When using the " (tmpackage "structured-section") " package, they take an optional additional argument with the body of the section. Moreover, the environment " (markup "rsection") " for recursive sections is provided."))) (explain (tmpackage "framed-session") (document "This package may be used in order to obtain an alternative rendering of interactive sessions. The rendering is designed to be nice for interactive use, although less adequate for printing.")) (concat "In addition to these packages, and the many packages for internal use, " (TeXmacs) " also provides a few personal example style packages " (tmpackage "allouche") ", " (tmpackage "bpr") " and " (tmpackage "vdh") " and several style packages for use in combination with external plug-ins (" (tmpackage "axiom") ", " (tmpackage "giac") ", " (tmpackage "macaulay2") ", " (abbr "etc.") ").") (section "The common base for most styles") (concat "The " (tmdtd "std") " " (abbr "d.t.d.") " contains the markup which is common to virtually all styles. It is subdivided into the following parts:") (subsection "Standard markup") (concat "Various standard markup is defined in " (tmdtd "std-markup") ". The following textual content tags all take one argument. Most can be found in the " (menu "Insert" "Content tag") " menu.") (explain (explain-macro "strong" "content") (document (concat "Indicates an " (strong "important") " region of text. You can enter this tag via " (menu "Insert" "Content tag" "Strong") "."))) (explain (explain-macro "em" "content") (document (concat "Emphasizes a region of text like in ``the " (em "real") " thing''. This tag corresponds to the menu entry  " (menu "Insert" "Content tag" "Emphasize") "."))) (explain (explain-macro "dfn" "content") (document (concat "For definitions like ``a " (dfn "gnu") " is a horny beast''. This tag corresponds to " (menu "Insert" "Content tag" "Definition") "."))) (explain (explain-macro "samp" "content") (document (concat "A sequence of literal characters like the " (samp "ae") " ligature æ. You can get this tag via " (menu "Insert" "Content tag" "Sample") "."))) (explain (explain-macro "name" "content") (document (concat "The name of a particular thing or concept like the " (name "Linux") " system. This tag is obtained using " (menu "Insert" "Content tag" "Name") "."))) (explain (explain-macro "person" "content") (document (concat "The name of a person like " (name "Joris") ". This tag corresponds to " (menu "Insert" "Content tag" "Person") "."))) (explain (explain-macro "cite*" "content") (document (concat "A bibliographic citation like a book or magazine. Example: Melville's " (cite* "Moby Dick") ". This tag, which is obtained using " (menu "Insert" "Content tag" "Cite") ", should not be confused with " (markup "cite") ". The latter tag is also used for citations, but where the argument refers to an entry in a database with bibliographic references."))) (explain (explain-macro "abbr" "content") (document (concat "An abbreviation. Example: I work at the " (abbr "C.N.R.S.") " An abbreviation is created using " (menu "Insert" "Content tag" "Abbreviation") " or the " (key "text a") " keyboard shortcut."))) (explain (explain-macro "acronym" "content") (document (concat "An acronym is an abbreviation formed from the first letter of each word in a name or a phrase, such as " (acronym "HTML") " or " (acronym "IBM") ". In particular, the letters are not separated by dots. You may enter an acronym using " (menu "Insert" "Content tag" "Acronym") "."))) (explain (explain-macro "verbatim" "content") (document (concat "Verbatim text like output from a computer program. Example: the program said " (verbatim "hello") ". You may enter verbatim text via " (menu "Insert" "Content tag" "Verbatim") ". The tag may also be used as an environment for multi-paragraph text."))) (explain (explain-macro "kbd" "content") (document (concat "Text which should be entered on a keyboard. Example: please type " (kbd "return") ". This tag corresponds to the menu entry " (menu "Insert" "Content tag" "Keyboard") "."))) (explain (explain-macro "code*" "content") (document (concat "Code of a computer program like in ``" (code* "cout <less><less> 1+1;") " yields " (verbatim "2") "''. This is entered using " (menu "Insert" "Content tag" "Code") ". For longer pieces of code, you should use the " (markup "code") " environment."))) (explain (explain-macro "var" "content") (document (concat "Variables in a computer program like in " (verbatim (concat "cp " (var "src-file") " " (var "dest-file"))) ". This tag corresponds to the menu entry " (menu "Insert" "Content tag" "Variable") "."))) (explain (explain-macro "math" "content") (document (concat "This tag is used for mathematics inside regular text. Example: the formula " (math (concat "sin" (rsup "2") " x+cos" (rsup "2") " x=1")) " is well-known."))) (explain (explain-macro "op" "content") (document (concat "This is a tag which can be used inside mathematics for specifying that an operator should be considered on itself, without any arguments. Example: the operation " (math (op "+")) " is a function from " (math (concat "<bbb-R>" (rsup "2"))) " to " (math "<bbb-R>") ". This tag may become depreciated."))) (explain (explain-macro "tt" "content") (document (concat "This is a physical tag for typewriter phase. It is used for compatibility with " (name "HTML") ", but we do not recommend its use."))) (concat "Most of the following logical size tags can be found in " (menu "Insert" "Size tag") " (or " (menu "Insert" "Size tag") "):") (explain (document (concat (explain-macro "really-tiny" "content") ", " (explain-macro "tiny" "content")) (concat (explain-macro "really-small" "content") ", " (explain-macro "very-small" "content") ", " (explain-macro "smaller" "content") ", " (explain-macro "small" "content")) (explain-macro "normal-size" "content") (concat (explain-macro "large" "content") ", " (explain-macro "larger" "content") ", " (explain-macro "very-large" "content") ", " (explain-macro "really-large" "content")) (concat (explain-macro "huge" "content") ", " (explain-macro "really-huge" "content"))) (document "These logical size tags should be used by preference when typesetting parts of your document in a larger or smaller font. Environments like footnotes or captions of tables may also be based on logical size tags. Document styles from professional publishers often assign very precise font settings to each of the logical size tags. By default, the size tags are rendered as follows:" (tm-fragment (document (really-tiny "Really tiny") (tiny "Tiny") (really-small "Really small") (very-small "Very small") (smaller "Smaller") (small "Small") (normal-size "Normal size") (large "Large") (larger "Larger") (very-large "Very large") (really-large "Really large") (huge "Huge") (really-huge "Really huge"))))) "The following are standard environments:" (explain (explain-macro "verbatim" "body") (document "Described above.")) (explain (explain-macro "code" "body") (document (concat "Similar to " (markup "code*") ", but for pieces of code of several lines."))) (explain (explain-macro "quote-env" "body") (document "Environment for short (one paragraph) quotations.")) (explain (explain-macro "quotation" "body") (document "Environment for long (multi-paragraph) quotations.")) (explain (explain-macro "verse" "body") (document "Environment for poetry.")) (explain (explain-macro "center" "body") (document (concat "This is a physical tag for centering one or several lines of text. It is used for compatibility with " (name "HTML") ", but we do not recommend its use."))) "Some standard tabular environments are" (explain (explain-macro "tabular*" "table") (document "Centered tables.")) (explain (explain-macro "block" "table") (document (concat "Left aligned tables with a border of standard " (verbatim "1ln") " width."))) (explain (explain-macro "block*" "table") (document (concat "Centered tables with a border of standard " (verbatim "1ln") " width."))) "The folowing tags are used to adjust the typesetting of content whenever necessary:" (explain (document (explain-macro "smash" "body") (concat (explain-macro "smash-top" "body") ", " (explain-macro "smash-bottom" "body") (explain-synopsis "smash vertical size to the size of an 'x'"))) (document (concat "These macros can be used to adjust the vertical extents of the " (src-arg "body") " to those of the character" (nbsp) "'x'. In the case of " (markup "smash-top") " and " (markup "smash-bottom") ", only the top " (abbr "resp.") " bottom are changed."))) (explain (document (explain-macro "swell" "body") (concat (explain-macro "swell-top" "body") ", " (explain-macro "swell-bottom" "body") (explain-synopsis "increase vertical size to the largest character in font"))) (document (concat "These macros can be used to increase the vertical extents of the " (src-arg "body") " to those of the largest character in the current font. In the case of " (markup "swell-top") " and " (markup "swell-bottom") ", only the top " (abbr "resp.") " bottom are changed. This kind of adjustments may for instance be used in order to ensure that " (math "2<times>2") (nbsp) "matrices with simple textual contents always have the same size:") (equation* (document (concat (matrix (tformat (table (row (cell "f") (cell "0")) (row (cell "0") (cell "f"))))) "," (matrix (tformat (table (row (cell "a") (cell "x")) (row (cell "0") (cell "a"))))) (with "mode" "text" " versus ") (matrix (tformat (cwith "1" "-1" "1" "-1" "cell-vcorrect" "n") (table (row (cell "f") (cell "0")) (row (cell "0") (cell "f"))))) "," (matrix (tformat (cwith "1" "-1" "1" "-1" "cell-vcorrect" "n") (table (row (cell "a") (cell "x")) (row (cell "0") (cell "a")))))))) "In fact, for a more uniform appearance, swelling is activated by default inside matrices.")) (explain (document (concat (explain-macro "extend" "content" "left-lim" "bot-lim" "right-lim" "top-lim") (explain-synopsis "extend the size"))) (document (concat "This primitive is similar to " (markup "resize") ", except that the new size of the " (src-arg "content") " is always larger than the original size."))) "The following miscellaneous tags don't take arguments:" (explain (explain-macro "TeXmacs") (concat "The " (TeXmacs) " logo.")) (explain (explain-macro "TeXmacs-version") (concat "The current version of " (TeXmacs) " (" (TeXmacs-version) ").")) (explain (explain-macro "made-by-TeXmacs") (concat "A macro which may be used to indicate that your document was written using " (TeXmacs) ".")) (explain (explain-macro "TeX") (concat "The " (TeX) " logo.")) (explain (explain-macro "LaTeX") (concat "The " (LaTeX) " logo.")) (explain (explain-macro "hrule") (document "A horizontal rule like the one you see below:" (hrule))) "The following miscellaneous tags all take one or more arguments:" (explain (explain-macro "phantom" "content") (document (concat "This tag takes as much space as the typeset argument " (src-arg "content") " would take, but " (src-arg "content") " is not displayed. For instance, " (inactive* (phantom "phantom")) " yields ``" (phantom "phantom") "''."))) (explain (explain-macro "overline" "content") (document (concat "For " (overline "overlined text") ", which can be wrapped across several lines."))) (explain (explain-macro "underline" "content") (document (concat "For " (underline "underlined text") ", which can be wrapped across several lines."))) (explain (explain-macro "folded" "summary" "body") (document (concat "The " (src-arg "summary") " is displayed and the " (src-arg "body") " ignored: the macro corresponds to the folded presentation of a piece of content associated to a short title or abstract. The second argument can be made visible using " (menu "Insert" "Switch" "Unfold") "."))) (explain (explain-macro "unfolded" "summary" "body") (document (concat "Unfolded presentation of a piece of content " (src-arg "body") " associated to a short title or abstract " (src-arg "summary") ". The second argument can be made invisible using " (menu "Insert" "Switch" "Fold") "."))) (explain (explain-macro "switch" "current" "alternatives") (document (concat "Content which admits a finite number of alternative representation among which the user can switch using the function keys " (key "F9") ", " (key "F10") ", " (key "F11") " and " (key "F12") ". This may for instance be used in interactive presentations. The argument " (src-arg "current") " correspond to the currently visible presentation and " (src-arg "alternative") " to the set of alternatives."))) (subsection "Standard symbols") (concat "The " (tmdtd "std-symbol") " " (abbr "d.t.d.") " defines the special symbols " (cent) ", " (currency) ", " (yen) ", " (copyright) ", " (copyleft) ", " (registered) ", " (degreesign) ", " (twosuperior) ", " (threesuperior) ", " (onesuperior) ", " (mu) ", " (paragraphsign) ", " (onequarter) ", " (onehalf) ", " (threequarters) ", " (euro) " and" (nbsp) (trademark) ". It also provides the macro " (markup "nbsp") " for non-breakable spaces.") (concat "As soon as the font support will be further improved, this " (abbr "d.t.d.") " should become obsolete.") (subsection "Standard mathematical markup") (concat "Standard mathematical markup is defined in " (tmdtd "std-math") ".") (explain (explain-macro "binom" "among" "nr") (document (concat "For binomial coefficients, like " (math (binom "n" "m")) "."))) (explain (explain-macro "choose" "among" "nr") (document (concat "Alternative name for " (markup "binom") ", but depreciated."))) (explain (explain-macro "shrink-inline" "among" "nr") (document (concat "A macro which switches to scriptsize text when you are not in display style. This macro is mainly used by developers. For instance, the " (markup "binom") " macro uses it."))) "The following are standard mathematical tabular environments:" (explain (explain-macro "matrix" "table") (document (concat "For matrices " (math (concat "M=" (matrix (tformat (table (row (cell "1") (cell "2")) (row (cell "3") (cell "4"))))))) "."))) (explain (explain-macro "det" "table") (document (concat "For determinants " (math (concat "<Delta>=" (det (tformat (table (row (cell "1") (cell "2")) (row (cell "3") (cell "4"))))))) "."))) (explain (explain-macro "choice" "table") (document (concat "For choice lists " (math (concat (around "|" "x" "|") "=" (choice (tformat (table (row (cell "<um>x,") (cell (concat (text "if ") "x<leqslant>0"))) (row (cell "x,") (cell (concat (text "if ") "x<geqslant>0")))))))) "."))) (subsection "Standard lists") (subsubsection "Using list environments") (concat "The standard " (TeXmacs) " lists are defined in " (tmdtd "std-list") ". The unnumbered lists environments are:") (explain (explain-macro "itemize" "body") (document "The tag before each item depends on the nesting depth.")) (explain (explain-macro "itemize-minus" "body") (document (concat "Uses " (math "-") " for the tag."))) (explain (explain-macro "itemize-dot" "body") (document (concat "Uses " (math "<bullet>") " for the tag."))) (explain (explain-macro "itemize-arrow" "body") (document (concat "Uses " (math "<rightarrow>") " for the tag."))) "The following environments can be used for producing numbered lists:" (explain (explain-macro "enumerate" "body") (document "The kind of number before each item depends on the nesting depth.")) (explain (explain-macro "enumerate-numeric" "body") (document (concat "Number the items by 1, 2, 3, " (abbr "etc.")))) (explain (explain-macro "enumerate-roman" "body") (document (concat "Number the items by i, ii, iii, " (abbr "etc.")))) (explain (explain-macro "enumerate-Roman" "body") (document (concat "Number the items by I, II, III, " (abbr "etc.")))) (explain (explain-macro "enumerate-alpha" "body") (document (concat "Number the items by a), b), c), " (abbr "etc.")))) (explain (explain-macro "enumerate-Alpha" "body") (document (concat "Number the items by A), B), C), " (abbr "etc.")))) "The following environments can be used for descriptive lists:" (explain (explain-macro "description" "body") (document (concat "The environment for default descriptive lists (usually " (markup "description-compact") ")."))) (explain (explain-macro "description-compact" "body") (document "Align the left hand sides of the items in the list and put their descriptions shortly behind it.")) (explain (explain-macro "description-dash" "body") (document (concat "Similar to " (markup "description-compact") ", but use a  to separate each item from its description."))) (explain (explain-macro "description-align" "body") (document "Align the left hand sides of the descriptions, while aligning the items to the right.")) (explain (explain-macro "description-long" "body") (document "Put the items and their descriptions on distinct lines.")) (concat "New items in a list are indicated through the " (markup "item") " tag or the " (markup "item*") " tag in the case of descriptions. The " (markup "item") " tag takes no arguments and the " (markup "item*") " tag one argument. When using the experimental " (tmdtd "structured-list") " package, these tags may take an optional body argument. In the future, all list items should become structured.") (concat "By default, items in sublists are numbered in the same way as usual lists. Each list environment " (markup (em "list")) " admits a variant " (markup (concat (em "list") "*")) " whose items are prefixed by the last item in the parent list. Of course, this feature can be used recursively.") (subsubsection "Customization of list environments") (concat "The " (tmdtd "std-list") " provides the following redefinable macros for customizing the rendering of lists and items in lists:") (explain (explain-macro "render-list" "body") (document (concat "This block environment is used to render the " (src-arg "body") " of the list. Usually, the macro indents the body and puts some vertical space around it."))) (explain (explain-macro "aligned-item" "item-text") (document (concat "This inline macro is used to render the " (src-arg "item-text") " in a right-aligned way. As a consequence, text after such items will appear in a left-aligned way."))) (explain (explain-macro "compact-item" "item-text") (document (concat "This inline macro is used to render the " (src-arg "item-text") " in a left-aligned way. As a consequence, text after such items may be indented by the width of the " (src-arg "item-text") " (except when the text is rendered on a different paragraph)."))) (subsection "Automatic content generation") (concat "The " (tmdtd "std-automatic") " " (abbr "d.t.d.") " contains macros for the automatic generation and rendering of auxiliary content. There are four main types of such content in " (TeXmacs) ": bibliographies, tables of contents, indexes and glossaries. Other types of automatically generated content like lists of figures are usually similar to one of the four above types (in the case of lists of figures, we use glossaries). The rendering of the entire sections which contain the bibliographies, tables of contents, " (abbr "etc.") " are specified in the " (hlink (concat (tmdtd "section-base") " " (abbr "d.t.d.")) "styles/section/section-base-dtd.en.tm") ".") (subsubsection "Bibliographies") "The following macros may be used in the main text for citations to entries in a bibliographic database." (explain (explain-macro "cite" "ref-1" (math "<cdots>") "ref-n") (document (concat "Each argument " (src-arg "ref-i") " is a citation corresponding to an item in a BiB-" (TeX) " file. The citations are displayed in the same way as they are referenced in the bibliography and they also provide hyperlinks to the corresponding references. The citations are displayed as question marks if you did not generate the bibliography. Once you've added a bibliography file, pressing " (key "tab") " inside the arguments will auto-complete with the cite-keys in your file."))) (explain (explain-macro "nocite" "ref-1" (math "<cdots>") "ref-n") (document (concat "Similar as " (markup "cite") ", but the citations are not displayed in the main text."))) (explain (explain-macro "cite-detail" "ref" "info") (document (concat "A bibliographic reference " (src-arg "ref") " like " (markup "cite") " and " (markup "nocite") ", but with some additional information " (src-arg "info") ", like a chapter or a page number."))) "The following macros may be redefined if you want to customize the rendering of citations or entries in the generated bibliography:" (explain (explain-macro "render-cite" "ref") (document (concat "Macro for rendering a citation " (src-arg "ref") " at the place where the citation is made using " (markup "cite") ". The " (src-arg "content") " may be a single reference, like ``TM98'', or a list of references, like ``Euler1, Gauss2''."))) (explain (explain-macro "render-cite-detail" "ref" "info") (document (concat "Similar to " (markup "render-cite") ", but for detailed citations made with " (markup "cite-detail") "."))) (explain (document (explain-macro "render-bibitem" "content") (explain-macro "transform-bibitem" "content")) (document (concat "At the moment, bibliographies are generated by Bib" (TeX) " and imported into " (TeXmacs) ". The produced bibliography is a list of bibliographic items with are based on special " (LaTeX) "-specific macros (" (markup "bibitem") ", " (markup "block") ", " (markup "protect") ", " (abbr "etc.") "). These macros are all defined internally in " (TeXmacs) " and eventually boil down to calls of the " (markup "render-bibitem") ", which behaves in a similar way as " (markup "item*") ", and which may be redefined by the user.") (concat "The " (markup "transform-bibitem") " is used to ``decorate'' the " (src-arg "content") ". For instance, " (markup "transform-bibitem") " may put angular brackets and a space around " (src-arg "content") "."))) (explain (explain-macro "bib-list" "largest" "body") (document (concat "The individual ``bibitems'' are enclosed in a " (markup "bib-list") ", which behaves in a similar way as the " (markup "description") " environment, except that we provide an extra parameter " (src-arg "largest") " which contains a good indication about the largest width of an item in the list."))) (subsubsection "Tables of contents") "The following macros may be used in the main text for adding entries to the table of contents. They are automatically called by most sectional macros, but it is sometimes desirable to manually add additional entries." (explain (document (explain-macro "toc-main-1" "entry") (explain-macro "toc-main-2" "entry")) (document (concat "Create an important " (src-arg "entry") " in the table of contents. The macro " (markup "toc-main-1") " is intended to be used only for very important entries, such as parts of a book; it usually has to be added manually. The macro " (markup "toc-main-2") " is intended to be used for chapter or sections. Important entries are usually displayed in a strong font."))) (explain (document (explain-macro "toc-normal-1" "entry") (explain-macro "toc-normal-2" "entry") (explain-macro "toc-normal-3" "entry")) (document (concat "Add a normal " (src-arg "entry") " to the table of contents, of different levels of importance. Usually, " (markup "toc-normal-1") " corresponds to sections, " (markup "toc-normal-2") " to subsections and " (markup "toc-normal-3") " to subsubsections."))) (explain (document (explain-macro "toc-small-1" "entry") (explain-macro "toc-small-2" "entry")) (document (concat "Add an unimportant " (src-arg "entry") " to the table of contents, like a paragraph. Since such entries are not very important, some styles may simply ignore the " (markup "toc-small-1") " and " (markup "toc-small-2") " tags."))) "By redefining the following macros, it is possible to customize the rendering of tables of contents:" (explain (document (explain-macro "toc-strong-1" "content" "where") (explain-macro "toc-strong-2" "content" "where")) (document (concat "Used for rendering table of contents entries created using " (markup "toc-main-1") " " (abbr "resp.") " " (markup "toc-main-2") "."))) (explain (document (explain-macro "toc-1" "content" "where") (explain-macro "toc-2" "content" "where") (explain-macro "toc-3" "content" "where") (explain-macro "toc-4" "content" "where") (explain-macro "toc-5" "content" "where")) (document (concat "Used for rendering table of contents entries created using " (markup "toc-normal-1") ", " (markup "toc-normal-2") ", " (markup (concat "toc-" (no-break) "normal-" (no-break) "3")) ", " (markup "toc-small-1") " " (abbr "resp.") " " (markup "toc-small-2") "."))) (explain (explain-macro "toc-dots") (document "The separation between an entry in the table of contents and the corresponding page number. By default, we use horizontal dots.")) (subsubsection "Indexes") "The following macros may be used in the main text for inserting entries into the index." (explain (explain-macro "index" "primary") (document (concat "Insert " (src-arg "primary") " as a primary entry in the index."))) (explain (explain-macro "subindex" "primary" "secondary") (document (concat "Insert " (src-arg "secondary") " in the index as a subentry of " (src-arg "primary") "."))) (explain (explain-macro "subsubindex" "primary" "secondary" "ternary") (document (concat "Similar to " (markup "subindex") " but for subsubentries " (src-arg "ternary") "."))) (explain (explain-macro "index-complex" "key" "how" "range" "entry") (document (concat "Insert complex entries into the index. This feature is documented in detail in the section about " (hlink "index generation" "links/man-index.en.tm") "."))) (explain (explain-macro "index-line" "key" "entry") (document (concat "Adds " (src-arg "entry") " to the index, by sorting it according to " (src-arg "key") "."))) "The following macros may be redefined if you want to customize the rendering of the index:" (explain (document (explain-macro "index-1" "entry" "where") (explain-macro "index-2" "entry" "where") (explain-macro "index-3" "entry" "where") (explain-macro "index-4" "entry" "where") (explain-macro "index-5" "entry" "where")) (document (concat "Macro for rendering an " (src-arg "entry") " in the index on page(s) " (src-arg "where") ". The macro " (markup "index-1") " corresponds to principal entries, the macro " (markup "index-2") " to secondary entries, and so on."))) (explain (document (explain-macro "index-1*" "entry") (explain-macro "index-2*" "entry") (explain-macro "index-3*" "entry") (explain-macro "index-4*" "entry") (explain-macro "index-5*" "entry")) (document (concat "Similar to " (markup "index-1") " until " (markup "index-5") ", but without the page number(s)."))) (explain (explain-macro "index-dots") (document "Macro for producing the dots between an index entry and the corresponding page number(s).")) (subsubsection "Glossaries") "The following macros may be used in the main text for inserting glossary entries." (explain (explain-macro "glossary" "entry") (document (concat "Insert " (src-arg "entry") " into the glossary."))) (explain (explain-macro "glossary-dup" "entry") (document (concat "For creating an additional page number for an " (src-arg "entry") " which was already inserted before."))) (explain (explain-macro "glossary-explain" "entry" "explanation") (document (concat "A function for inserting a glossary " (src-arg "entry") " with its " (src-arg "explanation") "."))) (explain (explain-macro "glossary-line" "entry") (document (concat "Insert a glossary " (src-arg "entry") " without a page number."))) "The following macros can be redefined if you want to customize the rendering of the glossary:" (explain (explain-macro "glossary-1" "entry" "where") (document "Macro for rendering a glossary entry and its corresponding page number(s).")) (explain (explain-macro "glossary-2" "entry" "explanation" "where") (document "Macro for rendering a glossary entry, its explanation, and its page number.")) (explain (explain-macro "glossary-dots") (document "Macro for producing the dots between a glossary entry and the corresponding page number(s).")) (subsection "Utilities for writing style files") (concat "The " (tmdtd "std-utils") " package provides several macros which may be useful when writing style files. First of all, the following macros may be used for rendering purposes:") (explain (document (explain-macro "hflush") (explain-macro "left-flush") (explain-macro "right-flush")) (document (concat "Low level tags for flushing to the right in the definition of environments. One usually should use " (markup "wide-normal") " or " (markup "wide-centered") " instead."))) (explain (document (explain-macro "wide-normal" "body") (explain-macro "wide-centered" "body")) (document (concat "These tags are used to make the " (src-arg "body") " span over the entire paragraph width. The text is left-aligned in the case of " (markup "wide-normal") " and centered in the case of " (markup "wide-centered") ". Making a body span over the entire paragraph width does not change the rendering on paper, but it facilitates the editing on the document. Indeed, on the one hand, the box which indicates that you are inside the environment will span over the entire paragraph width. On the other hand, when clicking sufficiently close to the text inside this box, it becomes easier to position your cursor at the start or at the end inside the environment. You may check this by clicking on one of the texts below:") (concat (with "color" "red" "<gtr>") (wide-normal (concat "Some text inside a " (markup "wide-normal") " environment.")) (with "color" "red" "<less>")) (concat (with "color" "red" "<gtr>") (wide-centered (concat "Some text inside a " (markup "wide-centered") " environment.")) (with "color" "red" "<less>")))) (explain (document (explain-macro "padded-normal" "space-above" "space-below" "body") (explain-macro "padded-centered" "space-above" "space-below" "body")) (document (concat "These tags are variants of " (explain-macro "wide-normal" "body") " and " (explain-macro "wide-centered" "body") ", which put some vertical white space " (src-arg "space-above") " and " (src-arg "space-below") " above and below the " (src-arg "body") "."))) (explain (document (explain-macro "wide-bothlined" "top-border" "bot-border" "top-sep" "bot-sep" "body") (explain-macro "wide-std-bothlined" "body") (explain-macro "padded-bothlined" "space-above" "space-below" "top-border" "bot-border" "top-sep" "bot-sep" "body") (explain-macro "padded-std-bothlined" "space-above" "space-below" "body") (explain-macro "wide-underlined" "bborder" "bsep" "body") (explain-macro "wide-std-underlined" "body")) (document (concat "These tags are used to make the " (src-arg "body") " span over the entire paragraph width and to put a horizontal rule above and/or below it. The widths of the rules are given by " (src-arg "top-border") " and " (src-arg "bot-border") " and the separation between the rules by " (src-arg "top-sep") " and " (src-arg "bot-sep") ". The standard width and separation (used by " (markup "wide-std-bothlined") ", " (markup "padded-std-bothlined") " and " (markup "wide-std-underlined") ") are " (verbatim "1ln") " and " (verbatim "1sep") ". The padded variants specify additional spaces " (src-arg "space-above") " and " (src-arg "space-below") " above and below the rules. As an example, " (inactive* (wide-std-underlined (concat "left" (htab "5mm") "right"))) " yields:") (wide-std-underlined (concat "left" (htab "5mm") "right")) "Wide underlined environments are typically used for page headers. Wide environments which are both overlined and underlined are typically used for abstracts or floating figures and tables.")) (explain (document (explain-macro "wide-framed" "border-width" "hsep" "vsep" "body") (explain-macro "wide-std-framed" "body") (explain-macro "wide-framed-colored" "border-color" "body-color" "border-width" "hsep" "vsep" "body") (explain-macro "wide-std-framed-colored" "border-color" "body-color" "body")) (document (concat "These tags put the " (src-arg "body") " inside a frame box which spans over the whole paragraph. The user may specify a " (src-arg "border-width") ", horizontal and vertical separations " (src-arg "hsep") " and " (src-arg "vsep") " between the border and the text, and colors " (src-arg "border-color") " and " (src-arg "body-color") " for the border and the background. For instance, " (inactive* (wide-std-framed-colored "brown" "pastel green" "Hi there!")) " yields") (wide-std-framed-colored "brown" "pastel green" "Hi there!"))) (explain (document (explain-macro "indent-left" "left-amount" "body") (explain-macro "indent-right" "right-amount" "body") (explain-macro "indent-both" "left-amount" "right-amount" "body")) (document (concat "These environments may be used in order to increase the current left and/or right indentation by the amounts " (src-arg "left-amount") " and/or " (src-arg "right-amount") "."))) (explain (document (explain-macro "margin-first-other" "first-margin" "other-margin" "body")) (document (concat "This environment allows to set the margin " (src-arg "first-margin") " for the first lines of paragraphs in the " (src-arg "body") ", as well as the margin " (src-arg "other-margin") " for the other lines. This environment is for instance useful for glossaries, indexes, " (abbr "etc.") ", in which case " (src-arg "other-margin") " is often larger than " (src-arg "first-margin") ". Notice that this environment enables indentation for the first line of " (src-arg "body") "."))) (concat (label "header-footer-helper") "The following macros may be used in order to set headers and footers:") (explain (explain-macro "set-header" "header-text") (document "A macro for permanently changing the header. Notice that certain tags in the style file, like sectional tags, may override such manual changes.")) (explain (explain-macro "set-footer" "footer-text") (document "A macro for permanently changing the footer. Again, certain tags in the style file may override such manual changes.")) (explain (explain-macro "blanc-page") (document "Remove all headers and footers from this page.")) (explain (explain-macro "simple-page") (document "Remove the header of this page and set the footer to the current page number (centered). This macro is often called for title pages or at the start of new chapters.")) (concat "Other macros provided by " (tmdtd "std-utils") " are:") (explain (explain-macro "localize" "text") (document (concat "This macro should be used in order to ``localize'' some English text to the current language. For instance, " (inactive* (with "language" "french" (localize "Theorem"))) " yields " (with "language" "french" (localize "Theorem")) "."))) (explain (explain-macro "map" "fun" "tuple") (document (concat "This macro applies the macro " (src-arg "fun") " to each of the entries in a " (src-arg "tuple") " (or the children of an arbitrary " (TeXmacs) " tag) and returns the result as a tuple. For instance, " (inactive* (map (macro "x" (em (arg "x"))) (tuple "1" "2" "3"))) " yields " (map (macro "x" (em (arg "x"))) (tuple "1" "2" "3")) " (the quote only appears when rendering the result, not when performing further computations with it)."))) (subsection "Counters and counter groups") (concat "In " (TeXmacs) ", all automatic numbering of theorems, sections, " (abbr "etc.") " is done using counters. Such counters may be individual counters (like " (src-var "equation-nr") ") or belong to a group of similar counters (like in the case of " (src-var "theorem-nr") "). " (TeXmacs) " allows for the customization of counters on an individual or groupwise basis. Typically, you may redefine the rendering of a counter (and let it appear as roman numerals, for instance), or undertake special action when increasing the counter (such as resetting a subcounter).") "New individual counters are defined using the following meta-macro:" (explain (explain-macro "new-counter" "x") (document (concat "Defines a new counter with name " (src-arg "x") ". The counter is stored in the numerical environment variable " (no-break) (src-var "x-nr") " and in addition, the following macros are defined:") (explain (explain-macro (concat "the-" (em "x"))) (document "Retrieve the counter such as it should be displayed on the screen.")) (explain (explain-macro (concat "reset-" (em "x"))) (document (concat "Reset the counter to " (math "0") "."))) (explain (explain-macro (concat "inc-" (em "x"))) (document "Increase the counter. This macro may also be customized by the user so as to reset other counters (even though this is not the way things are done in the standard style files).")) (explain (explain-macro (concat "next-" (em "x"))) (document "Increase the counter, display the counter and set the current label.")) (concat "For the purpose of customization, the " (markup "new-counter") " macro also defines the following macros:") (explain (explain-macro (concat "display-" (em "x")) "nr") (document "This is the macro which is used for transforming the numerical value of the counter into the value which is displayed on the screen.")) (explain (explain-macro (concat "counter-" (em "x")) "x") (document "This internal macro is used in order to retrieve the name of the environment variable which contains the counter. By default, this macro returns ``nr-x'', but it may be redefined if the counter belongs to a group.")))) (concat "As noticed in the introduction, " (TeXmacs) " uses " (em "counter groups") " in order to make it possible to treat similar counters in a uniform way. For instance the counter group " (verbatim "theorem-env") " regroups the counters " (verbatim "theorem") ", " (verbatim "proposition") ", " (verbatim "lemma") ", " (abbr "etc.") " New counter groups are defined using:") (explain (explain-macro "new-counter-group" "g") (document (concat "Create a new counter group with name " (src-arg "g") ". This results in the creation of the following macros:") (explain (document (explain-macro (concat "display-in-" (em "g")) "x" "nr") (explain-macro (concat "counter-in-" (em "g")) "x")) (document (concat "These macros are similar to the macros " (markup (concat "display-" (em "x"))) " and " (markup (concat "counter-" (em "x"))) " from above, but relative to the counter group. The name " (src-arg "x") " of the counter in consideration is passed as an argument."))))) "New counters can be added to the group using:" (explain (explain-macro "add-to-counter-group" "x" "g") (document (concat "Defines a new counter " (src-arg "x") " and add it to the counter group " (src-arg "g") ". For counters in groups, the macros " (markup (concat "display-" (em "x"))) " and " (markup (concat "counter-" (em "x"))) " are replaced with the corresponding macros " (markup (concat "display-in-" (em "g"))) " and " (markup (concat "counter-" (no-break) "in-" (no-break) (em "g"))) " for their groups. Nevertheless, two new macros " (markup (concat "ind-display-" (em "x"))) " and " (markup (concat "ind-counter-" (em "x"))) " are defined which may take over the roles of " (markup (concat "display-" (em "x"))) " and " (markup (concat "counter-" (em "x"))) " in the case when the group consists of individual counters."))) "At any moment, you may decide whether the counters of a group share a common group counter, or whether they all use their individual counters. This feature is used for instance in order to switch between American style numbering and European style numbering:" (explain (explain-macro "group-common-counter" "g") (document (concat "Use a common counter for the group (which is stored in the environment variable " (src-var "g-nr") ")."))) (explain (explain-macro "group-individual-counters" "g") (document "Use an individual counter for each member of the group (this is the default).")) (concat "We notice that group counters may recursively belong to super-groups. For instance, the following declarations are from " (verbatim "env-base.ts") ":") (tm-fragment (document (inactive* (document (new-counter-group "std-env"))) (inactive* (new-counter-group "theorem-env")) (inactive* (add-to-counter-group "theorem-env" "std-env")) (inactive* (group-common-counter "theorem-env")))) (subsection "Special markup for programs") (concat "The " (tmdtd "program") " " (abbr "d.t.d.") " provides markup for the layout of computer programs. However, these tags should be considered as very unstable, since we plan to replace them by a set of more detailed tags:") (explain (explain-macro "algorithm" "name" "body") (document (concat "The " (src-arg "name") " of the algorithm and its " (src-arg "body") ", which includes its possible specification."))) (explain (explain-macro "body" "body") (document "The real body of the algorithm.")) (explain (explain-macro "indent" "content") (document "For indenting part of an algorithm.")) (subsection "Special markup for sessions") (concat "The " (tmdtd "session") " " (abbr "d.t.d.") " provides the following environments for computer algebra sessions:") (explain (explain-macro "session" "body") (document "Environment for marking a session. All macros below are only for use inside sessions.")) (explain (explain-macro "input" "prompt" "body") (document (concat "An input field with a " (src-arg "prompt") " and the actual input."))) (explain (explain-macro "output" "body") (document "An output field.")) (explain (explain-macro "textput" "body") (document "Fields with ordinary text. These may for instance be used for comments and explanations.")) (explain (explain-macro "errput" "body") (document "This macro is used inside output fields for displaying error messages.")) (concat "In fact, these environments are based on environments of the form " (markup (concat (em "lan") "-session")) ", " (markup (concat (em "lan") "-input")) ", " (markup (concat (em "lan") "-output")) ", " (markup (concat (em "lan") "-textput")) " and " (markup (concat (em "lan") "-errput")) " for every individual language " (markup (em "lan")) ".") (concat "If language-specific environments do not exist, then " (markup "generic-session") ", " (markup "generic-input") ", " (markup "generic-output") ", " (markup "generic-textput") " and " (markup "generic-errput") " are taken instead. It is recommended to base the language-specific environments on the generic ones, which may have different implementations according to the style (" (abbr "e.g.") " the " (tmstyle "framed-session") " package). For this purpose, we also provide the " (markup "generic-output*") " environment, which is similar to " (markup "generic-output") ", except that margins remain unaltered.") (section "Standard environments") (concat "The " (tmdtd "env") " " (abbr "d.t.d.") " contains the standard environments which are available in most styles. It is subdivided into the following parts:") (subsection "Defining new environments") (concat "The " (tmdtd "env-base") " " (abbr "d.t.d.") " contains high-level markup which can be used by the user to define new numbered environments for theorems, remarks, exercises and figures:") (explain (explain-macro "new-theorem" "env-name" "display-name") (document (concat "This meta-macro is used for defining new theorem-like environments. The first argument " (src-arg "env-name") " specifies the name for the environment (like ``experiment'') and " (src-arg "display-name") " the corresponding text (like ``Experiment''). When defining a new theorem-like environment like " (markup "experiment") ", an unnumbered variant " (markup "experiment*") " is automatically defined as well."))) (explain (explain-macro "new-remark" "env-name" "display-name") (document (concat "Similar as " (markup "new-theorem") ", but for remarks."))) (explain (explain-macro "new-exercise" "env-name" "display-name") (document (concat "Similar as " (markup "new-theorem") ", but for exercises."))) (explain (explain-macro "new-figure" "env-name" "display-name") (document (concat "Similar as " (markup "new-theorem") ", but for figures. When defining a new type of figure, like ``picture'', the " (markup "new-figure") " macro defines both the inline environment " (markup "small-picture") " and the block-environment " (markup "big-picture") ", as well as the unnumbered variants " (markup "small-picture*") " and " (markup "big-picture*") "."))) (concat "The theorem-like and remark-like environments belong to a common counter-group " (verbatim "theorem-env") ". By default, we use American-style numbering (one common counter for all environments). When selecting the package " (tmpackage "number-europe") ", each environment uses its own counter. All exercises and figures use their own counter-group.") (concat "More generally, the " (verbatim "std-env") " counter-group regroups the counters for all standard " (TeXmacs) " environments. Typically, all counters in this group are prefixed in a similar way (for instance by the number of the chapter). Figure " (reference "std-env-fig") " shows how the hierarchical organization of this counter group.") (big-figure (tree (verbatim "std-env") (tree (verbatim "theorem-env") (tabular* (tformat (table (row (cell (verbatim "theorem"))) (row (cell (verbatim "proposition"))) (row (cell (verbatim "remark"))) (row (cell (math "<vdots>"))))))) (tree (verbatim "exercise-env") (tabular* (tformat (table (row (cell (verbatim "exercise"))) (row (cell (verbatim "problem"))))))) (tree (verbatim "figure-env") (tabular* (tformat (table (row (cell (verbatim "figure"))) (row (cell (verbatim "table"))))))) (verbatim "equation") (verbatim "footnote")) (document (concat (label "std-env-fig") "Organization of the counters for the standard " (TeXmacs) " environments."))) (concat "In addition to the standard theorem-like, remark-like, exercise-like and figure-like environments, other numbered textual environments may be defined using the " (markup "new-env") " macro. These environments may be based on arbitrary counter-groups:") (explain (explain-macro "new-env" "env-name" "display-name" "group" "render") (document (concat "The first argument " (src-arg "env-name") " specifies the name for the environment (like ``experiment'') and the second, " (src-arg "display-name") ", the corresponding text (like ``Experiment''). The third argument is the name of the counter " (src-arg "group") " to which the new environment belongs. The last argument " (src-arg "render") " is the name of a binary macro for rendering the environment. The arguments of the rendering macro are a name (like ``Theorem 3.14'') and its body. You may use this macro to define new environments based on counter-groups other than the standard five " (verbatim "theorem-env") ", " (verbatim "exercise-env") ", etc. For instance, in the standard style-sheets, " (markup "new-theorem") " is defined by") (tm-fragment (document (inactive* (document (assign "new-theorem" (macro "env" "name" (new-env (arg "env") (arg "name") "theorem-env" "render-theorem"))))))))) (concat "We recall that you may add new counters or counter-groups to the " (verbatim "theorem-env") " counter-group using the " (markup "new-counter-group") " and " (markup "add-to-counter-group") " macros, as described in the section about counters.") (subsection "Mathematical environments") (concat "The " (tmdtd "env-math") " " (abbr "d.t.d.") " specifies which mathematical environments can be used inside text-mode. In other words, the environments should be used inside text-mode, but their bodies contain mathematical formulas or tables of mathematical formulas.") (explain (explain-macro "equation" "body") (document (concat "A numbered equation. Use a " (markup "label") " to be able to " (markup "reference") " this equation elsewhere."))) (explain (explain-macro "equation*" "body") (document "An unnumbered equation.")) (explain (explain-macro "equation-lab" "body" "lab") (document (concat "An equation with an arbitrary text label to be displayed in references (e.g. " (markup "reference") " or " (markup "eqref)") ". Notice that the " (markup "label") " tag is not created automatically."))) (explain (explain-macro "eqnarray" "table") (document "An array of numbered equations (not yet implemented).")) (explain (explain-macro "eqnarray*" "table") (document (concat "An array of unnumbered equations. You can use the " (markup "eq-number") " tag in order to number the equation. "))) (warning (document (concat "The numbering of equations inside tables is not yet as it should be. In particular, the " (markup "eqnarray") " tag is equivalent to " (markup "eqnarray*") " at the moment. Later on, when the " (markup "eqnarray") " tag will be implemented correctly, you will also have a " (markup "no-number") " tag in order to suppress the number of an equation, and a style package for numbering equations at the left hand side."))) (warning (document (concat "There is no option for numbering equations at the left hand side available yet. Nevertheless, you may use the manual tag " (markup "leq-number") " for this. You also have a tag " (markup "next-number") " which directly display the next number and increases the equation counter."))) (warning (document (concat "We do not encourage the use of the AMS-" (TeX) " environments " (verbatim "align") ", " (verbatim "gather") " and " (verbatim "split") ". Nevertheless, they are available under the names " (markup "align") ", " (markup "gather") ", " (markup "eqsplit") " together with their variants " (markup "align*") ", " (markup "gather*") " and " (markup "eqsplit*") ". In the future, we plan to provide more powerful environments."))) (subsection "Theorem-like environments") (subsubsection "Using the theorem-like environments") (concat "The " (tmdtd "env-theorem") " " (abbr "d.t.d.") " contains the default theorem-like and other textual environments, which are available through " (menu "Insert" "Environment") ". They are subdivided into three main categories:") (description (document (concat (item* "Variants of theorems") "The bodies of theorem-like environments are usually emphasized. By default, the following such environments are available via " (menu "Insert" "Environment") ": " (markup "theorem") ", " (markup "proposition") ", " (markup "lemma") ", " (markup "corollary") ", " (markup "axiom") ", " (markup "definition") ", " (markup "notation") ", " (markup "conjecture") ".") (concat (item* "Variants of remarks") "The following ones are available via " (menu "Insert" "Environment") ": " (markup "remark") ", " (markup "example") ", " (markup "note") ", " (markup "warning") ", " (markup "convention") ".") (concat (item* "Variants of exercises") "Two such environments are provided by default and available via " (menu "Insert" "Environment") ": " (markup "exercise") " and " (markup "problem") "."))) (concat "The environments are all available in unnumbered versions " (markup "theorem*") ", " (markup "proposition*") ", " (abbr "etc.") " as well. You may use " (shortcut "(numbered-toggle (focus-tree))") " in order to switch between the unnumbered and numbered version. The following tags are also provided:") (explain (explain-macro "proof" "body") (document "For proofs of theorems.")) (explain (explain-macro "dueto" "who") (document "An environment which can be used to specify the inventors of a theorem. It should be used at the start inside the body of a theorem, like in" (theorem* (document (concat (dueto "Pythagoras") (math (concat "a" (rsup "2") "+b" (rsup "2") "=c" (rsup "2"))) "."))))) (subsubsection "Customization of the theorem-like environments") "The following customizable macros are used for the rendering of textual environments:" (explain (explain-macro "render-enunciation" "name" "body") (document (concat "This macro is used for displaying a theorem-like and remark-like environments. The first argument " (src-arg "name") " specifies the name of the theorem, like ``Theorem 1.2'' and the second argument " (src-arg "body") " contains the body of the theorem."))) (explain (explain-macro "render-theorem" "name" "body") (document (concat "This macro, based on " (markup "render-enunciation") ", is used for displaying a theorem-like environments, and used for environments defined by " (markup "new-theorem") "."))) (explain (explain-macro "render-remark" "name" "body") (document (concat "This macro, based on " (markup "render-enunciation") ", is used for displaying a remark-like environments, and used for environments defined by " (markup "new-remark") "."))) (explain (explain-macro "render-exercise" "name" "body") (document (concat "Similar to " (markup "render-enunciation") ", but for exercise-like environments."))) (explain (explain-macro "render-proof" "name" "body") (document (concat "Similar to " (markup "render-enunciation") ", but for proofs. This environment is mainly used for customizing the name of a proof, like in ``End of the proof of theorem 1.2''."))) "Notice that you may also use these macros if you want an environment which is rendered in a similar way as a theorem, but with another name (like Corollary of Theorem 7)." "The following tags can be used for further customization of the rendering:" (explain (explain-macro "enunciation-name" "name") (document (concat "This macro controls the appearance of the names of theorem-like, remark-like " (em "and") " exercise-like environments. Most styles use bold face or small capitals."))) (explain (document (explain-macro "theorem-name" "name") (explain-macro "remark-name" "name") (explain-macro "exercise-name" "name")) (document (concat "These macros default to " (markup "enunciation-name") ", but can be customized individually."))) (explain (explain-macro "enunciation-sep") (document "The separator between the name of a theorem-like, remark-like or exercise-like environment and its main body. By default, this is a period followed by a space.")) (explain (document (explain-macro "theorem-sep") (explain-macro "remark-sep") (explain-macro "exercise-sep")) (document (concat "These macros default to " (markup "enunciation-sep") ", but can be customized individually."))) (concat "Each standard environment " (markup (em "x")) " also comes with a customizable macro " (markup (concat (em "x") "-text")) " which renders the localized name of the environment. For instance, " (inactive* (with "language" "dutch" (theorem-text))) " yields " (with "language" "dutch" (theorem-text)) ".") (subsection "Environments for floating objects") (subsubsection "Using the environments for floating objects") (concat "The " (tmdtd "env-float") " " (abbr "d.t.d.") " provides the following environments for floating objects:") (explain (explain-macro "small-figure" "body" "caption") (document (concat "This macro produces an inline figure with " (src-arg "body") " as its main body and " (src-arg "caption") " as a caption. Inline figures may for instance be used to typeset several small figures side by side inside a floating object."))) (explain (explain-macro "big-figure" "body" "caption") (document (concat "This macro produces a big figure with " (src-arg "body") " as its main body and " (src-arg "caption") " as a caption. Big figures span over the whole paragraph width."))) (explain (explain-macro "small-table" "body" "caption") (document (concat "Similar to " (markup "small-figure") ", but for tables."))) (explain (explain-macro "big-table" "body" "caption") (document (concat "Similar to " (markup "big-figure") ", but for tables."))) (explain (explain-macro "footnote" "body") (document "Produces a footnote.")) (concat "The figure-like environments also admit  unnumbered versions " (markup "small-figure*") ", " (markup "big-figure*") ", " (abbr "etc.") ", which are obtained using " (shortcut "(numbered-toggle (focus-tree))") ".") (subsubsection "Customization of the environments for floating objects") "The following macros can be used for customizing the rendering of figure-like environments:" (explain (explain-macro "render-small-figure" "aux" "name" "body" "caption") (document (concat "This macro is used for rendering small figure-like environments. The first argument " (src-arg "aux") " specifies an auxiliary channel (like ``figure'' or ``table'') which is used for inserting the caption inside the list of figures. The second argument " (src-arg "name") " specifies the name of the figure (like ``Figure 2.3'' or ``Table " (no-break) "5''). The last arguments " (src-arg "body") " and " (src-arg "caption") " correspond to the figure itself and a caption."))) (explain (explain-macro "render-big-figure" "aux" "name" "body" "caption") (document (concat "Similar to " (markup "render-small-figure") ", but for displaying a big figure-like environments."))) "The following tags can be used for customizing the appearance the text around figures, tables and footnotes:" (explain (explain-macro "figure-name" "name") (document "This macro controls the appearance of the text ``Figure''. By default, we use bold face.")) (explain (explain-macro "figure-sep") (document "This macro produces the separator between the figure and its number and the caption. By default, it produces a period followed by a space.")) (explain (explain-macro "footnote-sep") (document "This macro produces the separator between the number of the footnote and the text. By default, it produces a period followed by a space.")) (section "Headers and footers") (subsection "Standard titles") (subsubsection "Entering titles and abstracts") (concat "The " (tmdtd "header-title") " " (abbr "d.t.d.") " provides tags for entering information about the entire document. The two top-level tags are") (explain (explain-macro "doc-data" "data-1" (math "<cdots>") "data-n") (document (concat "Specify data attached to your document (title, authors, " (abbr "etc.") "; see below) and render the title."))) (explain (explain-macro "abstract" "body") (document "The abstract for your paper.")) (concat "When creating a " (markup "doc-data") " tag using " (menu "Insert" "Title" "Insert title") ", " (TeXmacs) " automatically inserts a " (markup "doc-title") " tag as its first arguments. New data may be inserted from the " (menu "Insert" "Title") " menu. Each child " (src-arg "data-1") ", " (math "<ldots>") ", " (src-arg "data-n") " of the " (markup "doc-data") " tag is of one of the following forms:") (explain (explain-macro "doc-title" "title") (document (concat "Specify the " (src-arg "title") " of the document."))) (explain (explain-macro "doc-subtitle" "subtitle") (document (concat "Specify the " (src-arg "subtitle") " of the document."))) (explain (explain-macro "doc-author" "data-1" (math "<cdots>") "data-n") (document (concat "Specify datas for one of the authors of the document (name, affiliation, " (abbr "etc.") "; see below)."))) (explain (explain-macro "doc-date" "date") (document (concat "The creation date of the document. In particular you may take " (inactive* (date)) " for the value of " (src-arg "date") " for the current date."))) (explain (explain-macro "doc-running-title" "title") (document (concat "Specify a running " (src-arg "title") " for your document which may be used in page headers."))) (explain (explain-macro "doc-running-author" "author") (document (concat "Specify a running " (src-arg "author") " for your document which may be used in page headers."))) (explain (explain-macro "doc-keywords" "kw-1" (math "<cdots>") "kw-n") (document (concat "Specify keywords " (src-arg "kw-1") " until " (src-arg "kw-n") " for your document."))) (explain (explain-macro "doc-msc" "nr-1" (math "<cdots>") "nr-n") (document (concat "Specify " (abbr "A.M.S.") " subject classification numbers " (src-arg "nr-1") " until " (src-arg "nr-n") " for your document."))) (explain (explain-macro "doc-note" "note") (document (concat "A note about your document. In particular, you may take " (inactive* (with-TeXmacs-text)) " for the value of " (src-arg "note") " in order to indicate that your document has been written using " (TeXmacs) "."))) (explain (explain-macro "author-data" "data-1" (math "<cdots>") "data-n") (document (concat "Specify structured datas for one of the authors of the document (name, affiliation, " (abbr "etc.") "; see below)."))) (concat "When inserting an additional author using " (menu "Insert" "Title" "Author" "Insert author") ", " (TeXmacs) " inserts a " (explain-macro "doc-author" (with "font-shape" "right" (explain-macro "author-data" "..."))) " tree with an " (markup "author-name") " tag as its first argument. New author data may be inserted from the " (menu "Insert" "Title" "Author") " menu. Each child " (src-arg "data-1") ", " (math "<ldots>") ", " (src-arg "data-n") " of the " (markup "author-data") " tag is of one of the following forms:") (explain (explain-macro "author-name" "name") (document (concat "Specify the " (src-arg "name") " of the author."))) (explain (explain-macro "author-affiliation" "affiliation") (document (concat "The " (src-arg "affiliation") " of the author."))) (explain (explain-macro "author-email" "email") (document (concat "An " (src-arg "email") " address for the author."))) (explain (explain-macro "author-homepage" "homepage") (document (concat "The " (src-arg "homepage") " of the author."))) (explain (explain-macro "author-note" "note") (document (concat "A miscellanous " (src-arg "note") " attached to the author, like a thank-word."))) (concat "As a general rule, the use of any of the subtags of " (markup "doc-data") " or " (markup "author-data") " is optional. An individual subtag may also be specified several times. This is useful for documents with several authors, or authors with several addresses. The rendering of title information is very style-dependent: some styles render addresses in a single line or even as a footnote, where other styles use a more widely spaced presentation. Often, some information like keywords or AMS subject classification numbers are only rendered as a part of the abstract.") (subsubsection "Customizing the global rendering of titles") "Depending on the kind of attributes, complex titles often use several rendering styles in a simultaneous version. More precisely, a title usually consists of the following parts:" (itemize (document (concat (item) "A well visible part at the top of the title page.") (concat (item) "Additional notes, which are displayed in the footer.") (concat (item) "An potentially invisible part, with information like running titles and authors.") (concat (item) "A postponed part, which is only rendered in the abstract."))) "Similarly, individual authors may also contain a main part, which is rendered as part of the title, and an additional part, which is rendered as a footnote. Moreover, the layout often changes if the paper has more than one author." (concat "The " (TeXmacs) " mechanism for rendering titles therefore relies on several macros which extract the information corresponding to each of the above parts. This process may also involve some sorting, like putting the authors before the date or " (em "vice versa") ". At a second stage, each extracted part of the title is passed to the appropriate rendering macro. The following macros are used for extracting title information:") (explain (document (explain-macro "doc-data-main" "data-1" (math "<cdots>") "data-n") (explain-macro "doc-data-main*" "data-1" (math "<cdots>") "data-n")) (document (concat "This macro only keeps and sorts the data which should be displayed in the main title. The " (markup "doc-data-main*") " variant is used in the case when the document has more than one author."))) (explain (document (explain-macro "doc-data-note" "data-1" (math "<cdots>") "data-n")) (document "This macro only keeps and sorts the data which should be displayed as a footnote.")) (explain (document (explain-macro "doc-data-abstract" "data-1" (math "<cdots>") "data-n")) (document "This macro only keeps and sorts the data which should be displayed in the abstract.")) (explain (document (explain-macro "doc-data-hidden" "data-1" (math "<cdots>") "data-n")) (document "This macro only keeps and sorts the data which might or should not be displayed at all.")) "In a similar fashion, the following macros are used for extracting author information:" (explain (document (explain-macro "doc-author-main" (with "font-shape" "right" (explain-macro "author-data" "data-1" (math "<cdots>") "data-n")))) (document "This macro only keeps and sorts the data which should be displayed inside the main title.")) (explain (document (explain-macro "doc-author-note" "data-1" (math "<cdots>") "data-n")) (document "This macro only keeps and sorts the data which should be displayed as a footnote.")) (concat "It should be noticed that each of the above macros should return a " (markup "document") " tag with the selected data as its children. For instance,") (tm-fragment (document (inactive* (style-with "src-compact" "none" (doc-author-main (author-affiliation "Somewhere in Africa") (author-name "The big GNU") (author-note "Very hairy indeed!")))))) "should typically return" (tm-fragment (document (with "src-special" "raw" (inactive* (style-with "src-compact" "none" (document (author-affiliation "Somewhere in Africa") (author-name "The big GNU"))))))) (concat "The only exception to this rule is " (markup "doc-data-hidden") " which should return a " (markup "concat") " tag instead.") (subsubsection "Customizing the rendering of title fields") "Both title information and author information is rendered as a vertical stack of title blocks and author blocks. The following macros may be used to customize the global rendering of such blocks:" (explain (document (explain-macro "doc-title-block" "content") (explain-macro "doc-author-block" "content")) (document "Macros for rendering one component of the title or author information.")) (concat "The following macros may be used to customize the rendering of title information; notice that they are usually built on top of " (markup "doc-title-block") ".") (explain (explain-macro "doc-make-title" "content") (document "This macro is used for the rendering of the main title information. Usually, it contains at least the title itself, as well as one or several authors.")) (explain (explain-macro "doc-render-title" "title") (document (concat "This macro is used for rendering the " (src-arg "title") " of the document. The " (markup "doc-title") " macro also takes care of rendering references to potential footnotes."))) (explain (explain-macro "doc-subtitle" "title") (document (concat "This macro is used for rendering the " (src-arg "subtitle") " of the document."))) (explain (explain-macro "render-doc-author" "content") (document (concat "In the case when the document has a single author, then this macro is used for rendering the " (src-arg "content") " information about him or her."))) (explain (explain-macro "render-doc-authors" "content") (document (concat "In the case when the document has several authors, then this macros is used for rendering all author-related " (src-arg "content") " which is part of the main title."))) (explain (explain-macro "doc-date" "date") (document (concat "This macro is used for rendering the creation " (src-arg "date") " of the document."))) (concat "The following macros may be used to customize the rendering of author information; notice that they are usually built on top of " (markup "doc-author-block") ".") (explain (explain-macro "author-render-name" "name") (document (concat "Renders the " (src-arg "name") " of the author.The " (markup "author-name") " macro also takes care of rendering references to potential footnotes."))) (explain (explain-macro "author-by" "name") (document (concat "A macro which may put the text ``by '' in front of the " (src-arg "name") " of an author."))) (explain (explain-macro "author-affiliation" "affiliation") (document (concat "Renders the " (src-arg "affiliation") " of the author."))) (explain (explain-macro "author-email" "email") (document (concat "Renders the " (src-arg "email") " address of the author."))) (explain (explain-macro "author-homepage" "email") (document (concat "Renders the " (src-arg "homepage") " of the author."))) "The following macros are used for information which is usually not rendered as a part of the main title, but rather as a footnote or part of the abstract." (explain (document (explain-macro "doc-title-note" "note") (explain-macro "doc-author-note" "note")) (document (concat "A macro for rendering a " (src-arg "note") " attached to the document or one of its authors. The note will usually appear as part of a footnote. By default, notes that consist of several lines are compressed into a single paragraph."))) (explain (explain-macro "doc-keywords" "kw-1" (math "<cdots>") "kw-n") (document "A macro for displaying a list of keywords.")) (explain (explain-macro "doc-msc" "nr-1" (math "<cdots>") "nr-n") (document (concat "A macro for displaying a list of " (abbr "A.M.S.") " subject classification numbers."))) (subsection "Standard headers") (concat "The " (tmdtd "header") " " (abbr "d.t.d.") " provides call-back macros which allow page headers and footers to change automatically when specifying the title information of the document or when starting a new section.") (explain (explain-macro "header-title" "title") (document (concat "This macro is called when specifying the " (src-arg "title") " of a document."))) (explain (explain-macro "header-author" "author") (document (concat "This macro is called when specifying the " (src-arg "author") "(s) of a document."))) (explain (explain-macro "header-primary" "section-title" "section-nr" "section-type") (document (concat "This macro is called at the start of each new primary section (" (abbr "e.g.") " " (markup "chapter") " for book style, or " (markup "section") " for article style). The " (src-arg "section-type") " is a literal text like ``Chapter'' or ``Section''."))) (explain (explain-macro "header-secondary" "section-title" "section-nr" "section-type") (document (concat "This macro is called at the start of each new secondary section (" (abbr "e.g.") " " (markup "section") " for book style, or " (markup "subsection") " for article style). The " (src-arg "section-type") " is a literal text like ``Section'' or ``Paragraph''."))) (concat "In style files, page headers and footers are usually set by the above call-back macros, and not manually. You may directly modify headers and footers by setting the " (hlink "corresponding environment variables" "../devel/format/environment/env-page.en.tm#header-footer-env") " or using several " (hlink "helper macros" "styles/std/std-utils-dtd.en.tm#header-footer-helper") " supplied by " (tmpackage "std-utils") ".") (section (concat (LaTeX) " style sections")) (subsection "Using sectional tags") (concat "The " (tmdtd "section-base") " " (abbr "d.t.d.") " provides the standard tags for sections, which are the same as in " (LaTeX) ". Most sectional tags take one argument: the name of the section. The intention of the following tags is to produce numbered sections:") (explain (document (concat (explain-macro "part" "title") ", " (explain-macro "chapter" "title")) (concat (explain-macro "section" "title") ", " (explain-macro "subsection" "title") ", " (explain-macro "subsubsection" "title")) (concat (explain-macro "paragraph" "title") ", " (explain-macro "subparagraph" "title")) (explain-macro "appendix" "title")) (document (concat "The intention of these macros is to produce a numbered title for a part (" (abbr "resp.") " chapter, section, subsection, " (abbr "etc.") "). The numbering is not required, but merely an intention: the " (markup "paragraph") " and " (markup "subparagraph") " tags are usually not numbered and some styles may not produce numbers at all."))) (concat "The tags " (markup "part*") ", " (markup "chapter*") ", " (markup "section*") ", " (markup "subsection*") ", " (markup "subsubsection*") ", " (markup "paragraph*") ", " (markup "subparagraph*") " and " (markup "appendix*") " can be used for producing the unnumbered variants of the above tags.") (concat "By default, all sectional only produce the section title. When using the experimental package " (tmpackage "structured-section") ", all sectional tags are enriched, so that they take the body of the section as an optional argument. Moreover, an additional tag " (markup "rsection") " is provided in order to produce recursively embedded sections. For instance, an " (markup "rsection") " inside a " (markup "section") " behaves like a " (markup "subsection") ". In the future, all list items should become structured.") (concat "The " (tmdtd "section-base") " " (abbr "d.t.d.") " also provides the following sectional environments with automatically generated content") (explain (explain-macro "bibliography" "aux" "style" "file-name" "body") (document (concat "This macro is used for producing bibliographies. The first argument " (src-arg "aux") " specifies the auxiliary channel with the data for generating the bibliography (" (verbatim "bib") ", by default). The arguments " (src-arg "style") " and " (src-arg "file-name") " contain the bibliography style and the file with the bibliographic database. The " (src-arg "body") " argument corresponds to the automatically generated content."))) (explain (explain-macro "table-of-contents" "aux" "body") (document (concat "This macro is used for producing tables of contents. The first argument " (src-arg "aux") " specifies the auxiliary channel with the data for generating the bibliography (" (verbatim "toc") ", by default). The " (src-arg "body") " argument corresponds to the automatically generated content."))) (explain (explain-macro "the-index" "aux" "body") (document (concat "Similar to " (markup "table-of-contents") " but for indices and default channel " (verbatim "idx") "."))) (explain (document (explain-macro "the-glossary" "aux" "body") (explain-macro "list-of-figures" "aux" "body") (explain-macro "list-of-tables" "aux" "body")) (document (concat "Similar to " (markup "table-of-contents") " but for glossaries (default channel " (verbatim "gly") "), lists of figures (default channel " (verbatim "figure") ") and lists of tables (default channel " (verbatim "table") ")."))) (concat "The above tags also admit the variants " (markup "bibliography*") ", " (markup "table-of-contents*") ", " (markup "the-index*") " and " (markup "the-glossary*") " with an additional argument " (src-arg "name") " before " (src-arg "body") ", which specifies the name of the section. For instance, the " (markup "the-glossary*") " was formerly used for lists of figures and lists of tables.") (subsection "Customization of the sectional tags") (concat "The " (tmdtd "section-base") " " (abbr "d.t.d.") " also contains many tags for customizing the rendering of sections and other section-related behaviour. The following two tags affect all sections:") (explain (explain-macro "sectional-sep") (document "A macro for customizing the separator between the number of a section and its title. By default, we use two spaces.")) (explain (explain-macro "sectional-short-style") (document (concat "A predicate which tells whether documents for this style are intended to be short or long. When " (markup "sectional-short-style") " evaluates to " (verbatim "true") ", then appendices, bibliographies, " (abbr "etc.") " are supposed to be special types of sections. Otherwise, they will be special types of chapters."))) (concat "For each sectional tag " (markup (em "x")) ", the following tags are provided for customization:") (explain (explain-macro (concat (em "x") "-text")) (document (concat "A macro which displays the (localized) name of the sectional environment. For instance, " (inactive* (with "language" "french" (appendix-text))) " produces ``" (with "language" "french" (appendix-text)) "''."))) (explain (explain-macro (concat (em "x") "-title") "title") (document "A macro for displaying the unnumbered section title.")) (explain (explain-macro (concat (em "x") "-numbered-title") "title") (document "A macro for displaying the numbered section title.")) (explain (explain-macro (concat (em "x") "-display-numbers")) (document (concat "A predicate which specifies whether numbers will really be displayed. For instance, in the case of " (markup "paragraph") ", this macro evaluates to false. Consequently, even though " (markup (concat (em "x") "-numbered-title")) " " (em "does") " display the paragraph number, the main macro " (markup (em "x")) " will call " (markup (concat (em "x") "-title")) " and not " (markup (concat (em "x") "-numbered-title")) ", so that paragraph titles are not numbered."))) (explain (explain-macro (concat (em "x") "-sep")) (document (concat "A macro for customizing the separator between the number of a section and its title. By default, we call " (markup "sectional-sep") "."))) (explain (explain-macro (concat (em "x") "-clean")) (document "A hook for resetting all subcounters of the section.")) (explain (explain-macro (concat (em "x") "-header") "name") (document "A hook for changing the page headers.")) (explain (explain-macro (concat (em "x") "-toc") "name") (document "A hook for putting the section title into the table of contents.")) (concat "Finally, the " (tmdtd "section-base") " " (abbr "d.t.d.") " provides rendering macros " (markup "render-table-of-contents") ", " (markup "render-bibliography") ", " (markup "render-index") " and " (markup "render-glossary") ", each of which takes two arguments: the name of the section and its body. It also provides the macros " (markup "prologue-text") ", " (markup "epilogue-text") ", " (markup "bibliography-text") ", " (markup "table-of-contents-text") ", " (markup "index-text") ", " (markup "glossary-text") ", " (markup "list-of-figures-text") " and " (markup "list-of-tables-text") " for customizing the names of special sections.") (subsection "Helper macros for rendering section titles") (concat "The " (tmdtd "section-base") " " (abbr "d.t.d.") " contains several helper macros which can (should) be used when customizing the rendering of section titles:") (explain (document (explain-macro "sectional-short" "body") (explain-macro "sectional-short-italic" "body") (explain-macro "sectional-short-bold" "body")) (document "These macros should be used for rendering ``short section titles'', for which the section body starts immediately at the right of the title. Usually, titles of paragraphs and subparagraphs are rendered in a short fashion, while the other section titles span over the entire width of a paragraph.")) (explain (document (explain-macro "sectional-normal" "body") (explain-macro "sectional-normal-italic" "body") (explain-macro "sectional-normal-bold" "body")) (document "These macros should be used for rendering ``normal left-aligned section titles''. Such titles span over the entire paragraph width.")) (explain (document (explain-macro "sectional-centered" "body") (explain-macro "sectional-centered-italic" "body") (explain-macro "sectional-centered-bold" "body")) (document "These macros should be used for rendering ``normal centered section titles''. Such titles span over the entire paragraph width.")) (chapter "Compatibility with other formats") (concat (TeXmacs) " documents can be saved without loss of information in three formats: the native " (TeXmacs) " format, " (name "Xml") " and as a " (name "Scheme") " expression. " (TeXmacs) " documents can be converted in a " (em "wysiwyg") " (what-you-see-is-what-you-get) way to either " (name "Postscript") " or " (name "Pdf") ", which are used as the primary formats for " (hlink "printing documents" "start/man-print.en.tm") ". " (TeXmacs) " finally provides converters for " (LaTeX) ", " (name "Html") " and " (name "MathML") ".") (concat (TeXmacs) " documents can be converted to other formats using the different items in the " (menu "File" "Export") " menu. Similarly, the " (menu "File" "Import") " menu contains all formats which can be imported into " (TeXmacs) ". Besides exporting or importing entire documents, it is also possible to copy and paste document fragments using " (menu "Edit" "Copy to") " and " (menu "Edit" "Paste from") ". The default formats for copy and pasting can be specified in " (menu "Tools" "Miscellaneous" "Export selections as") " and " (menu "Tools" "Miscellaneous" "Import selections as") ".") (section (concat "Converters for " (LaTeX))) (subsection "Introduction") (concat (TeXmacs) " offers high quality converters to and from " (LaTeX) ". For simple documents, it suffices to use " (menu "File" "Export" "LaTeX") " " (abbr "resp.") " " (menu "File" "Import" "LaTeX") ". However, in order to take fully advantage out of the converts, it is necessary to understand some particularities of " (LaTeX) ".") (concat "First of all, it should be emphasized that " (TeX) "/" (LaTeX) " is " (em "not") " a data format. Indeed, " (TeX) " is a programming language for which no real standardization process has taken place: valid " (TeX) " programs are defined as those which are recognized by the " (TeX) " program. In particular, there exists no formal specification of the language and it is not even clear what should be considered to be a valid " (TeX) " document. As a consequence of this, a converter from " (LaTeX) " to " (TeXmacs) " can only be designed to be 100% reliable for a (substantial) subset of the " (TeX) "/" (LaTeX) " language.") (concat "A second important point is that publishers usually impose additional constraints on the kind of " (LaTeX) " documents which they accept for submissions. For instance, certain journals provide additional macros for title information, theorems, specific layout features, etc. Other journals forbid for the definition of new macros in the preamble. Since " (TeXmacs) " is " (em "not") " a " (TeX) "/" (LaTeX) " front-end, it is difficult for us to write specific code for each possible journal. Nevertheless, some general principles do hold, and we will describe below how to customize the converter so as to make the conversion process as simple and automatic as possible.") (concat "Another point which should be stressed is that " (TeXmacs) " aims to provide a strict superset of " (TeX) "/" (LaTeX) ". This not completely the case yet, but it is already true that many features in " (TeXmacs) " admit no direct analogues in " (TeX) "/" (LaTeX) " or one of its packages. This is for instance the case for computer algebra sessions, folding, actions, graphics and presentations, but also for certain typsetting constructs, like vertical alignment and background filling in tables. When using such additional features, you should be prepared that they will not be converted correctly to " (LaTeX) ".") (concat "Finally, when preparing journal papers with " (TeXmacs) ", " (em "please") " consider submitting them in " (TeXmacs) " format. The editors of the journal will probably force you to convert your paper to " (LaTeX) ", but repeated submissions in " (TeXmacs) " format will put pressure upon them to accept this new format.") (subsection (concat "Conversion from " (TeXmacs) " to " (LaTeX))) (concat "A " (TeXmacs) " document can be exported to " (LaTeX) " using " (menu "File" "Export" "LaTeX") ".  In the case of certain journal styles like " (verbatim "svjour") " or " (verbatim "elsart") ", the user should also make sure that the appropriate style files can be found by " (LaTeX) ", when compiling the result of the conversion. Please consult your " (LaTeX) " documentation for how to do this; one solution which usually works is to put the style file in the same directory as your file.") (concat "Notice that the exportation of a " (TeXmacs) " document with images may cause the creation of additional image files. If your destination file is called " (verbatim "name.tex") ", these files are named " (verbatim "name-1.eps") ", " (rigid (verbatim "name-2.eps")) ", " (abbr "etc.") " and they are stored in the same directory. In particular, all pictures drawn with the editor and all images which are not already in " (name "Postscript") " format will be converted to encapsulated " (name "Postscript") " files.") (concat "In order to ensure that the generated " (LaTeX) " document compiles, style files and packages or macros with no " (LaTeX) " equivalents are either ignored or replaced by a reasonable substitute. The precise behaviour of the converter may be customized using several user preferences in the " (menu "Edit" "Preferences" "Converters" "LaTeX" "TeXmacs--<gtr>LaTeX") " menu:") (description-long (document (concat (item* (menu "Replace unrecognized styles")) "This option (which is set by default) tells " (TeXmacs) " to replace style files with no " (LaTeX) " equivalents by the " (verbatim "article") " style. Furthermore, all additional style packages are ignored.") (concat "In case you know how to " (hlink "write your own style files" "../devel/style/style.en.tm") ", you might wish to create " (TeXmacs) " equivalents of those journal styles which you use often. Similarly, you might wish to create a style package with your own macros together with its " (LaTeX) " counterpart. In both cases, you might want to disable the style replacement option.") (concat (item* (menu "Replace unrecognized macros")) "By default, all " (TeXmacs) " macros are expanded until they admit direct " (LaTeX) " counterparts. Primitives with no " (LaTeX) " counterparts (like graphics or trees) are ignored. Moreover, in order to convert certain frequently used macros like " (verbatim "theorem") " or " (verbatim "strong") ", " (TeXmacs) " may put additional definitions in the preamble.") (concat "In some cases, the user may wish to keep unrecognized macros in their unexpanded form. For instance, this may be convenient if you want to import the generated document back into " (TeXmacs) ". Another typical situation is when you defined additional macros in a style package. In these cases, you may disable to macro replacement option. Of course, any missing macro definitions may result in " (LaTeX) " errors during the compilation.") (concat (item* (menu "Expand user-defined macros")) "When your document or its preamble contains macro definitions, then " (TeXmacs) " will convert these macro definitions into " (LaTeX) " macro definitions and keep all macro applications in their unexpanded forms. This allows you to preserve as much structure of your document as possible. When enabling the " (menu "Expand user-defined macros") " option, all macro definitions in your document will be ignored and all macro applications will be expanded.") (concat (item* (menu "Export bibliographies as links")) "In order to produce stand-alone " (LaTeX) " files whenever possible, it is assumed that you generate" (nbsp) "your bibliographies from within " (TeXmacs) ". When exporting to " (LaTeX) ", the generated bibliography will be directly included into your " (LaTeX) " file. In some cases however, the user might wish to regenerate the bibliography from the " (LaTeX) " and the bibliography files, using " (name (concat "Bib" (TeX))) ". In this case, you need to enable the " (menu "Export bibliographies as links") " option.") (concat (item* (menu "Allow for macro definitions in preamble")) "Certain " (TeXmacs) " macros like " (markup "strong") " have no direct " (LaTeX) " analogues. For a certain number of frequently used macros, " (TeXmacs) " automatically generates macro definitions in the preamble of the " (LaTeX) " target file. This allows you to preserve as much structure as possible of your document, which is for instance useful if you import the document back into " (TeXmacs) ".") (concat "However, certain journals instruct authors to refrain from the definition of additional macros in the preamble. When disallowing for macro definitions in preambles, " (TeXmacs) " will automatically expand all corresponding macro applications.") (concat (item* (concat "Dump " (TeXmacs) " document into " (LaTeX) " code")) "When this option is set, a copy of the " (TeXmacs) " document is appended to the " (LaTeX) " export in a lossless kind. This allows to re-import the document with as few conversion artifacts as possible .") (concat (item* "Character encoding") "This option defines the behavior of the converter with respect to character encoding. There are three possible choices:") (description (document (concat (item* "Utf-8 with inputenc") "This will generate " (verbatim "utf-8") " document with the package " (verbatim "inputenc") " loaded. If for any reason you don't want to rely on " (verbatim "inputenc") ", you should consider other options.") (concat (item* "Cork with catcodes") "Keeps accented characters ``as is''. This can be achieved by allowing " (TeXmacs) " to put additional catcode definitions into your preamble. This provides a good trade-off between readability (accented characters are kept in an 8 bit charset) and simplicity (you don't need the " (verbatim "inputenc") " package).") (concat (item* "Ascii") "This will generate pure " (name "ascii") " characters, using plain " (TeX) " sequencies to compose non-" (name "ascii") " symbols."))))) (concat "Sometimes, the converter does not produce a satisfactory " (LaTeX) " file even after some tinkering with the above preferences. The most frequent problem concerns bad line breaks. Occasionally, certain document fragments are also better converted by hand. In order to minimize the need for corrections in the generated " (LaTeX) " file (which would be lost when re-exporting the " (TeXmacs) " source file after some modifications), " (TeXmacs) " provides a mechanism to specify manual conversions to " (LaTeX) " in the " (TeXmacs) " source file: using " (menu "Format" "Specific" "Texmacs") " and " (menu "Format" "Specific" "Latex") ", you may force certain document fragments to appear only in the source file or the " (LaTeX) " target.") (concat "For instance, assume that the word blauwbilgorgel is hyphenated correctly in the " (TeXmacs) " source, but not in the " (LaTeX) " conversion. Then you may proceed as follows:") (enumerate (document (concat (item) "Select blauwbilgorgel.") (concat (item) "Click on " (menu "Format" "Specific" "Texmacs") " to make the text blauwbilgorgel " (TeXmacs) "-specific.") (concat (item) "Click on " (menu "Format" "Specific" "Latex") ".") (concat (item) "Type the latex code " (verbatim "blauw\\-bil\\-gor\\-gel") " with the correct hyphenation.") (concat (item) "Press " (shortcut "(kbd-return)") " to activate the " (LaTeX) "-specific text."))) (concat "In a similar fashion, you may insert " (LaTeX) "-specific line breaks, page breaks, vertical space, style parameter modifications, etc. You may also force arbitrary content to be exported as an image using " (menu "Format" "Specific" "Image") ".") (subsection (concat "Conversion from " (LaTeX) " to " (TeXmacs))) (concat "In order to import a " (LaTeX) " document into " (TeXmacs) ", you may use " (menu "File" "Import" "Latex") ". Don't forget to save the file under a new name with the " (verbatim ".tm") " extension, if you want to edit it.") (concat "As explained in the introduction, the conversion of " (LaTeX) " documents into " (TeXmacs) " is more problematic than conversions the other way around. As long as you restrict yourself to using the most common " (LaTeX) " commands, the conversion process should not give rise to any major difficulties. However, as soon as your documents contain weird " (TeX) " primitives (think about " (verbatim "\\csname") "...), then the converter may get confused. We also notice that " (TeXmacs) " is currently unable to convert " (LaTeX) " style files and no plans exist to enhance the converter in this direction.") (concat "There are two major reasons for " (LaTeX) " documents to get imported in an inappropriate way, and which can easily be corrected by the user. First of all, the parser may get confused because of some exotic syntactic construct. This typically happens in presence of catcodes or uncommon styles of macro definitions. Sometimes, the parser may also be mistaken about the current mode, in which case text gets parsed as a mathematical formula or " (em "vice cersa") ". In both cases, the imported document usually becomes weird at a certain point. In order to solve the problem, we suggest you to identify the corresponding point in the " (LaTeX) " source file and to make an appropriate change which avoids the parser of getting confused.") (concat "A second common error is that certain " (LaTeX) " macros are not recognized by the converter, in which case they will appear in red. This typically happens if you use one of the hundreds additional " (LaTeX) " packages or if you defined some additional macros in another document. In the case when the troublesome macro occurs only a few times, then we suggest you to manually expand the macro in the " (LaTeX) " source file before importation. Otherwise, you may try to put the definitions of the missing macros in the preamble of the " (LaTeX) " document. Alternatively, you may create a small style package with " (TeXmacs) " counterparts for the macros which were not recognized.") (concat "The behaviour of the converter may be customized using several user preferences in the " (menu "Edit" "Preferences" "Converters" "LaTeX" "LaTeX--<gtr>TeXmacs") " menu:") (description-long (document (concat (item* "Import sophisticated objects as pictures") "This option allows " (TeXmacs) " to compile the " (LaTeX) " document in a temporary directory, with the package " (verbatim "preview") " installed, in order to import some macros or environments as pictures. The source of each picture is also imported in order to be re-exported if needed. Currently, the following macros are imported as pictures when this option is set: " (verbatim "\\xymatrix") ", " (verbatim "pspicture") ", " (verbatim "tikzpicture") ".") (concat (item* (concat "Keep track of the " (LaTeX) " source code")) "One should be interested in this option in order to use " (TeXmacs) " to make small or isolated modifications into a " (LaTeX) " file (e.g. for a proofreading). This option allows " (TeXmacs) " to import the " (LaTeX) " document with added markup in order to track the original sources of the document paragraphs. These tracked sources are, as far as possible, re-used during a " (LaTeX) " re-export.") (concat (item* "Ensure transparent tracking") "This option, subject to the above, verify that the added markup does not change the result of the conversion. It has been added for testing purpose and may " (em "strongly") " increase the time of the import process (at least it double it)."))) (subsection (concat "Limitations of the current " (LaTeX) " converters")) (paragraph* (concat "Limitations of the " (TeXmacs) " to " (LaTeX) " converter")) (concat "Some of the " (TeXmacs) " primitives have no analogues in " (LaTeX) ". When converting such primitives from " (TeXmacs) " into " (LaTeX) ", they will usually be either ignored or replaced by an approximative translation. A (probably incomplete) list of " (TeXmacs) " features with no " (LaTeX) " counterparts is as follows:") (itemize (document (concat (item) "Left primes.") (concat (item) "Big separators between big parentheses.") (concat (item) "Trees.") (concat (item) "Certain features of tables (background color, cell span, vertical alignment, " (abbr "etc.") ").") (concat (item) "Complex user macros.") (concat (item) "Vertical spaces before and after.") (concat (item) "Indentation flags before and after.") (concat (item) "Most types of interactive content: hyperlinks, actions, sessions, tags for the presentation mode, animations and sounds, etc."))) "In addition, several issues are only partially implemented:" (itemize (document (concat (item) "Non standard fonts.") (concat (item) "Certain table properties") (concat (item) "Style parameters."))) (concat "Of course, there are also differences between the typesetting algorithms used by " (TeXmacs) " and " (TeX) "/" (LaTeX) ", so the " (TeXmacs) " to " (LaTeX) " is not intended to be " (em "wysiwyg") ".") (paragraph* (concat "Limitations of the " (LaTeX) " to " (TeXmacs) " converter")) (concat "As explained in the introduction, the conversion of " (LaTeX) " documents into " (TeXmacs) " is more problematic than conversions the other way around. Only a subset of " (LaTeX) " can be converted to " (TeXmacs) " in a fully reliable way. This subset comprises virtually all common constructs, including macro definitions and the additional macros uses by the " (TeXmacs) " to " (LaTeX) " converter. However, the converter has no knowledge about style parameters. In particular, it cannot be used for the conversion of " (LaTeX) " style files.") (section "Converters for Html and MathML") (paragraph (name "Html generation")) (concat (TeXmacs) " supports reasonably good converters to " (name "Html") " and " (name "MathML") ". A document can be exported to " (name "Html") " using " (menu "File" "Export" "Html") ". " (TeXmacs) " makes moderate use of " (name "Css") " in order to improve the presentation of the generated " (name "Html") ".") (concat "By default, " (TeXmacs) " does its best in order to render formulas using existing " (name "Html") "/" (name "Css") " primitives. When selecting " (menu "Edit" "Preferences" "Converters" "TeXmacs-<gtr>Html" "Use MathML") ", all formulas will be exported as " (name "MathML") ". Notice that this requires you to save the generated documents using the " (verbatim ".xhtml") " extension.") (concat "Similarly, the user may force " (TeXmacs) " to export all mathematical formulas as images using " (menu "Edit" "Preferences" "Converters" "TeXmacs-<gtr>Html" "Export formulas as images") ". If your destination file is called " (verbatim "name.html") ", then the images are stored in the same directory in files " (verbatim "name-1.png") ", " (rigid (verbatim "name-2.png")) " and so on. Even when formulas are not exported as images, notice that all graphics drawn using " (TeXmacs) " are exported in this way. In particular, the exportation of a " (TeXmacs) " file with pictures may give rise to the creation of additional image files. You may also force arbitrary content to be exported as an image using " (menu "Format" "Specific" "Image") ".") (concat (TeXmacs) " also provides a facility for the creation of entire websites. For this, you just have to regroup the files for your website into a single directory. Using " (menu "Tools" "Web" "Create website") " you may now convert all " (TeXmacs) " files in this directory to " (name "Html") " files in a new directory. The conversion procedure recursively traverses all subdirectories and all non-" (TeXmacs) " files are simply copied.") (paragraph (concat "Customized " (name "Html") " generation")) (concat "The following " (TeXmacs) " environment variables can be used to customize the " (name "Html") " generation:") (description (document (concat (item* (src-var "html-title")) "The title of your exported document.") (concat (item* (src-var "html-css")) "A cascaded style sheet for your exported document.") (concat (item* (src-var "html-head-javascript-src")) "An external " (name "Javascript") " file to be executed before the body.") (concat (item* (src-var "html-head-javascript")) "A " (name "Javascript") " script to be executed before the body."))) "You may also use the following macros:" (indent (document (explain (explain-macro "html-div" "class" "body") (document (concat "Associate a CSS class to the content " (src-arg "body") "."))) (explain (explain-macro "html-style" "style" "body") (document (concat "Associate a CSS style to the content " (src-arg "body") "."))) (explain (explain-macro "html-javascript-src" "src") (document (concat "Execute a " (name "Javascript") " script from the file " (src-arg "src") "."))) (explain (explain-macro "html-javascript" "code") (document (concat "Execute the " (name "Javascript") " script " (compound "src-arg" "code") "."))))) (paragraph "Html importation") (concat (TeXmacs) " also contains a rudimentary input converter for " (name "Html") " in " (menu "File" "Import" "Html") ". Most of HTML 2.0 and parts of HTML 3.0 are currently supported. However, no browsing facilities have been added yet. The converter also contains a reasonably complete input converter for embedded " (name "MathML") " fragments.") (concat "When importing HTML documents, files whose names start with " (verbatim "http:") " or " (verbatim "ftp:") " will be downloaded from the web using " (verbatim "wget") ". If you compiled " (TeXmacs) " yourself, then you can download " (verbatim "wget") " from ") (verbatim (document "  ftp://ftp.gnu.org/pub/gnu/wget/")) (concat "In the binary distributions, we have included " (verbatim "wget") ".") (concat (with "font-shape" "italic" "") (tmdoc-title "Adding new data formats and converters")) (concat "Using the " (name "Guile") "/" (name "Scheme") " extension language, it is possible to add new data formats and converters to " (TeXmacs) " in a modular way. Usually, the additional formats and converters are declared in your personal " (verbatim "~/.TeXmacs/progs/my-init-texmacs.scm") " or a dedicated plug-in. Some examples may be found in the directory " (verbatim "$TEXMACS_PATH/progs/convert") ", like " (hlink "init-html.scm" "../../progs/convert/html/init-html.scm") ".") (paragraph* "Declaring new formats") "A new format is declared using the command" (scm-code (document (concat "(define-format " (em "format")) (concat "  (:name " (em "format-name") ")") (concat "  " (em "options") ")"))) (concat "Here " (verbatim (em "format")) " is a symbol which stands for the format and " (verbatim (em "format-name")) " a string which can be used in menus. In fact, a data format usually comes in several variants: a format " (verbatim (concat (em "format") "-file")) " for files, a format " (verbatim (concat (em "format") "-document")) " for entire documents, a format " (verbatim (concat (em "format") "-snippet")) " for snippets, like selections, and " (verbatim (concat (em "format") "-object")) " for the preferred internal scheme representation for doing conversions (" (abbr "i.e.") " the parsed variant of the format). Converters from " (verbatim (concat (em "format") "-file")) " to " (verbatim (concat (em "format") "-document")) " and " (em "vice versa") " are provided automatically.") "The user may specify additional options for the automatic recognition of formats by their file suffix and contents. The possible suffixes for a format, with the default one listed first, may be specified using" (scm-code (document (concat "(:suffix " (em "default-suffix") " " (em "other-suffix-1") " ... " (em "other-suffix-n") ")"))) "A (heuristic) routine for recognizing whether a given document matches the format can be specified using either one of the following:" (scm-code (document (concat "(:recognize " (em "predicate") ")") (concat "(:must-recognize " (em "predicate") ")"))) "In the first case, suffix recognition takes precedence over document recognition and in the second case, the heuristic recognition is entirely determined by the document recognition predicate." "A format can be removed from menus using the following:" (scm-code (document "(:hidden)")) (paragraph* "Declaring new converters") "New converters are declared using" (scm-code (document (concat "(converter " (em "from") " " (em "to")) (concat "  " (em "options") ")"))) "The actual converter is specified using either one of the following options:" (scm-code (document (concat "(:function " (em "converter") ")") (concat "(:function-with-options " (em "converter-with-options") ")") (concat "(:shell " (em "prog") " " (em "prog-pre-args") " from " (em "progs-infix-args") " to " (em "prog-post-args") ")"))) (concat "In the first case, the " (verbatim (em "converter")) " is a routine which takes an object of the " (verbatim (em "from")) " format and returns a routine of the " (verbatim (em "to")) " format. In the second case, the " (verbatim (em "converter")) " takes an additional association list as its second argument with options for the converter. In the last case, a shell command is specified in order to convert between two file formats. The converter is activated only then, when " (verbatim (em "prog")) " is indeed found in the path. Also, auxiliary files may be created and destroyed automatically.") (concat (TeXmacs) " automatically computes the transitive closure of all converters using a shortest path algorithm. In other words, if you have a converter from " (math "x") " to " (math "y") " and a converter from " (math "y") " to " (math "z") ", then you will automatically have a converter from " (math "x") " to " (math "z") ". A distance between two formats via a given converter may be specified using") (scm-code (document (concat "(:penalty " (em "floating-point-distance") ")"))) "Further options for converters are:" (scm-code (document (concat "(:require " (em "cond") ")") (concat "(:option " (em "option") " " (em "default-value") ")"))) (concat "The first option specifies a condition which must be satisfied for this converter to be used. This option should be specified as the first or second option and always after the " (verbatim ":penalty") " option. The " (verbatim ":option") " option specifies an option for the converter with its default value. This option automatically become a user preference and it will be passed to all converters with options.") (appendix (concat "Configuration of " (TeXmacs))) (section "User preferences") (concat "For an optimal typing experience, you may wish to configure " (TeXmacs) " in a way which suits your needs best. This can be done from within the " (menu "Edit" "Preferences") " menu. Most importantly, you should choose a look and feel in " (menu "Edit" "Preferences" "Look and feel") ". This will enable you for instance to let the keyboard shortcuts used by " (TeXmacs) " be similar to what you are used to in other applications.") "The following user preferences are available:" (description (document (concat (item* (menu "Look and feel")) (label "preferences:look-and-feel") "This preference controls the general look and feel of " (TeXmacs) ", and mainly affects the behaviour of the keyboard. The " (menu "default") " look and feel depends on your system (" (menu "Gnome") ", " (menu "KDE") " or " (menu "Emacs") " under " (name "Linux") ", " (menu "Mac OS") " under " (name "Mac OS") ", and " (menu "Windows") " under " (name "Windows") "). The " (menu "Emacs") " look and feel can be used as an alternative on all systems; it has been the default for all " (TeXmacs) " versions prior to" (nbsp) "1.0.7.6.") (concat "More details on the " (hlink "keyboard configuration on different systems" "config/man-config-keyboard.en.tm") " can be found below.") (concat (item* (menu "Interactive questions")) "This preference specifies how the user will be prompted for input when required. Questions may either be displayed in separate windows or on the status bar of " (TeXmacs) ".") (concat (item* (menu "Details in menus")) "This preference specify the level of detail in the menus. The less frequently used features will be left out when selecting " (menu "Simplified menus") ".") (concat (item* (menu "View")) "The preference corresponds to the same viewing options as in the top-level " (menu "View") (nbsp) "menu.") (concat (item* (menu "Language")) "Your preferred language for the " (TeXmacs) " interface.") (concat (item* (menu "Keyboard")) (label "preferences:keyboard") "In addition to the general look and feel, a few additional settings determine the behaviour of the keyboard:") (itemize (document (concat (item) "The " (menu "Cyrillic input method") " specifies " (hlink "how to type text in Cyrillic languages" "config/man-russian.en.tm") ".") (concat (item) "Quotes can be automatically closed according to the " (menu "Automatic quotes") " style.") (concat (item) "Brackets can be automatically closed by enabling " (menu "Automatically close brackets") "."))) (concat (item* (menu "Printer")) "The printer setup can be configured from this submenu.") (concat (item* (menu "Security")) "In theory, " (TeXmacs) " documents may embed macros or hyperlinks which give rise to the execution of arbitrary commands (as specified by the author). In practice, this feature may involve a security risk,. Therefore, the " (menu "Security") " preference allows the user to specify what should be done with untrusted executable code.") (concat (item* (menu "Converters")) "The behaviour of converters between " (TeXmacs) " various other data formats may be configured from this menu. For more details, we refer to the " (hlink "chapter on compatibility with other formats" "convert/man-convert.en.tm") ".") (concat (item* (menu "Scripts")) "Specify a default scripting language for all external scripts.") (concat (item* (menu "Tools")) (TeXmacs) " features a few additional tools which the user may wish to work under certain circumstances:") (itemize (document (concat (item) "A debugging tool for " (TeXmacs) " developers.") (concat (item) "A linking tool for entering typed hyperlinks and complex annotations.") (concat (item) "A versioning tool for comparing two versions of a " (TeXmacs) " document.") (concat (item) "A remote connection tool (which currently does not work anymore)."))) (concat (item* (menu "Autosave")) "This preference specifies how often documents will be autosaved. Any edits to a file which was not autosaved will be lost on undesired termination of " (TeXmacs) ". This typically occurs after an erroneous manipulations by the user, certain bugs in " (TeXmacs) ", or a power problem.") (concat (item* (menu "Bibtex command")) "The user may specify an alternative to " (verbatim "bibtex") " for the compilation of bibliographies using " (BibTeX) ". Notice that recent versions of " (TeXmacs) " integrate a" (nbsp) "native alternative tool for the compilation of bibliographies."))) (section "Keyboard configuration") (concat "The behaviour of keyboard inside " (TeXmacs) " depends on a few user preferences, as specified in the menu " (menu "Edit" "Preferences") ":") (itemize (document (concat (item) "The " (hlink (menu "Look and feel") "config/{man-preferences.en.tm#preferences:look-and-feel}") " determines the main rules for keyboard shortcuts and attempts to make the behaviour as close as possible to the standards for the selected look and feel.") (concat (item) "Some minor customizations are possible via " (hlink (menu "Edit" "Preferences" "Keyboard") "config/{man-preferences.en.tm#preferences:keyboard}") "."))) "We will now detail specific issues related to the keyboard configuration on various systems." (concat "Please refer to the section on " (hlink "general conventions" "start/man-conventions.en.tm") " for explanations on the way keyboard shortcuts are printed in this manual. For more information on keyboard shortcuts, we refer to the general section on how the " (hlink "master the keyboard" "text/keyboard/man-keyboard.en.tm") ".") (paragraph* "Standard conformance") (concat (TeXmacs) " attempts to be as standard-conformant regarding the various look and feels. However, there are a few general situations in which " (TeXmacs) " reserves some keyboard shortcuts for the sake of user-friendliness:") (itemize (document (concat (item) "The function keys " (key "F5") "" (key "F12") " are reserved for special actions.") (concat (item) "Most standards admit a principal modifier key for forming keyboard shortcuts (" (prefix "std") (nbsp) "for your look and feel) and sometimes another modifier key for other shortcuts (" (abbr "e.g.") " the " (key "windows") " key under " (name "Windows") " and " (prefix "A-") " under " (name "Mac OS") "). The remaining free modifier (" (prefix "cmd") " for your look and feel) is reserved for " (TeXmacs) ".") (concat (item) (TeXmacs) " contains many keyboard macros involving one or more modifier keys and the special keys " (key "left") ", " (key "right") ", " (key "up") ", " (key "down") ", " (key "home") ", " (key "end") ", " (key "pageup") ", " (key "pagedown") ", " (key "backspace") ", " (key "delete") ", " (key "space") ", " (key "tab") " and " (key "return") ". The behaviour of shortcuts of this kind is occasionally non standard."))) (paragraph* "Potential conflicts") (concat "The " (TeXmacs) "-specific shortcuts are rarely in conflict with standard conventions. " (space "0.2spc") "Nevertheless, in table" (nbsp) (reference "kbd-conflict-table") ", we have displayed some more or less standard shortcuts, which might work in other applications, but which will usually not work inside " (TeXmacs) ".") (big-table (descriptive-table (tformat (cwith "1" "-1" "1" "-1" "cell-halign" "l") (cwith "24" "24" "1" "4" "cell-halign" "l") (cwith "27" "27" "1" "4" "cell-halign" "l") (cwith "6" "6" "1" "4" "cell-halign" "l") (cwith "8" "8" "1" "4" "cell-halign" "l") (cwith "7" "7" "3" "4" "cell-halign" "l") (cwith "7" "7" "3" "4" "cell-halign" "l") (cwith "8" "8" "3" "4" "cell-halign" "l") (cwith "8" "8" "3" "4" "cell-halign" "l") (cwith "11" "11" "1" "4" "cell-halign" "l") (table (row (cell "Look and feel") (cell "Shortcut") (cell "Alternative") (cell "Meaning")) (row (cell "Emacs") (cell (key "F10")) (cell "") (cell "Show menu bar in window")) (row (cell "Emacs") (cell (key "M-!")) (cell "") (cell "Shell command")) (row (cell "Emacs") (cell (concat (key "M-'") "/" (key "M-`") "/" (key "M-^"))) (cell "") (cell (concat "Needed for " (TeXmacs) " accents"))) (row (cell "Emacs") (cell (concat (key "M-/") "/" (key "M-\\") "/" (key "M-:") "/" (key "M-;"))) (cell "") (cell "")) (row (cell "Emacs") (cell (concat (key "M-left") "/" (key "M-right"))) (cell (concat (key "C-left") "/" (key "C-right"))) (cell "Move word back/forward")) (row (cell "Emacs") (cell (concat (key "M-a") "/" (key "M-e"))) (cell (concat (key "C-up") "/" (key "C-down"))) (cell "Move paragraph back/forward")) (row (cell "Emacs") (cell (concat (key "M-b") "/" (key "M-f"))) (cell (concat (key "C-left") "/" (key "C-right"))) (cell "Move word back/forward")) (row (cell "Emacs") (cell (concat (key "M-l") "/" (key "M-t"))) (cell "") (cell "Locase/transpose words (not impl.)")) (row (cell "Windows") (cell (key "F5")) (cell "") (cell "Refresh/Switch to next pane")) (row (cell "Windows") (cell (concat (key "F6") "/" (key "C-F6") "/" (key "C-S-F6"))) (cell "") (cell "Switch to next/previous pane/tab")) (row (cell "Windows") (cell (key "C-space")) (cell "") (cell "Remove formatting")) (row (cell "Windows") (cell (key "C-tab")) (cell "") (cell "Switch to next child window")) (row (cell "Windows") (cell (concat (key "C-backspace") "/" (key "C-delete"))) (cell "") (cell "Delete word")) (row (cell "Mac OS") (cell (concat (key "C-F5") "/" (key "C-F6") "/" (key "C-S-F6"))) (cell "") (cell "Move focus to toolbar/panels")) (row (cell "Mac OS") (cell (key "C-F7")) (cell "") (cell "Override keyboard access mode")) (row (cell "Mac OS") (cell (concat (key "F9") "/" (key "F10"))) (cell "") (cell "Tile or untile windows")) (row (cell "Mac OS") (cell (concat (key "F11") "/" (key "F12"))) (cell "") (cell "Hide or show windows/dashboard")) (row (cell "Mac OS") (cell (concat (key "tab") "/" (key "S-tab"))) (cell "") (cell "Navigate through controls")) (row (cell "Mac OS") (cell (concat (key "C-tab") ", " (key "C-S-tab"))) (cell "") (cell "Move focus within control groups")) (row (cell "Mac OS") (cell (concat (key "C-space") "/" (key "M-C-space"))) (cell "") (cell "Toggle between input sources")) (row (cell "Mac OS") (cell (concat (key "C-left") "/" (key "C-right"))) (cell (concat (key "structured:move left") "/" (key "structured:move right"))) (cell "Move one cell left/right in table")) (row (cell "Mac OS") (cell (concat (key "C-up") "/" (key "C-down"))) (cell (concat (key "structured:move up") "/" (key "structured:move down"))) (cell "Move one cell up/down in table")) (row (cell "Mac OS") (cell (concat (key "home") "/" (key "end"))) (cell (concat (key "M-up") "/" (key "M-down"))) (cell "Move to start/end of document")) (row (cell "Mac OS") (cell (concat (key "A-pageup") ", " (key "C-up") ", " (key "C-pageup"))) (cell (key "pageup")) (cell "Page up")) (row (cell "Mac OS") (cell (concat (key "A-pagedown") ", " (key "C-down") ", " (key "C-pagedown"))) (cell (key "pagedown")) (cell "Page down")) (row (cell "Mac OS") (cell (concat (key "C-a") "/" (key "C-e"))) (cell (concat (key "A-up") "/" (key "A-down"))) (cell "Move to start/end of block"))))) (document (concat (label "kbd-conflict-table") "Some shortcuts that might work in other applications, but usually not in " (TeXmacs) "."))) (paragraph* "System-wide shortcuts which may take precedence") (concat "In addition to the above standard shortcuts, some system-wide applications may define additional global shortcuts, which take precedence over the " (TeXmacs) " shortcuts. For instance, under " (name "Mac OS X") ", the application " (name "Spaces") " uses the shortcuts " (key "C-left") ", " (key "C-right") ", " (key "C-up") ", " (key "C-down") ", " (key "C-1") ", " (key "C-2") ", " (key "C-3") " and " (key "C-4") " to switch between multiple screens.") (concat "One solution to the above problems is to change the problematic global shortcuts in the responsible applications. For instance, " (name "Spaces") " can be configured to use " (prefix "M-A-C-") " as a prefix instead of " (prefix "C-") " (click on the popup menu behind To switch between spaces and simultaneously press " (prefix "M-") ", " (prefix "A-") " and " (prefix "C-") "). Notice that " (prefix "fn") " is another key which is not used by " (TeXmacs) ".") (concat "If you cannot or do not want to change the system-wide shortcuts, then you may use the " (rigid (concat (key* "escape") "-key")) " in order to produce equivalents for the modifier keys " (prefix "M-") ", " (prefix "A-") " and " (prefix "C-") ". For instance, under " (name "Mac OS") ", " (prefix "C-") " is equivalent to " (key* "escape escape") ". Hence, the " (TeXmacs) " shortcut " (key "C-right") " can also be obtained by typing " (key* "escape escape right") ", which may coexist with the " (name "Spaces") " shortcut " (key "C-right") ". Table" (nbsp) (reference "kbd-escape-table") " shows the modifier key combinations which can be obtained using " (key* "escape") ".") (big-table (descriptive-table (tformat (table (row (cell "Shortcut") (cell "Modifier keys")) (row (cell (key* "escape")) (cell (key "escape"))) (row (cell (key* "escape escape")) (cell (key "escape escape"))) (row (cell (key* "escape escape escape")) (cell (key "escape escape escape"))) (row (cell (key* "S-escape")) (cell (key "S-escape"))) (row (cell (concat (key* "S-escape S-escape") (space "1em"))) (cell (key "S-escape S-escape"))) (row (cell (key* "S-escape S-escape S-escape")) (cell (key "S-escape S-escape S-escape")))))) (document (concat (label "kbd-escape-table") "Keyboard shortcuts for modifier keys or modifier key combinations."))) (paragraph* "User-defined shortcuts") (concat "If, for some reason, the standard " (TeXmacs) " shortcuts are not sufficient or suitable for you, then you may " (hlink "define your own shortcuts" "scheme/man-keyboard.en.tm") ".") (section "Notes for users of Cyrillic languages") "In order to type Russian (and similarly for other Cyrillic languages) text, you have several options:" (itemize (document (concat (item) "Select Russian as your default language in " (menu "Edit" "Preferences" "Language" "Russian") ". If  " (TeXmacs) " starts with Russian menus, then this is done automatically if the Russian locale is set.") (concat (item) "Select Russian for an entire document using " (menu "Document" "Language" "Russian") ".") (concat (item) "Select Russian for a portion of text in another document using " (menu "Format" "Language" "Russian") "."))) (concat "If your X server uses the xkb extension, and is instructed to switch between the Latin and Russian keyboard modes, you need not do anything special. Just switch your keyboard to the Russian mode, and go ahead. All the software needed for this is included in modern Linux distributions, and the xkb extension is enabled by default in " (with "font-family" "tt" "XF86Config") ". With the xkb extension, keysyms are 2-byte, and Russian letters are at 0x6??. The keyboard is configured by " (with "font-family" "tt" "setxkbmap") ". When X starts, it issues this command with the system-wide " (with "font-family" "tt" "Xkbmap") " file (usually living in " (with "font-family" "tt" "/etc/X11/xinit") "), if it exists; and then with the user's " (with "font-family" "tt" "~/.Xkbmap") ", if it exists. A typical " (with "font-family" "tt" "~/.Xkbmap") " may look like") (verbatim "    ru basic grp:shift_toggle") (concat "This means that the keyboard mode is toggled by " (render-key "l-shift r-shift") ". Other popular choices are " (prefix "C-S-") " or " (prefix "A-C-") ", see " (with "font-family" "tt" "/usr/X11R6/lib/X11/xkb/") " for more details. This is the preferred keyboard setup for modern Linux systems, if you plan to use Russian often.") (concat "In older Linux systems, the xkb extension is often disabled. Keysyms are 1-byte, and are configured by " (with "font-family" "tt" "xmodmap") ". When X starts, it issues this command with the system-wide " (with "font-family" "tt" "Xmodmap") " (usually living in " (with "font-family" "tt" "/etc/X11/xinit") "), if it exists; and then with the user's " (with "font-family" "tt" "~/.Xmodmap") ", if it exists. You can configure the mode toggling key combination, and use a 1-byte Russian encoding (such as koi8-r) in the Russian mode. It is easier to download the package " (with "font-family" "tt" "xruskb") ", and just run") (verbatim "    xrus jcuken-koi8") (concat "at the beginning of your X session. This sets the layout jcuken (see below) and the encoding koi8-r for your keyboard in the Russian mode. If you use such keyboard setup, you should select Options " (math "<rightarrow>") " international keyboard " (math "<rightarrow>") " russian " (math "<rightarrow>") " koi8-r.") (concat "It is also possible to use the Windows cp1251 encoding instead of koi8-r, though this is rarely done in UNIX. If you do use " (with "font-family" "tt" "xrus jcuken-cp1251") ", select cp1251 instead of koi8-r.") "All the methods described above require some special actions to russify the keyboard. This is not difficult, see the Cyrillic-HOWTO or, better, its updated version" (verbatim "http://www.inp.nsk.su/~baldin/Cyrillic-HOWTO-russian/Cyrillic-HOWTO-russian.html") (concat "Also, all of the above methods globally affect all X applications: text editors (emacs, nedit, kedit...), xterms, " (TeXmacs) " etc.") (concat "If you need to type Russian only once, or very rarely, a proper keyboard setup may be more trouble than it's worth. For the benefit of such occasional users, " (TeXmacs) " has methods of Russian input which require no preliminary work. Naturally, such methods affect only " (TeXmacs) ", and no other application.") (concat "The simplest way to type some Russian on the standard US-style keyboard with no software setup is to select " (menu "Edit" "Preferences" "Keyboard" "Cyrillic input method" "translit") ". Then, typing a Latin letter will produce the most similar Russian one. In order to get some Russian letters, you have to type 2- or 3-letter combinations:" (vspace "0.5fn")) (big-table (descriptive-table (tformat (cwith "2" "11" "1" "1" "cell-halign" "l") (cwith "2" "11" "2" "2" "cell-halign" "l") (cwith "2" "11" "2" "2" "cell-halign" "c") (cwith "2" "11" "4" "4" "cell-halign" "l") (cwith "2" "11" "4" "4" "cell-halign" "c") (table (row (cell "Shorthand") (cell "for") (cell "Shorthand(s)") (cell "for")) (row (cell (key "text \" e")) (cell (with "language" "russian" "font" "cyrillic" "<#451>")) (cell (key "accent:umlaut E")) (cell (with "language" "russian" "font" "cyrillic" "<#401>"))) (row (cell (key "y o")) (cell (with "language" "russian" "font" "cyrillic" "<#451>")) (cell (concat (key "Y o") " " (key "Y O"))) (cell (with "language" "russian" "font" "cyrillic" "<#401>"))) (row (cell (key "z h")) (cell (with "language" "russian" "font" "cyrillic" "<#436>")) (cell (concat (key "Z h") " " (key "Z H"))) (cell (with "language" "russian" "font" "cyrillic" "<#416>"))) (row (cell (key "j var")) (cell (with "language" "russian" "font" "cyrillic" "<#436>")) (cell (key "J var")) (cell (with "language" "russian" "font" "cyrillic" "<#416>"))) (row (cell (key "c h")) (cell (with "language" "russian" "font" "cyrillic" "<#447>")) (cell (concat (key "C h") " " (key "C H"))) (cell (with "language" "russian" "font" "cyrillic" "<#427>"))) (row (cell (key "s h")) (cell (with "language" "russian" "font" "cyrillic" "<#448>")) (cell (concat (key "S h") " " (key "S H"))) (cell (with "language" "russian" "font" "cyrillic" "<#428>"))) (row (cell (key "s c h")) (cell (with "language" "russian" "font" "cyrillic" "<#449>")) (cell (concat (key "S c h") " " (key "S C H"))) (cell (with "language" "russian" "font" "cyrillic" "<#429>"))) (row (cell (key "e var")) (cell (with "language" "russian" "font" "cyrillic" "<#44D>")) (cell (key "E var")) (cell (with "language" "russian" "font" "cyrillic" "<#42D>"))) (row (cell (key "y u")) (cell (with "language" "russian" "font" "cyrillic" "<#44E>")) (cell (concat (key "Y u") " " (key "Y U"))) (cell (with "language" "russian" "font" "cyrillic" "<#42E>"))) (row (cell (key "y a")) (cell (with "language" "russian" "font" "cyrillic" "<#44F>")) (cell (concat (key "Y a") " " (key "Y A"))) (cell (with "language" "russian" "font" "cyrillic" "<#42F>")))))) "Typing Cyrillic text on a Roman keyboard.") (concat "If you want to get, e.g., " (with "language" "russian" "font" "cyrillic" "<#441><#445>") ", and not " (with "language" "russian" "font" "cyrillic" "<#448>") ", you have to type " (key "s / h") ". Of course, the choice of optimal mapping of Latin letters to Russian ones in not unique. You can investigate the mapping supplied with " (TeXmacs) " and, if you don't like something, override it in your " (with "font-family" "tt" "~/.TeXmacs/progs/my-init-texmacs.scm") ".") (concat "If you select jcuken instead of translit, you get the official Russian typewriter layout. It is so called because the keys qwerty produce " (with "language" "russian" (concat (with "font" "cyrillic" "<#439><#446><#443><#43A><#435><#43D>") ". This input method is most useful")) " when you have a Russian-made keyboard, which has additional Russian letters written on the key caps in red, in the jcuken layout (a similar effect can be achieved by attaching transparent stickers with red Russian letters to caps of a US-style keyboard). It is also useful if you are an experienced Russian typist, and your fingers remember this layout.") (concat "Those who have no Russian letters indicated at the key caps often prefer the yawerty layout, where the keys qwerty produce " (with "language" "russian" "font" "cyrillic" "<#44F><#432><#435><#440><#442><#44B>. Each Latin letter is mapped into a similar Russian one; some additional Russian letters are produced by ") (prefix "S-") "-digits. " (TeXmacs) " comes with a slightly modified yawerty layout, because it does not redefine the keys " (key "$") ", " (render-key "¿") ", " (key "\\") ", which are important for " (TeXmacs) ", are not redefined. The corresponding Russian letters are produced by some " (prefix "S-") "-digit combinations instead.") (section "Notes for users of oriental languages") "In order to type oriental languages, you first have to start a conversion server which can be used in combination with the X input method and set the environment variables accordingly. For instance, in the case of Japanese, one typically has to execute the folowing shell commands:" (shell-code (document "kinput2 &" "export LANG=\"ja_JP.eucJP\"" "export LC_ALL=\"ja_JP.eucJP\"" "export XMODIFIERS=\"@im=kinput2\"")) (concat "You also have to install Japanese fonts. For instance, you may download the ipag fonts " (verbatim "ipam.ttf") ", " (verbatim "ipag.ttf") ", " (verbatim "ipamp.ttf") ", " (verbatim "ipagm.ttf") " and " (verbatim "ipagui.ttf") " and copy them to") (verbatim "    ~/.TeXmacs/fonts/truetype") (concat "After doing this, you may launch " (TeXmacs) " using") (shell-code (document "texmacs --delete-font-cache")) (concat "and select " (menu "Japanese") " from the " (icon "tm_language.xpm") " icon on the first icon bar. If everything went allright, the menus should now show up in Japanese and the current document is also in Japanese. Notice that you may also select Japanese as your default language in " (menu "Edit" "Preferences" "Language" "Japanese") ". It is also possible to select Japanese for a portion of text in a document using " (menu "Format" "Language" "Japanese") ".") (concat "Inside a Japanese portion of text, and depending on your input method, you usually have to type" (nbsp) (key "S-space") " in order to start Kana to Kanji conversion. A small window shows up where you can type phonetic characters and use " (key "space") " in order to start conversion to Kanji characters. When pressing " (shortcut "(kbd-return)") ", the text is inserted into the main " (TeXmacs) " window. Pressing " (key "S-space") " once again returns to the classical " (TeXmacs) " input method.") (appendix (concat "About GNU " (TeXmacs) "-" (TeXmacs-version))) (section "Summary") (big-table (descriptive-table (tformat (cwith "1" "1" "1" "1" "cell-row-span" "1") (cwith "1" "1" "1" "1" "cell-col-span" "2") (cwith "1" "1" "1" "1" "cell-halign" "c") (table (row (cell (concat "GNU " (TeXmacs))) (cell "")) (row (cell "Installed version") (cell (TeXmacs-version))) (row (cell "Supported systems") (cell (concat "Most GNU/" (name "Linux") " systems"))) (row (cell "Copyright") (cell (concat (copyright) " 19982002 by Joris van der Hoeven "))) (row (cell "License") (cell (hlink "GNU General Public License" "../../LICENSE"))) (row (cell "Web sites") (cell (tabular (tformat (twith "table-valign" "T") (cwith "1" "-1" "1" "-1" "cell-lsep" "0spc") (cwith "1" "-1" "1" "-1" "cell-rsep" "0spc") (table (row (cell (verbatim "http://www.texmacs.org"))) (row (cell (verbatim "http://www.gnu.org/software/texmacs")))))))) (row (cell "Contact") (cell (verbatim "contact@texmacs.org"))) (row (cell "Regular mail") (cell (tabular (tformat (twith "table-valign" "T") (cwith "1" "-1" "1" "-1" "cell-lsep" "0spc") (cwith "1" "-1" "1" "-1" "cell-rsep" "0spc") (table (row (cell (concat (abbr "Dr.") " Joris van der Hoeven"))) (row (cell (concat (abbr "Dépt.") " de Mathématiques (" (abbr "Bât.") " 425)"))) (row (cell "Université Paris-Sud")) (row (cell "91405 Orsay Cedex")) (row (cell "France")))))))))) (concat "Summary of the principal information about GNU " (TeXmacs) ".")) (section (concat "The philosophy behind " (TeXmacs))) (subsection (concat "A short description of GNU " (TeXmacs))) (concat "GNU " (TeXmacs) " is a free wysiwyw (what you see is what you want) editing platform with special features for scientists. The software aims to provide a unified and user friendly framework for editing structured documents with different types of content (text, graphics, mathematics, interactive content, " (abbr "etc.") "). The rendering engine uses high-quality typesetting algorithms so as to produce professionally looking documents, which can either be printed out or presented from a laptop.") (concat "The software includes a text editor with support for mathematical formulas, a small technical picture editor and a tool for making presentations from a laptop. Moreover, " (TeXmacs) " can be used as an interface for many external systems for computer algebra, numerical analysis, statistics," (nbsp) "etc. New presentation styles can be written by the user and new features can be added to the editor using the " (name "Scheme") " extension language. A native spreadsheet and tools for collaborative authoring are planned for later.") (concat (TeXmacs) " runs on all major " (name "Unix") " platforms and " (name "Windows") ". Documents can be saved in " (TeXmacs) ", " (name "Xml") " or " (name "Scheme") " format and printed as " (name "Postscript") " or " (name "Pdf") " files. Converters exist for " (TeX) "/" (LaTeX) " and " (name "Html") "/" (name "Mathml") ".") (concat "GNU " (TeXmacs) " is hosted by " (hlink "INRIA" "http://www.inria.fr") ", Bâtiment Allan Turing, Palaiseau, France.") (subsection "Why freedom is important for scientists") (concat "One major objective of " (TeXmacs) " is to promote the development of free software for and by scientists, by significantly reducing the cost of producing high quality user interfaces. If you plan to write an interface between " (TeXmacs) " and other software, then please contact us.") "As a mathematician, I am deeply convinced that only free programs are acceptable from a scientific point of view. I see two main reasons for this:" (itemize (document (concat (item) "A result computed by a mathematical system, whose source code is not public, can not be accepted as part of a mathematical proof.") (concat (item) "Just as a mathematician should be able to build theorems on top of other theorems, it should be possible to freely modify and release algorithms of mathematical software."))) "However, it is strange, and a shame, that the main mathematical programs which are currently being used are proprietary. The main reason for this is that mathematicians often do not consider programming as a full scientific activity. Consequently, the development of useful software is delegated to engineers and the resulting programs are used as black boxes." "This subdivision of scientific activity is very artificial: it is often very important from a scientific point of view to know what there is in the black box. Inversely, deep scientific understanding usually leads to the production of better software. Consequently, I think that scientists should advocate the development of software as a full scientific activity, comparable to writing articles. Then it is clear too that such software should be diffused in a way which is compatible with the requirements of science: public availability, reproducibility and free usability." (section (concat "The authors of " (TeXmacs))) (concat "The GNU " (TeXmacs) " system, which is part of the GNU project, was designed and written by Joris van der Hoeven. The system was inspired both by the " (TeX) " system, written by D. Knuth, and by " (with "font-shape" "small-caps" "Emacs") ", written by R. Stallman. Special thanks goes to them, as well as to the " (abbr "C.N.R.S.") " (the French national institute for scientific research), which employs me and authorized me to freely distribute this program. Further thanks go to the contributors below.") (subsection (concat "Developers of " (TeXmacs))) (itemize (document (concat (item) "Massimiliano Gubinelli is responsible for the " (name "Qt") " port and several improvements for the " (name "MacOS X") " platform.") (concat (item) "Andrey Grozin has constantly helped us with many issues: interfaces to several computer algebra systems, support for Cyrillic, tools for the manipulation of dictionaries, etc.") (concat (item) "François Poulain has made significant improvements in the " (LaTeX) " import and export converters and has contributed numerous other patches.") (concat (item) "David Allouche replaced the " (name "gencc") " preprocessor by the more standard " (c++) " template system. He also made many other patches, bug reports and he did a lot of the administration of " (TeXmacs) ".") (concat (item) "Miguel de Benito Delgado works on the " (name "Qt") " port, the usage of " (TeXmacs) " to develop and browse its " (name "Scheme") " code and general improvements to the user experience.") (concat (item) "Denis Raux maintains the website, the mailing lists and the " (name "Windows") " version.") (concat (item) "Henri Lesourd developed a native mode for drawing technical pictures inside " (TeXmacs) ". He also fixed a bug in the presentation mode.") (concat (item) "Dan Martens made the " (name "Windows") " port.") (concat (item) "David Michel provided help concerning the " (name "Qt") "-based " (name "Windows") " port and several portability issues.") (concat (item) "Andreas Seidl has been helping with documentation, a " (name "Cygwin") " package and several other things.") (concat (item) "Dan Grayson helped me to implement communications with computer algebra systems via pipes. He also provided some money support for " (TeXmacs) ", and he made many useful comments and suggestions.") (concat (item) "Fabrice Rouillier provided help on a simplified " (TeXmacs) " installer based on " (name "Cygwin") ".") (concat (item) "Nobuki Takayama invited me to Japan in order to add CJK support to " (TeXmacs) ". He also provided a lot of help with this task.") (concat (item) "Karim Belabas designed and developed with me the first protocol for interfacing " (TeXmacs) " with scientific computation or computer algebra systems. He also implemented the interface with the Pari system.") (concat (item) "Felix Breuer helped with the support of Unicode and other character encodings. He also made a donation to the project.") (concat (item) "Norbert Nemec contributed a series of patches.") (concat (item) "Josef Weidendorfer made several patches for improving the performance of " (TeXmacs) ".") (concat (item) "Sam Liddicott for several patches, including hyperlink support for " (name "Pdf") " files.") (concat (item) "Zou Hu for his help on CJK support and the " (name "Windows") " port.") (concat (item) "Stéphane Payrard made an important bugfix for destroying windows.") (concat (item) "Bruno Rino has helperd us migrating from CVS to SVN.") (concat (item) "Fabien Chéreau has helped us with the " (name "Qt") " port of " (TeXmacs) ".") (concat (item) "Johann Dréo for the new " (TeXmacs) " icon and many other graphics.") (concat (item) "Bill Page and David Mentré for the support of the free version of " (name "Axiom") ".") (concat (item) "Chu-Ching Huang for writing CAS documentation and making a " (name "Knoppix") " CD for " (TeXmacs) ".") (concat (item) "Nelson Beebe helped with manifacturing a more robust " (verbatim "configure.in") ".") (concat (item) "Kai Krüger fixed several details for the new " (name "Maple") " interface.") (concat (item) "Mickael Floc'hlay and Arnaud Ébalard for their work on searching for help.") (concat (item) "Gwenael Gabard for some fixes in the " (LaTeX) " to " (TeXmacs) " converter.") (concat (item) "Igor V. Kovalenko and Teemu Ikonen for their help on debugging TeXmacs and a few patches.") (concat (item) "Gareth McCaughan made several patches and comments.") (concat (item) "Immanuel Normann is working on an OpenMath converter.") (concat (item) "Jonas Lööf for a precise installation procedure on " (name "Cygwin") ".") (concat (item) "Rob Clark made a patch which improves the system time support.") (concat (item) "Stanislav Brabec for several patches so as to increase portability."))) (subsection (concat "Authors and maintainers of plugins for " (TeXmacs))) (description-dash (document (concat (item* "Asymptote") "Yann Dirson and Emmanuël Corcelle.") (concat (item* "Axiom") "Andrey Grozin, Bill Page, David Mentré and Tim Daly.") (concat (item* "Cadabra") "Kasper Peeters.") (concat (item* "CLisp") "Michael Graffam.") (concat (item* "CMucl") "Michael Graffam.") (concat (item* "DraTeX") "Nicolas Ratier.") (concat (item* "Eukleides") "Mark Arrasmith.") (concat (item* "Feynmf") "Maarten Wegewijs.") (concat (item* "Giac") "Bernard Parisse.") (concat (item* "GNUplot") "Stephan Mucha.") (concat (item* "Graphviz") "Jorik Blaas.") (concat (item* "GTybalt") "Stefan Weinzierl.") (concat (item* "Lush") "Michael Graffam.") (concat (item* "Macaulay 2") "Dan Grayson.") (concat (item* "Maple") "Joris van der Hoeven.") (concat (item* "Mathemagix") "Joris van der Hoeven and Grégoire Lecerf.") (concat (item* "Matlab") "Michael Graffam.") (concat (item* "Maxima") "Andrey Grozin and James Amundson.") (concat (item* "Mupad") "Christopher Creutzig and Andrey Grozin.") (concat (item* "Octave") "Michael Graffam.") (concat (item* "Pari") "Karim Belabas.") (concat (item* "Python") "Ero Carrera.") (concat (item* "Qcl") "Andrey Grozin.") (concat (item* "R") "Michael Lachmann.") (concat (item* "Reduce") "Andrey Grozin.") (concat (item* "Scilab") "François Poulain, Serge Steer and Claude Gomez.") (concat (item* "Shell") "Joris van der Hoeven.") (concat (item* "TeXgraph") "Emmanuël Corcelle.") (concat (item* "XYpic") "Nicolas Ratier.") (concat (item* "Yacas") "Ayal Pinkus."))) (subsection (concat "Administration of " (TeXmacs) " and material support")) (itemize (document (concat (item) "Rennes Métropôle and the " (abbr "C.N.R.S.") " for financially supporting the development of " (TeXmacs) ".") (concat (item) "Christoph Benzmueller and his team for financially supporting the development of " (TeXmacs) ".") (concat (item) "Springer-Verlag for their financial support for making a better Windows version.") (concat (item) "Jean-Claude Fernandez, Fabien Salvi and the other persons from the CRI host and administrate the " (TeXmacs) " website.") (concat (item) "Álvaro Tejero Cantero maintains up the " (TeXmacs) " Wiki.") (concat (item) "Loic Dachary made " (TeXmacs) " accessible on Savannah."))) (subsection (concat "Porting " (TeXmacs) " to other platforms")) (itemize (document (concat (item) "Dan Martens is working on a the experimental Windows port.") (concat (item) "Marciano Siniscalchi ported " (TeXmacs) " to Cygwin. His work was further perfected by Loïc Pottier. Andreas Seidl made a the standard Cygwin package.") (concat (item) "Martin Costabel ported " (TeXmacs) " to MacOSX.") (concat (item) "Ralf Treinen and others has been ensuring the portability of " (TeXmacs) " to all architectures supported by " (name "Debian") " " (name "Gnu") "/" (name "Linux") ".") (concat (item) "Bruno Haible and Gregory Wright helped with porting " (TeXmacs) " to the SUN system and maintaining it.") (concat (item) "Philipp Tomsich and Chuck Sites for their help with the IRIX port."))) (subsection (concat "Contributors to " (TeXmacs) " packages")) (itemize (document (concat (item) "Atsuhito Kohda and Kamaraju Kusumanchi maintain the Debian package for " (TeXmacs) ".") (concat (item) "Christophe Merlet and Bo Forslund helped with making a portable RPM package.") (concat (item) "Lenny Cartier maintains the " (TeXmacs) " RPM for Mandrake Cooker.") (concat (item) "Jean Pierre Demailly and Yves Potin made " (TeXmacs) " part of the CNDP project to support free software."))) (subsection (concat "Internationalization of " (TeXmacs))) (description (document (concat (item* "Chinese") "Chu-Ching Huang and Zou-Hu.") (concat (item* "Croatian") "Luka Marohni¢.") (concat (item* "Czech") "David Rezac.") (concat (item* "Danish") "Magnus Marius Rohde.") (concat (item* "Dutch") "Joris van der Hoeven.") (concat (item* "Finnish") "Teemu Ikonen.") (concat (item* "French") "Michèle Garoche, Joris van der Hoeven.") (concat (item* "German") "Dietmar Jung, Hans Dembinski, Jan Ulrich Hasecke, Christoph Strobel, Joris van der Hoeven, Thomas Langen, Ralf Treinen.") (concat (item* "Greek") "Alkis Akritas.") (concat (item* "Hungarian") "András Kadinger.") (concat (item* "Italian") "Andrea Centomo, Lucia Gecchelin, Xav and Daniele Pighin, Gian Luigi Gragnani.") (concat (item* "Japanese") "Nobuki Takayama.") (concat (item* "Korean") "Karnes Kim.") (concat (item* "Polish") "Robert Janusz, Emil Nowak, Jan Alboszta.") (concat (item* "Portuguese") "Ramiro Brito Willmersdorf, Márcio Laurini, Alexandre Taschetto de Castro.") (concat (item* "Romanian") "Dan Ignat.") (concat (item* "Russian") "Andrey Grozin.") (concat (item* "Slovene") "Ziga Kranjec.") (concat (item* "Spanish") "Álvaro Cantero Tejero, Pablo Ruiz Múzquiz, David Moriano Garcia, Offray Vladimir Luna Cárdenas.") (concat (item* "Swedish") "Harald Ellmann.") (concat (item* "Taiwanese") "Chu-Ching Huang.") (concat (item* "Ukrainian") "Volodymyr Lisivka."))) (subsection "Other contributors") (concat "Final thanks go to all others who have contributed to " (TeXmacs) ", for instance by sending bug reports or by giving suggestions for future releases: Alexandre Abbes, Alessio Abogani, Aaron Acton, Till Adam, Murali Agastya, Eizo Akiyama, Javed Alam, Doublet Alban, Michele Alessandrin, Guillaume Allègre, Andreas Almroth, Tom Alsberg, James Amundson, Piero D'Ancona, Daniel Andor, Ayal Anis, Larry D'Anna, Javier Arantegui Jimenez, André Arnold, Uwe Assmann, Philippe Audebaud, Daniel Augot, Olaf Bachmann, Franky Backeljauw, Nick Bailey, Adrian Soto Banuelos, Pierre Barbier de Reuille, Marc Barisch, Giovanni Maniscalco Basile, Claude Baudouin, Marten Bauer, Luc Béhar, Roman Belenov, Odile Bénassy, Paul Benham, Roy C. Bentley, Attila Bergou, Christophe Bernard, Konrad Bernloehr, Karl Berry, Matthias Berth, Matteo Bertini, Cédric Bertolini, Matthew Bettencourt, Raktim Bhattacharya, Giovanni Biczó, Anne-Laure Biolley, Benedikt Birkenbach, Jim Blandy, Sören Blom, François Bochatay, Christof Boeckler, Anton Bolfing, Robert Borys, Didier Le Botlan, Mohsen Bouaissa, Thierry Bouche, Adrien Bourdet, Michel Brabants, Didier Bretin, Jean-Yves Briend, Henrik Brink, Simon Britnell, Alexander M. Budge, Daniel Bump, Yoel Callev, José Cano, Charles James Leonardo Quarra Cappiello, Patrick Cardona, Niclas Carlsson, Dominique Caron, António Carvalho, Michel Castagner, Topher Cawlfield, Carlo Cecati, Beni Cherniavsky, Kuo-Ping Chiao, Teddy Fen-Chong, Henri Cohen, Johann Cohen-Tanugi, Dominique Colnet, Vincenzo Colosimo, Claire M. Connelly, Christoph Conrad, Riccardo Corradini, Paulo Correia, Olivier Cortes, Robert J. Cristel, Maxime Curioni, Allan Curtis, Jason Dagit, Stefano Dal Pra, Thierry Dalon, François Dausseur, Jon Davidson, Mike Davidson, Thomas Delzant, Jean-Pierre Demailly, Peter Denisevich, Alessio Dessi, Benno Dielmann, Lucas Dixon, Mikael Djurfeldt, Gabriel Dos Reis, Alban Doublet, Steingrim Dovland, Michael John Downes, Benjamin Drieu, Jose Duato, Amit Dubey, Daniel Duparc, Guillaume Duval, Tim Ebringer, Dirk Eddelbuettel, Magnus Ekdahl, Ulf Ekström, Sreedhar Ellisetty, Luis A. Escobar, Thomas Esser, Stephan Fabel, Robin Fairbairns, Tony Falcone, Vladimir Fedonov, Hilaire Fernandes, Ken Feyl, Jens Finke, Thomas Fischbacher, Juan Flynn, Cedric Foellmi, Enrico Forestieri, Ted Forringer, Christian Forster, Charlie Fortner, Stefan Freinatis, Michael P Friedlander, Nils Frohberg, Rudi Gaelzer, Maciej Gajewski, Lionel Garnier, Philippe Gogol, Björn Gohla, Patrick Gonzalez, Nirmal Govind, Albert Graef, Michael Graffam, Klaus Graichen, Ian Grant, Frédéric Grasset, Guido Grazioli, Wilco Greven, Cyril Grunspan, Laurent Guillon, Yves Guillou, Tae-Won Ha, Harri Haataja, Sébastien Hache, Irwan Hadi, James W. Haefner, Sam Halliday, Ola Hamfors, Aaron Hammack, Guillaume Hanrot, Alexander K. Hansen, Peter I. Hansen, Zaid Harchaoui, Jesper Harder, Philipp Hartmann, P. L. Hayes, Karl M. Hegbloom, Jochen Heinloth, Gunnar Hellmund, Ralf Hemmecke, Roy Henk, John Hernlund, Alain Herreman, Alexander Heuer, Johannes Hirn, Santiago Hirschfeld, Andreas Horn, Peter Horn, Chu-Ching Huang, Sylvain Huet, Ed Hurst, Karl Jarrod Hyder, Richard Ibbotson, Benjamin T. Ingram, Alexander Isacson, Michael Ivanov, Vladimir G. Ivanovic, Maik Jablonski, Frederic de Jaeger, Pierre Jarillon, Neil Jerram, Paul E. Johnson, Pierre-Henri Jondot, Peter Jung, Mukund S. Kalisi, Antoun Kanawati, Yarden Katz, Tim Kaulmann, Bernhard Keil, Samuel Kemp, Jeremy Kephart, Michael Kettner, Salman Khilji, Iwao Kimura, Simon Kirkby, Ronny Klein, Peter Koepke, Matthias Koeppe, John Kollar, Denis Kovacs, Jeff Kowalczyk, Dmitri Kozionov, Ralph Krause, Neel Krishnaswami, Friedrich Laher, Winter Laite, Anthony Lander, Russell Lang, David Latreyte, Christopher Lee, Milan Lehocky, Torsten Leidig, Patrick Lenz, Kalle Lertola, Tristan Ley, Joerg Lippmann, Marc Longo, Pierre Lorenzon, Ralph Lõvi, V. S. Lugovsky, Gregory Lussiana, Bud Maddock, Duraid Madina, Camm Maguire, Yael Maguire, Paul Magwene, Jeremiah Mahler, Vincent Maillot, Giacomo Mallucci, Lionel Elie Mamane, Sourav K. Mandal, Andy P. Manners, Yun Mao, Chris Marcellin, Sylvain Marchand, Bernd Markgraf, Eric Marsden, Chris Marston, Evan Martin, Carlos Dehesa Martínez, Paulo Jorge de Oliveira Cantante de Matos, Tom McArdell, Alisdair McDiarmid, Bob McElrath, Robert Medeiros, Phil Mendelsohn, Sébastien de Menten, Jean-Michel Mermet, Jon Merriman, Herve le Meur, Ingolf Meyer, Amir Michail, Franck Michel, Arkadiusz Mi±kiewicz, Sasha Mitelman, Dirk Moebius, Jack Moffitt, Jan David Mol, Klaus-Dieter Möller, Harvey Monder, Juan Fresneda Montano, André Moreau, Guillaume Morin, Julian Morrison, Bernard Mourrain, Stephan Mucha, Toby Muhlhofer, Vijayendra Munikoti, Nathan Myers, Norbert Nemec, Thomas Neumann, Thien-Thi Nguyen, Han-Wen Nienhuys, Nix N. Nix, Eduardo Nogueira, Immanuel Normann, Jean-Baptiste Note, Ralf Nuetzel, Kostas Oikonomou, Ondrej Pacovsky, Bill Page, Santtu Pajukanta, Pierre Pansu, Ilya Papiashvili, Bernard Parisse, Frédéric Parrenin, André Pascual, Fernández Pascual, Yannick Patois, Alen L. Peacock, François Pellegrini, Antonio Costa Pereira, Enrique Perez-Terron, Jacob Perkins, Bernard Perrot, Jan Peters, Jean Peyratout, Jacques Peyriere, Valery Pipin, Dimitri Pissarenko, Yves Pocchiola, Benjamin Podszun, Martin Pollet, Benjamin Poussin, Isaías V. Prestes, Rui Prior, Julien Puydt, Nguyen-Dai Quy, Manoj Rajagopalan, Ramakrishnan, Adrien Ramparison, Nicolas Ratier, Olivier Ravard, Leo Razoumov, Kenneth Reinhardt, Cesar A. Rendon, Christian Requena, Diego Restrepo, Chris Retford, Robert Ribnitz, Thomas CLive Richards, Staffan Ringbom, Eric Ringeisen, Christian Ritter, William G. Ritter, Will Robinson, Juan Pablo Romero, Pascal Romon, Juergen Rose, Mike Rosellini, Mike Rosing, Bernard Rousseau, Eyal Rozenberg, Olivier Ruatta, Filippo Rusconi, Gaetan Ryckeboer, Philippe Sam-Long, John Sandeman, Duncan Sands, Breton Saunders, Claire Sausset, David Sauzin, Gilles Schaeffer, Guido Schimmels, Rainer Schöpf, David Schweikert, Stefan Schwertheim, Rui Miguel Seabra, Chung-Tsun Shieh, Sami Sieranoja, Vasco Alexandre da Silva Costa, Marciano Siniscalchi, Daniel Skarda, Murray Smigel, Václav milauer, Dale P. Smith, Luke Snow, René Snyders, Pekka Sorjonen, Kasper Souren, Rodney Sparapani, Bas Spitters, Ivan Stanisavljevic, Starseeker, Harvey J. Stein, Peter Sties, Bernard Stloup, Peter Stoehr, Thierry Stoehr, James Su, Przemyslaw Sulek, Ben Sussman, Roman Svetlov, Milan Svoboda, Dan Synek, Pan Tadeusz, Luca Tagliacozzo, Sam Tannous, John Tapsell, Dung TaQuang, Gerald Teschl, Laurent Thery, Eric Thiébaut, Nicolas Thiery, Helfer Thomas, Reuben Thomas, Dylan Thurston, Kurt Ting, Janus N. Tøndering, Philippe Trébuchet, Marco Trevisani, Boris Tschirschwitz, Elias Tsigaridas, Michael M. Tung, Andreas Umbach, Miguel A. Valle, Rémi Vanicat, Harro Verkouter, Jacques Vernin, Sawan Vithlani, Philip A. Viton, Marius Vollmer, Guy Wallet, Adam Warner, Thomas Wawrzinek, Maarten Wegewijs, Duke Whang, Lars Willert, Grayson Williams, Barton Willis, Claus-Peter Wirth, Ben Wise, Wiebe van der Worp, Pengcheng Wu, Damien Wyart, Wang Yin, Lukas Zapletal, Volker Zell, Oleg Zhirov, Vadim V. Zhytnikov, Richard Zidlicky, Sascha Ziemann, Reinhard Zierke, Paul Zimmermann.") (subsection "Contacting us") "You can either contact us by email at" (verbatim "    contact@texmacs.org") "or by regular mail at" (verbatim (concat "    Joris van der Hoeven" (next-line) "    LIX, École polytechnique" (next-line) "    91128 Palaiseau Cedex" (next-line) "    France")) (concat "There are also several " (TeXmacs) " mailing lists:") (verbatim (concat "    texmacs-users@texmacs.org" (next-line) "    texmacs-info@texmacs.org" (next-line) "    texmacs-dev@gnu.org")) (section (concat "Important changes in " (TeXmacs))) (concat "Below, we briefly describe the most important changes which have occurred in " (TeXmacs) " since version 0.3.3.15. We also maintain a more detailed " (hlink "change log" "../about/changes/change-log.en.tm") ".") (concat "In general, when upgrading to a new version, we recommend you to make backups of your old " (TeXmacs) " files before opening them with the newer version of " (TeXmacs) ". In the unlikely case when your old file does not open in the correct way, please send a bug report to") (verbatim (document "    bugs@texmacs.org")) (concat "and send your old document as an attached file. Do not forget to mention your version of " (TeXmacs) " and the system you are using.") (subsection "Improved spacing inside formulas (1.0.7.10)") (concat "In the new version, the spacing around mathematical operators has been made dependent on the semantic context. For instance, when used as an infix operator in a subtraction " (math "x-y") ", there are small spaces around the minus sign " (math "-") "; this is no longer the case in " (math "-x") ", where we use the minus as a" (nbsp) "prefix. Similarly, the spacing inside lists of operators " (math "+,-,<times>") " is now correct. However, the modification may alter the spacing inside some formulas in existing documents. For critical documents, you may thus want to review the line breaking.") (concat "Some of the keyboard shortcuts inside formulas have also been modified. For instance, " (math "<wedge>") " and " (math "<vee>") " are now obtained by typing " (key "&") " " (abbr "resp.") " " (key "%") ". The shortcuts for " (math "<in>") ", " (math "<prec>") " and " (math "|") " have also been changed. For more information, please refer to the documentation on " (hlink "editing mathematical formulas" "../about/changes/{/Users/Owner/.TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/asymptote/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/axiom/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cadabra/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cocoa5/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/dratex/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/eukleides/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/feynmf/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/fricas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/giac/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gnuplot/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/graphviz/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gtybalt/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lisp/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lush/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/macaulay2/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maple/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathemagix/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathematica/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/matlab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maxima/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mupad/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mycas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/octave/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/pari/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/python/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/qcl/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/r/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/reduce/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/sage/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/scilab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/shell/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/texgraph/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/xypic/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/yacas/doc}/main/math/man-math.en.tm") ". At this place, you will also find more information about the newly added semantic editing features.") (subsection "Auto-matching brackets (1.0.7.9)") (concat "From now on, inside mathematical formulas, all brackets have to match and all big operators should admit well-specified scopes. To this effect, the way parenthesized expressions are edited has changed, although the old non-matching editing style can be restored using " (menu "Edit" "Preferences" "Keyboard" "Automatic brackets" "Disable") ".") (concat "Documents for previous versions of " (TeXmacs) " will be upgraded automatically in order to make all brackets match and determine the scopes of big operators. Although this task is accomplished using heuristics, the result should be correct most of the time. In any case, from the typesetting point of view, the upgraded documents will always look the same.") (subsection "More context dependent interface (1.0.7.8)") (concat "The interface of the new version of " (TeXmacs) " is more context dependent. On the one hand, the menus and toolbars have been reorganized. Several items from the " (menu "Insert") " menu have been moved to the " (menu "Format") " menu, whereas the context dependent menus " (menu "Text") ", " (menu "Mathematics") ", " (menu "Table") ", " (menu "Session") ", " (abbr "etc.") " have disappeared, their contents being moved to the " (menu "Insert") " menu.") (concat "On the other hand, a new top-level " (menu "Focus") " menu has been created. Its contents is highly context dependent and determined as a function of the " (em "current focus") ". Similarly, a third " (em "focus toolbar") " has been introduced. For more information, we refer to the section on " (hlink "typing structured text" "../about/changes/{/Users/Owner/.TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/asymptote/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/axiom/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cadabra/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cocoa5/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/dratex/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/eukleides/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/feynmf/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/fricas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/giac/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gnuplot/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/graphviz/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gtybalt/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lisp/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lush/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/macaulay2/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maple/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathemagix/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathematica/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/matlab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maxima/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mupad/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mycas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/octave/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/pari/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/python/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/qcl/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/r/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/reduce/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/sage/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/scilab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/shell/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/texgraph/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/xypic/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/yacas/doc}/main/text/man-structure.en.tm") ".") (concat (TeXmacs) " developers should also notice that the introduction of the focus has modified the way contextual overloading is done. For more details, we refer to the sections on " (hlink "contextual overloading" "../about/changes/{/Users/Owner/.TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/asymptote/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/axiom/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cadabra/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cocoa5/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/dratex/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/eukleides/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/feynmf/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/fricas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/giac/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gnuplot/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/graphviz/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gtybalt/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lisp/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lush/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/macaulay2/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maple/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathemagix/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathematica/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/matlab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maxima/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mupad/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mycas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/octave/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/pari/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/python/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/qcl/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/r/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/reduce/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/sage/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/scilab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/shell/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/texgraph/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/xypic/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/yacas/doc}/devel/scheme/overview/overview-overloading.en.tm") " and " (hlink (concat "the " (TeXmacs) " editing model") "../about/changes/{/Users/Owner/.TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/asymptote/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/axiom/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cadabra/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cocoa5/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/dratex/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/eukleides/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/feynmf/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/fricas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/giac/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gnuplot/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/graphviz/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gtybalt/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lisp/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lush/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/macaulay2/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maple/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathemagix/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathematica/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/matlab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maxima/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mupad/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mycas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/octave/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/pari/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/python/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/qcl/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/r/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/reduce/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/sage/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/scilab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/shell/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/texgraph/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/xypic/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/yacas/doc}/devel/scheme/edit/edit-model.en.tm") ".") (subsection "Default look and feel (1.0.7.7)") (concat "From this version on, the default " (em "look and feel") " of " (TeXmacs) " depends on your operating system and environment. The implemented " (em "look and feels") " (" (name "Emacs") ", " (name "Gnome") ", " (name "KDE") ", " (name "MacOS") ", " (name "Windows") ") attempt to be as compatible as possible with the " (em "look and feel") " of other applications on your system. You may choose an alternative " (em "look and feel") " in " (menu "Edit" "Preferences" "Look and feel") ".") (concat "In order to make the " (TeXmacs) " keyboard shortcuts as compatible as possible with the standards on your system, we have redefined many of the keyboard shortcuts. Although these changes will only marginally affect the " (name "Emacs") " " (em "look and feel") ", there will be substential changes for all other " (em "look and feels") ".") (concat "If you upgrade from a previous " (TeXmacs) " version with the " (name "Emacs") " " (em "look and feel") ", then you will be able to keep most of your habits. In all contrary cases, including installation of " (TeXmacs) " on a" (nbsp) "new computer, you probably need to retake a look at our sections on " (hlink "keyboard configuration" "../about/changes/{/Users/Owner/.TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/asymptote/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/axiom/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cadabra/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cocoa5/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/dratex/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/eukleides/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/feynmf/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/fricas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/giac/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gnuplot/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/graphviz/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gtybalt/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lisp/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lush/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/macaulay2/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maple/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathemagix/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathematica/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/matlab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maxima/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mupad/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mycas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/octave/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/pari/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/python/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/qcl/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/r/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/reduce/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/sage/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/scilab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/shell/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/texgraph/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/xypic/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/yacas/doc}/main/config/man-config-keyboard.en.tm") " and " (hlink "mastering the keyboard" "../about/changes/{/Users/Owner/.TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/asymptote/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/axiom/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cadabra/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cocoa5/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/dratex/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/eukleides/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/feynmf/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/fricas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/giac/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gnuplot/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/graphviz/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gtybalt/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lisp/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lush/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/macaulay2/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maple/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathemagix/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathematica/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/matlab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maxima/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mupad/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mycas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/octave/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/pari/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/python/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/qcl/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/r/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/reduce/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/sage/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/scilab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/shell/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/texgraph/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/xypic/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/yacas/doc}/main/text/keyboard/man-keyboard.en.tm") ". In cases of doubt, please refer to the user manual; the keyboard shortcuts in the manual are automatically adapted to the active " (em "look and feel") ".") (subsection "Linking tool (1.0.6.3)") (concat "From this version on, " (TeXmacs) " includes a linking tool, as well as a tool for remote connections to a " (TeXmacs) " server. In the 1.0.6.* series, these tools are still under development, so we ask users for their kind feedback. In order to enable the tools, you have to activate them in " (menu "Edit" "Preferences" "Utilities") ". Notice that the linking tool replaces the " (name "Proclus") " plug-in. If you were a user of this plug-in, then please check with its author " (name "Alain Herreman") " whether an automatic upgrade facility is available.") (subsection "Type 1 fonts become the default (1.0.5.10)") (concat "From now on, " (TeXmacs) " uses Type 1 fonts by default, which enable you to generate higher quality " (name "Pdf") " files. The basic " (TeXmacs) " distribution (for " (name "Unix") ") comes with a minimal set of EC fonts for European languages, but an additional font package can be downloaded from our web site (the additional fonts are directly included in the " (name "Windows") " version). Whenever a given font is not available as a type 1 font, then " (TeXmacs) " falls back on " (name "Metafont") " in order to generate a Type" (nbsp) "3 substitute. This behaviour can be further customized in " (menu "Edit" "Preferences" "Printer" "Font type") ".") (subsection "New multi-part document mechanism (1.0.5.6 -- 1.0.5.7)") (concat "Previous versions of " (TeXmacs) " provided the project mechanism for dealing with large documents like books. In the new version, any large structured document can be transformed into a multi-part document whose individual parts can be viewed and edited in an efficient way (see " (menu "Document" "Part") "). Former multi-file projects are deprecated although still supported. They can be transformed into multi-part documents using " (menu "Tools" "Project" "Expand inclusions") ". A new multi-part document corresponds to a single file.") (subsection "Improved scheme interface (1.0.5.1 -- 1.0.5.6)") (concat "The " (name "Scheme") " interface has been further improved and stabilized. For those users who customized the behaviour of " (TeXmacs) " using a personal initialization file, it may be necessary to make a few corrections. Some information about the new " (name "Scheme") " interface can be found in " (menu "Scheme" "Extensions") ". Further documentation will be written later.") (subsection "Improved titles (1.0.4.1)") "From now on, titles of documents are more structured. This makes it easier to render the same title information in the appropriate ways for different styles. Old-style titles are automatically upgraded, but the result is only expected to be correct for documents with a single author. For documents with multiple authors, you may have to re-enter the title using our new interface." (subsection "Improved style sheets and source editing mode (1.0.3.5)") (concat "We are making it easier for users to edit style sheets. This improvement made it necessary to simplify many of the standard " (TeXmacs) " styles and packages, so that it will be easier to customize them. However, if you already designed some style files, then this may break some of their features. We mainly redesigned the list environments, the section environments and automatic numbering. Please report any problems to us.") (subsection "Renaming of tags and environment variables (1.0.2.7 -- 1.0.2.8)") "Most environment variables and some tags have been renamed, so that these names no longer contain whitespace and only dashes (and no underscores) as separators." (subsection "Macro expansion (1.0.2.3 -- 1.0.2.7)") "An important internal change concerning the data format has been made: macro expansions and function applications like" (scm-code (document (concat "(expand " (em "tag") " " (em "arg-1") " ... " (em "arg-n") ")"))) (scm-code (document (concat "(apply " (em "tag") " " (em "arg-1") " ... " (em "arg-n") ")"))) "are now replaced by hard-coded tags" (scm-code (document (concat "(" (em "tag") " " (em "arg-1") " ... " (em "arg-n") ")"))) (concat "Moreover, functions have systematically been replaced by macros. The few built-in functions which may take an arbitrary number of arguments have been rewritten using the new " (markup "xmacro") " construct. If you ever wrote such a function yourself, then you will need to rewrite it too.") (concat "The new approach favorites a uniform treatment of macros and functions and makes the internal representation match with the corresponding " (name "Scheme") " representation. More and more information about tags will gradually be stored in the " (abbr "D.R.D.") " (Data Relation Definition). This information is mostly determined automatically using heuristics.") "Notice that some perverse errors might arise because of the above changes. Please keep copies of your old files and report any suspicious behaviour to us." (subsection "Formatting tags (1.0.2 -- 1.0.2.1)") (concat "All formattings constructs without arguments (like line breaks, indentation directives, etc.) have been replaced by tags of arity zero. This makes most new documents badly unreadable for older versions of " (TeXmacs) " and subtle errors might occasionnaly occur when saving or loading, or during other editing operations.") (subsection "Keyboard (1.0.0.11 -- 1.0.1)") (concat "The " (TeXmacs) " keybindings have been rationalized. Here follows a list of the major changes:") (itemize (document (concat (item) "The " (key "E-") " prefix has been renamed to " (prefix "M-") ".") (concat (item) (key "escape") " is equivalent to " (prefix "M-") " and " (key "escape") "-" (key "escape") " to " (prefix "A-") ".") (concat (item) "Mode dependent commands are now prefixed by " (prefix "A-") ". In particular, accents are typed using " (prefix "A-") " instead of " (key "E-") ".") (concat (item) "Variants are now obtained using " (key "tab") " instead of " (key "*") " and you can circle back using " (key "S-tab") ".") (concat (item) "Greek characters are now typed using " (prefix "A-C-") ", " (prefix "math:greek") ", or the hyper modifier, which can be configured in " (samp "Edit") (math "<rightarrow>") (samp "Preferences") ". You may also obtain Greek characters as variants of Latin characters. For instance, " (key "p tab") " yields " (math "<pi>") ".") (concat (item) "The signification of the cursor keys in combination with control, alt and meta has changed."))) (concat "You may choose between several look and feels for the keyboard behaviour in " (samp "Edit") (math "<rightarrow>") (samp "Preferences") (math "<rightarrow>") (samp "Look and feel") ". The default is " (samp "Emacs") ", but you may choose " (samp "Old style") " if you want to keep the behaviour to which you may be used now.") (subsection "Menus (1.0.0.7 -- 1.0.1)") "Several changes have been made in the menus. Here follows a list of the major changes:" (itemize (document (concat (item) (samp "Buffer") " has been renamed as " (samp "Go") ".") (concat (item) "Several items from " (samp "File") " have been moved to " (samp "View") ".") (concat (item) "The " (samp "Edit") (math "<rightarrow>") (samp "Import") " and " (samp "Edit") (math "<rightarrow>") (samp "Export") " items have been moved to " (samp "Tools") (math "<rightarrow>") (samp "Selections") ".") (concat (item) "The " (samp "Insert") " menu has been split up into the menus " (samp "Insert") ", " (samp "Text") " and " (samp "Mathematics") ".") (concat (item) "The " (samp "Text") " and " (samp "Paragraph") " menus have been merged together in one " (samp "Format") " menu.") (concat (item) (samp "Options") " has been spread out across " (samp "Document") ", " (samp "View") ", " (samp "Tools") " and " (samp "Edit") (math "<rightarrow>") (samp "Preferences") "."))) (subsection "Style files (1.0.0.4)") (concat "Many changes have been made in the organization of the " (TeXmacs) " style files. Personal style files which depend on intermediate " (TeXmacs) " packages may require some slight adaptations.") (concat "We are working towards a stabilization of the standard style files and packages. At the end of this process, it should be easy to adapt existing " (LaTeX) " style files for journals to " (TeXmacs) " by customizing these standard style files and packages. As soon as we have time, we plan to provide online documentation on how to do this at " (samp "Help") (math "<rightarrow>") (samp "Online documentation") ".") (subsection "Tabular material (0.3.5)") "The way tabular material is treated has completely changed. It has become much easier to edit tables, matrices, equation arrays, etc. Also, many new features have been implemented, such as background color, border, padding, hyphenation, subtables, etc. However, the upgrading of old tabular material might sometimes be erroneous, in which case we invite you to submit a bug report." (subsection "Document format (0.3.4)") "The TeXmacs document format has profoundly changed in order to make TeXmacs compatible with XML in the future. Most importantly, the old style environments like " (verbatim (document "    <less>assign|env|<less>environment|open|close<gtr><gtr>,")) (concat "which are applied via matching pairs " (verbatim "<less>begin|env<gtr>text<less>end|env<gtr>") ", have been replaced by macros ") (verbatim (document "    <less>assign|env|<less>macro|body|open<less>body<gtr>close<gtr><gtr>,")) (concat "which are applied via single macro expansions " (verbatim "<less>expand|env|text<gtr>") ". Similarly, matching pairs " (verbatim "<less>set|var|val<gtr>text<less>reset|var<gtr>") " of environment variable changes are replaced by a " (verbatim "<less>with|var|val|text<gtr>") " construct (close to XML attributes). From a technical point of view, these changes lead to several complications if the " (verbatim "text") " body consists of several paragraphs. As a consequence, badly structured documents may sometimes display differently in the new version (although I only noticed one minor change in my own documents). Furthermore, in order to maintain the higher level of structure in the document, the behaviour of the editor in relation to multiparagraph environments has slightly changed.") (appendix (concat "Contributing to GNU " (TeXmacs))) (section (concat "Use " (TeXmacs))) (concat "One of the best ways to contribute to GNU " (TeXmacs) " is by using it a lot, talk about it to friends and collegues, and to report me about bugs or other unnatural behaviour. Please mention the fact that you wrote articles using " (TeXmacs) " when submitting them. You can do this by putting the " (markup "made-by-TeXmacs") " tag somewhere inside your title using " (menu "Insert" "Title" "TeXmacs notice") ".") (concat "Besides these general (but very important) ways to contribute, your help on the more specific subjects below would be appreciated. Don't hesitate to " (hlink "contact us" "../about/authors/contact.en.tm") " if you want to contribute to these or any other issues. In the " (menu "Help") " menu you can find documentation about the " (hlink "source code" "../devel/source/source.en.tm") " of " (TeXmacs) ", its " (hlink "document format" "../devel/format/format.en.tm") ", how to write " (hlink "interfaces" "../devel/plugin/plugin.en.tm") " with other formats, and so on.") (section (concat "Making donations to the " (TeXmacs) " project")) (paragraph* "Making donations to TeXmacs through the SPI organization") (concat "One very important way to support " (TeXmacs) " is by donating money to the project. " (TeXmacs) " is currently  one of the projets of " (inactive "") " SPI (Software in the Public Interest; see " (verbatim "http://www.spi-inc.org") "). You may make donations of money to TeXmacs via this organization, by noting on your check or e-mail for wire transfers that your money should go to the TeXmacs project. You may also make donations of equipment or services or donations through vendors. See the SPI website for more information. The list of donators is maintained at our website.") (paragraph* "Details on how to donate money") "To make a donation, write a check or money order to:" (quotation (document (em "Software in the Public Interest, Inc."))) (concat "and mail it to the following " (label "address") "address:") (with "par-par-sep" "0fn" (document (quotation (document "Software in the Public Interest, Inc." "P.O. Box 502761" "Indianapolis, IN 46250-7761" "United States")))) "To make an electronic transfer (this will work for non-US too), you need to give your bank the routing number and account number as follows:" (with "par-par-sep" "0fn" (document (quotation (document "The SPI bank account is at American Express Centurion Bank." (with "font-family" "tt" (document (concat (with "font-series" "bold" "Routing Number: ") "124071889") (concat (with "font-series" "bold" "Account Number: ") "1296789"))))))) (concat "Don't forget to note on your check or e-mail for wire transfers that the money should be spent on the TeXmacs projet. In addition you may specify a more specific purpose on which you would like us to spend the money. You may also " (hlink "contact us" "../about/authors/contact.en.tm") " for a more detailed discussion on this issue.") (paragraph* "Important notes") (concat "Let the SPI Treasurer (" (verbatim "treasurer@spi-inc.org") ") know if you have problems. When you have completed the electronic wire, please send a copy of the receipt to the above address so there is a copy of your donation. The copy you send to the treasurer is important. You may also want to " (hlink "contact" "../about/authors/contact.en.tm") " the TeXmacs team in order to make sure that the money arrived on the TeXmacs account.") (with "font-shape" "italic" (document (concat (with "font-series" "bold" "Note:") " The SPI address and account numbers may change from time to time. Please do not copy the address and account numbers, but rather point to the page " (verbatim "http://www.spi-inc.org/donations") " to ensure that donors will always see the most current information."))) (concat (em "Donations in Europe") " can be done through our partner in Germany, ffis e.V. If you are interested in using their bank account (to save international money transfer costs), please check the instructions on " (verbatim "http://www.ffis.de/Verein/spi-en.html") ".") (section (concat "Contribute to the GNU " (TeXmacs) " documentation")) (concat "There is a high need for good documentation on " (TeXmacs) " as well as people who are willing to translate the existing documentation into other languages. The aim of this site is to provide high quality documentation. Therefore, you should carefully read the guide-lines on how to write such documentation.") (subsection "Introduction on how to contribute") "High quality documentation is both a matter of content and structure. The content itself has to be as pedagogic as possible for the targeted group of readers. In order to achieve this, you should not hesitate to provide enough examples and illustrative screen shots whenever adequate. Although the documentation is not necessarily meant to be complete, we do aim at providing relatively stable documentation. In particular, you should have checked your text against spelling errors." (concat "It is also important that you give your documentation as much structure as possible, using special markup from the " (tmstyle "tmdoc") " style file. This structure can be used in order to automatically compile printable books from your documentation, to make it suitable for different ways of viewing, or to make it possible to efficiently search a certain type of information in the documentation. In particular, you should always provide " (hlink "copyright and license" "../about/contribute/documentation/copyright.en.tm") (inactive "") " information, as well as indications on how to " (hlink "traverse" "../about/contribute/documentation/traversal.en.tm") " your documentation, if it contains " (hlink "many files" "../about/contribute/documentation/file-names.en.tm") ".") (concat "When selecting the " (tmstyle "tmdoc") " document style, the top level " (menu "Manual") " menu will appear automatically, together with some additional icons. The most important tags for documentation purposes can be found in this menu.") (warning (document (concat "Don't forget to select " (menu "Document" "Language" "Your language") " for each translated file. This will cause some content to be translated automatically, like the menus or some names of keys. Also, we recommend to run the " (TeXmacs) " spell checker on each translated document; this also requires the prior selection of the right document language."))) (subsection (concat "Using " (name "SVN"))) (concat "The present " (TeXmacs) " documentation is currently maintained on " (verbatim "texmacs.org") " using " (name "SVN") ". In order to contribute, you should first create an account as explained on") (verbatim (concat "    " (hlink "http://www.texmacs.org/tmweb/download/svn.en.html" "http://www.texmacs.org/tmweb/download/svn.en.html"))) "In fact, SVN is not ideal for our documentation purpose, because it is not very dynamic. In the future, we plan to create a dedicated publication website, which will allow you to save documents directly to the web. It should also allow the automatic conversion of the documentation to other formats, the compilation of books, etc." (subsection "Conventions for the names of files") "Most documentation should be organized as a function of the topic in a directory tree. The subdirectories of the top directory are the following:" (description (document (concat (item* "about") "Various information about the " (TeXmacs) " system (authors, changes, " (abbr "etc.") ").") (concat (item* "devel") "Documentation for developers.") (concat (item* "main") "The main documentation."))) "Please try to keep the number of entries per directory reasonably small." (concat "File names in the main directory should be of the form " (verbatim "type-name.language.tm") ". In the other directories, they are of the form " (verbatim "name.language.tm") ". Here " (verbatim "type") " is a major indication for the type of documentation; it should be one of the following:") (description (document (concat (item* "man") "For inclusion in the " (TeXmacs) " manual.") (concat (item* "tut") "For inclusion in the " (TeXmacs) " tutorial."))) (concat "You should try to keep the documentation on the same topic together, regardless of the type. Indeed, this allows you to find more easily all existing documentation on a particular topic. Also, it may happen that you want to include some documentation which was initially meant for the tutorial in the manual. The " (verbatim "language") " in which is the documentation has been written should be a two letter code like " (verbatim "en") ", " (verbatim "fr") ", etc. The main " (verbatim "name") " of your file should be the same for the translations in other languages. For instance, " (verbatim "man-keyboard.en.tm") " should not be translated as " (verbatim "man-clavier.fr.tm") ".") (subsection "Specifying meta information for documentation files") (concat "Appropriate meta data for " (TeXmacs) " documentation can be entered from the " (menu "Manual" "Meta data") " menu. In particular, you should specify a title for each documentation file using " (menu "Manual" "Meta data" "Title") ", or by directly clicking on the " (menu "Title") " button on the focus bar after creating a new document with the " (tmstyle "tmdoc") " style.") (concat "All " (TeXmacs) " documentation falls under the " (hlink "GNU Free Documentation License" "../fdl.txt") ". If you want your documentation to be included in " (TeXmacs) ", then you have to agree that it will be distributed under this license too. The license information") (quote-env (document (verbatim "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation; with no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\"."))) (concat "should be specified at the end of " (em "each") " file. This can be done by clicking on " (menu "Manual" "Meta data" "GNU FDL") ".") (concat "In a similar manner, you may add a copyright notice by clicking on " (menu "Manual" "Meta data" "Copyright") ". You keep (part of) the copyright of any documentation that you will write for " (TeXmacs) ". When you or others make additions to (or modifications in, or translations of) the document, then you should add your own name (at an appropriate place, usually at the end) to the existing copyright information. The first argument of the " (markup "tmdoc-copyright") " macro contains a year or a period of years. Each remaining argument indicates one of the copyright holders. When combining (pieces of) several documents into another one, you should merge the copyright holders. For cover information (on a printed book for instance), you are allowed to list only the principal authors, but a complete list should be given at a clearly indicated place.") (subsection (concat "Traversing the " (TeXmacs) " documentation")) (concat "As a general rule, you should avoid the use of sectioning commands inside the " (TeXmacs) " documentation and try to write small help pages on well identified topics. At a second stage, you should write recursive meta help files which indicate how to traverse the documentation in an automatic way. This allows the reuse of a help page for different purposes (a printed manual, a web-oriented tutorial, etc.).") (concat "The " (tmstyle "tmdoc") " style provides three markup macros for indicating how to traverse documentation. The " (markup "traverse") " macro is used to encapsulate regions with traversal information. It can be inserted using the " (subsubmenu "Manual" "Traversal" "Traverse") " entry in the " (menu "Manual" "Traversal") " or " (icon "tm_traverse.xpm") " menu. The " (markup "branch") " and " (markup "extra-branch") " macros indicate help pages which should be considered as a subsection and an appendix respectively, whereas the " (markup "continue") " macro indicates a follow-up page. Each of these macros should be used inside a " (markup "traverse") " environment and each of these macros takes two arguments. The first argument describes the link and the second argument gives the physical relative address of the linked file.") (concat "Typically, at the end of a meta help file you will find several " (markup "branch") " or " (markup "continue") " macros, inside one " (markup "traverse") " macro. At the top of the document, you should also specify a title for your document using the " (markup "tmdoc-title") " macro, as " (hlink "described before" "../about/contribute/documentation/copyright.en.tm") ". When generating a printed manual from the documentation, a chapter-section-subsection structure will automatically be generated from this information and the document titles. Alternatively, one might automatically generate additional buttons for navigating inside the documentation using a browser.") (subsection "Using the tmdoc style") (concat "Besides the " (hlink "copyright information" "../about/contribute/documentation/copyright.en.tm") " macros and " (hlink "traversal macros" "../about/contribute/documentation/traversal.en.tm") ", which have been documented before, the " (tmstyle "tmdoc") " style comes with a certain number of other macros and functions, which you should use whenever appropriate.") (concat "Notice that the " (tmstyle "tmdoc") " style inherits from the " (tmstyle "generic") " style, so you should use macros like " (markup "em") ", " (markup "verbatim") ", " (markup "itemize") ", " (abbr "etc.") " from this style whenever appropriate. In particular, when documentating program code, you should use " (menu "Insert" "Program" "Inline code") " and " (menu "Insert" "Program" "Block of code") " in order to mark such pieces of code.") (subsubsection "Explanations of macros, environment variables, and so on") (concat "The main environment which is used for explanations of macros, environment variables, " (scheme) " functions, " (abbr "etc.") " is inserted using the " (subsubmenu "Manual" "Explain" "Explanatory item") " entry of the " (menu "Manual" "Explain") " and " (icon "tm_explain.xpm") " menus. The environment comes with two arguments: the first argument consists of the concept or concepts to be explained, and the second one contains the actual explanation. A typical example would be the following:") (explain (document (explain-macro "demo-tag" "body") (concat (explain-macro "demo-tag" "extras" "body") (explain-synopsis "short and long versions of a demo tag"))) (document (concat "The " (markup "demo-tag") " is used for demonstration purposes and decorates the " (src-arg "body") (compound "src-var" "") " argument. An optional argument " (src-arg "extras") " can be given with details on the way to decorate the " (src-arg "body") "."))) (concat "In this example, we used " (menu "Manual" "Explain" "TeXmacs macros") " twice in order to insert the macros to be described. We also used " (menu "Manual" "Explain" "Synopsis") " in order to give a short description of the tags (in grey). In a similar way, one may use " (menu "Manual" "Explain" "Environment variable") " in order to describe an environment variable. Another example is:") (explain (document (scm (concat "(foo-bar " (scm-arg "K") " " (scm-arg "x") ")"))) (document (concat "The function " (scm "foo-bar") " computes the foo-bar transform of the operator " (scm (scm-arg "K")) " and applies it to " (scm (scm-arg "x")) "."))) (concat "In this example, we notice that all " (scheme) " code was encapsulated into " (markup "scm") " tags (see " (menu "Insert" "Program" "Inline code" "Scheme") ") and arguments were tagged using " (markup "scm-arg") ".") (subsubsection "Graphical user interface related markup") "The following markup elements can be used in order to describe various graphical user interface elements, such as keyboard shortcuts, menus or icons." (explain (markup "shortcut") (document (concat "This macro is used to indicate a keyboard shortcut for a " (scheme) " command. For instance, the shortcut for " (scm "(new-buffer)") " is " (shortcut "(new-buffer)") "."))) (explain (markup "key") (document (concat "This unary macro is used for explicit keyboard input. For instance, when giving " (rigid (verbatim "A C-b return")) " as argument, the result is " (key "A C-b return") "."))) (explain (markup "menu") (document (concat "This function with an arbitrary number of arguments indicates a menu like " (menu "File") " or " (menu "Document" "Language") ". Menu entries are automatically translated by this function."))) (explain (markup "submenu") (document "Consider the following sentence:" (quote-env (document (concat "``You may use the " (submenu "File" "Load") " and " (submenu "File" "Save") " entries of the " (menu "File") " menu in order to load and save files.''"))) (concat "In this example, the menu entries " (submenu "File" "Load") " and " (submenu "File" "Save") " were marked using the " (markup "submenu") " tag, which takes the implicit " (menu "File") " menu as its first invisible argument. This invisible argument is still taken into account when building the index (for instance). In a similar way, we provide " (markup "subsubmenu") " and " (markup "subsubsubmenu") " tags."))) (explain (markup "icon") (document (concat "Can be used in order to specify one of the " (TeXmacs) " icons, such as " (icon "tm_open.xpm") " and " (icon "tm_save.xpm") ". The macro takes one argument with the file name of the icon (the full path is not needed)."))) (explain (markup "screenshot") (document (concat "Similar to the " (markup "icon") " tag, but for screenshots."))) (explain (markup "cursor") (document (concat "This macro can be used to indicate a cursor position, as in " (math (concat "a" (rsup "2") "+b" (rsup (concat "2" (cursor))) "=c" (rsup "2"))) "."))) (explain (concat (markup "small-focus") ", " (markup "small-envbox")) (document (concat "This macro can be used for indicating the visual aids around the current focus and the further outer context (" (abbr "e.g.") " " (math (small-envbox (concat "a+" (frac "b" (small-focus "c"))))) "), in the case of inline elements."))) (explain (concat (markup "big-focus") ", " (markup "big-envbox")) (document (concat "Block versions of " (markup "small-focus") " and " (markup "small-envbox") "."))) (concat "Notice that the contents of none of the above tags should be translated into foreign languages. Indeed, for menu tags, the translations are done automatically, so as to keep the translations synchronized with the translations of the actual " (TeXmacs) " menus. In the cases of markup, styles, packages and " (abbr "d.t.d.") "s, it is important to keep the original name, because it often corresponds to a file name.") (subsubsection "Common annotations") (concat "The " (menu "Manual" "Annotate") " and " (icon "tm_tmdoc_annotate.xpm") " menus contain the following useful macros for common annotations. You should use them whenever appropriate.") (explain (markup "markup") (document (concat "This macro is used in order to indicate a macro or a function like " (markup "section") "."))) (explain (markup "src-arg") (document (concat "This macro should be used in order to indicate macro arguments such as " (src-arg "body") "."))) (explain (markup "src-var") (document (concat "This macro is used for the indication of environment variables such as " (src-var "font-size") "."))) (explain (markup "src-length") (document (concat "This macro is used in order to indicate a length such as " (src-length "12em") "."))) (explain (markup "tmstyle") (document (concat "This macro indicates the name of a " (TeXmacs) " style file or package like " (tmstyle "article") "."))) (explain (markup "tmpackage") (document (concat "This macro indicates the name of a " (TeXmacs) " package like " (tmpackage "std-markup") "."))) (explain (markup "tmdtd") (document (concat "This macro indicates the name of a " (TeXmacs) " " (abbr "d.t.d.") " like " (tmdtd "number-env") "."))) (subsubsection "Miscellaneous markup") "Some other potentially useful macros are the following:" (explain (markup "tm-fragment") (document (concat "For indicating some " (TeXmacs) " document fragment. This macro is especially useful for " (TeXmacs) " source code, as in") (tm-fragment (document (inactive* (assign "red-text" (macro "body" (with "color" "red" (arg "body"))))))) (concat "In this example, we used the keyboard shortcut " (shortcut "(make-mod-active 'inactive*)") " in order to deactivate the source code inside an active outer document."))) (explain (markup "descriptive-table") (document (concat "For descriptive tables; such tables can be used to document lists of keyboard shortcuts, different types of markup, " (abbr "etc.")))) (section "Internationalization") "The support of a maximal number of foreign languages is another major challenge in which your help would be appreciated. Making the translations to support a new language usually requires several days of work. We therefore recommend you to find some friends or collegues who are willing to help you." "The procedure for adding a new language is as follows" (itemize (document (concat (item) "You copy the file " (verbatim "english-new.scm") " to " (verbatim (concat "english-" (em "yourlanguage") ".dic")) " in " (verbatim "langs/natural/dic") " and fill out the corresponding translations. You may want to use Andrey Grozin's dictionary tool at") (verbatim (document "    http://www.texmacs.org/Data/dictool.py.gz")) "In order to use it, may sure that Python is installed on your system, download the file, gunzip it, make it executable and run it." (concat (item) "You tell me about any special typographical rules in your language and handy keystrokes for producing special characters.") (concat (item) "I take care of the hyphenation and typographical issues, but you test them.") (concat (item) "If you have enough time, you may also consider the translation of (part of) the existing documentation."))) (concat "Of course, the support for languages get out of date each time that new features are added to " (TeXmacs) ". For this reason, we also maintain a file " (verbatim (concat "miss-english-" (em "yourlanguage") ".dic")) " with all missing translation for your language, once that it has been added. Please do not hesitate to send inclomplete versions of " (verbatim (concat "english-" (em "yourlanguage") ".dic")) " or " (verbatim (concat "miss-english-" (em "yourlanguage") ".dic")) "; someone else may be willing to complete them.") (section "Writing data converters") (concat "If you are familiar with " (TeX) ", " (LaTeX) ", Html, Xml, Sgml, Mathml, Pdf, Rtf, or any other frequently used data format, please consider contributing to writing good converters for one or more of these formats. In " (hlink (menu "Help" "Source code" "Data format") "../devel/format/format.en.tm") " you will find details about the " (TeXmacs) " data format and in " (hlink (menu "Help" "Source code" "Data conversion") "../devel/source/conversions.en.tm") " we give some suggestions which might be helpful for these projects.") (section (concat "Porting " (TeXmacs) " to other platforms")) (concat "Currently, " (TeXmacs) " is supported on most major Unix/X-Window platforms and a Windows port should be ready soon. Nevertheless, your help is appreciated in order to keep the existing ports working. Some remaining challenges for porting " (TeXmacs) " are:") (itemize (document (concat (item) "A native port for MacOS-X.") (concat (item) "Ports to PDAs, first of all those which run Linux. It should be noticed that, with the current support for " (name "Freetype") ", " (TeXmacs) " no longer depends on " (TeX) "/" (LaTeX) " for its fonts. We expect it to be possible to obtain a reasonable ports for " (TeXmacs) " on PDAs with 32Mb and at least 100MHz clock-speed. Of course, one also needs to customize the menus and/or icon bars, but this should not be hard.") (concat (TeXmacs) " ports to PDAs would be particularly interesting in combination with the available plug-ins for doing scientific computations."))) (section (concat "Interfacing " (TeXmacs) " with other systems")) (concat "It is quite easy to write interfaces between " (TeXmacs) " and computer algebra systems or other scientific programs with structured output. Please consider writing interfaces between " (TeXmacs) " and your favorite system(s). " (TeXmacs) " has already been interfaced with several other free systems, like Giac, Macaulay 2, Maxima, GNU Octave, Pari, Qcl, gTybalt, Yacas. Detailed documentation on how to add new interfaces is available in the " (hlink (menu "Help" "Interfacing") "../devel/plugin/plugin.en.tm") " menu.") (section (concat (TeXmacs) " over the network and over the web")) (concat "It should be quite easy to write a plug-in for " (TeXmacs) " for doing instant messenging or live-conferencing. We are very interested in people who would like to help with this. The same techniques might be used for collaborative authoring and educational purposes.") (concat "Besides live conferencing, we are also interested by people who are willing to program better integration of " (TeXmacs) " with the web. As a first step, this would require an internal C++ plug-in based on " (name "Wget") " or " (name "Curl") " for accessing web-pages, which supports cookies, security, etc. At a second stage, these features should be exploited by the Html converters. At the last stage, one might develop more general web-based services.") (section (concat "Become a " (TeXmacs) " developer")) (concat "Apart from the kind of contributions which have been described in more detail above, there are many more issues where your help would be appreciated. Please take a look at our " (hlink "plans for the future" "../about/projects/projects.en.tm") " for more details. Of course, you should feel free to come up with your own ideas and share them with us on the " (verbatim "texmacs-dev@gnu.org") " mailing list!") (appendix (concat "Interfacing " (TeXmacs) " with other programs")) (section "Introduction") (concat "In this chapter we describe how to interface " (TeXmacs) " with an extern application. Such interfaces should be distributed in the form of " (hlink "plugins" "../devel/plugin/plugins.en.tm") ". The plug-in may either contain the extern application, or provide the glue between " (TeXmacs) " and the application. Usually, interfaces are used interactively in shell sessions (see " (menu "Insert" "Session") "). But they may also be designed for background tasks, such as spell checking or typesetting.") (concat "The communication between " (TeXmacs) " and the application takes place using a customizable input format and the special " (em (concat (TeXmacs) " meta-format")) " for output from the plug-in. The meta-format enables you to send structured output to " (TeXmacs) ", using any common format like " (verbatim "verbatim") ", " (LaTeX) ", " (name "Postscript") ", " (name "HTML,") " or " (TeXmacs) " itself. This is useful when adding a " (TeXmacs) " interface to an existing system, since " (LaTeX) " or " (name "Postscript") " output routines are often already implemented. It will then suffice to put the appropriate markers in order to make a first interface with " (TeXmacs) ".") (concat "As soon as basic communication between your application and " (TeXmacs) " is working, you may improve the interface in many ways. Inside shell sessions, there is support for prompts, default inputs, tab-completion, mathematical and multi-line input, " (abbr "etc.") " In general, your application may take control of " (TeXmacs) " and modify the user interface (menus, keyboard, " (abbr "etc.") ") or add new " (scheme) " routines to " (TeXmacs) ". Your application may even extend the typesetter.") (concat "In the directory " (verbatim "$TEXMACS_PATH/examples/plugins") ", you can find many examples of simple plug-ins. In the next sections, we will give a more detailed explanation of the interfacing features of " (TeXmacs) " on the hand of these examples. In order to try one of these examples, we recall that you just have to copy it to either one of the directories") (verbatim (document "    $TEXMACS_PATH/plugins" "    $TEXMACS_HOME_PATH/plugins")) (concat "and run the " (verbatim "Makefile") " (if there is one).") (section "Basic input/output using pipes") (concat "The configuration and the compilation of the " (verbatim "minimal") " plug-in is " (hlink "described" "../devel/plugin/plugin-binary.en.tm") " in the chapter about plug-ins. We will now study the source file " (example-plugin-link "minimal/src/minimal.cpp") ". Essentially, the " (verbatim "main") " routine is given by") (cpp-code (document "int" "main () {" (concat "  " (em "display-startup-banner")) "  while (true) {" (concat "    " (em "read-input")) (concat "    " (em "display-output")) "  }" "  return 0;" "}")) (concat "By default, " (TeXmacs) " just send a " (verbatim "'\\n'") "-terminated string to the application as the input. Consequently, the code for " (verbatim (em "read-input")) " is given by") (cpp-code (document "char buffer[100];" "cin.getline (buffer, 100, '\\n');")) (concat "The output part is more complicated, since " (TeXmacs) " needs to have a secure way for knowing whether the output has finished. This is accomplished by encapsulating each piece of output (in our case both the display banner and the interactive output) inside a block of the form") (quotation (document (framed-fragment (verbatim (concat (render-key "DATA_BEGIN") (em "format") ":" (em "message") (render-key "DATA_END")))))) (concat "Here " (verbatim "DATA_BEGIN") " and " (verbatim "DATA_END") " stand for special control characters:") (cpp-code (document "#define DATA_BEGIN   ((char) 2)" "#define DATA_END     ((char) 5)" "#define DATA_ESCAPE  ((char) 27)")) (concat "The " (verbatim "DATA_ESCAPE") " is used for producing the " (verbatim "DATA_BEGIN") " and " (verbatim "DATA_END") " characters in the " (verbatim (em "message")) " using the rewriting rules") (quotation (document (framed-fragment (document (with "font-family" "tt" (document (tabular (tformat (table (row (cell (concat (render-key "DATA_ESCAPE") (space "0.6spc") (render-key "DATA_BEGIN"))) (cell (math "<longrightarrow>")) (cell (render-key "DATA_BEGIN"))) (row (cell (concat (render-key "DATA_ESCAPE") (space "0.6spc") (render-key "DATA_END"))) (cell (math "<longrightarrow>")) (cell (render-key "DATA_END"))) (row (cell (concat (render-key "DATA_ESCAPE") (space "0.6spc") (render-key "DATA_ESCAPE"))) (cell (math "<longrightarrow>")) (cell (render-key "DATA_ESCAPE")))))))))))) (concat "The " (verbatim (em "format")) " specifies the format of the " (verbatim (em "message")) ". For instance, in our example, the code of " (verbatim (em "display-startup-banner")) " is given by") (cpp-code (document "cout <less><less> DATA_BEGIN <less><less> \"verbatim:\";" "cout <less><less> \"Hi there!\";" "cout <less><less> DATA_END;" "cout.flush ();")) (concat "Similarly, the code of " (verbatim (em "display-output")) " is given by") (cpp-code (document "cout <less><less> DATA_BEGIN <less><less> \"verbatim:\";" "cout <less><less> \"You typed \" <less><less> buffer;" "cout <less><less> DATA_END;" "cout.flush ();")) (remark (document (concat "For synchronization purposes, " (TeXmacs) " will assume that the output is finished as soon as it encounters the " (render-key "DATA_END") " which closes the initial " (render-key "DATA_BEGIN") ". So all output has to be inside one " (em "single") " outer " (render-key "DATA_BEGIN") "-" (render-key "DATA_END") " block: if you send more blocks, then " (TeXmacs) " will retake control before reading all your output. For certain formats (such as " (verbatim "verbatim") "), it " (em "is") " possible to nest " (render-key "DATA_BEGIN") "-" (render-key "DATA_END") " blocks though, as we will see below."))) (remark (document (concat "In our example, the " (c++) " code for the application is included in the plug-in. In the case when you are writing a " (TeXmacs) " interface for an existing application " (verbatim (em "myapp")) ", the convention is to create a " (verbatim "--texmacs") " option for this program. Then it is no longer necessary to have " (verbatim (concat (em "myapp") "/src")) " and " (verbatim (concat (em "myapp") "/bin")) " directories for your plug-in and it suffices to configure the plug-in by putting something like the following in " (verbatim (concat (em "myapp") "/progs/init-" (em "myapp") ".scm")) ":") (scm-code (document (concat "(plugin-configure " (em "myapp")) (concat "  (:require (url-exists-in-path? \"" (em "myapp") "\"))") (concat "  (:launch \"" (em "myapp") " --texmacs\")") (concat "  (:session \"" (em "Myapp") "\"))"))) (concat "In the case when you do not have the possibility to modify the source code of " (verbatim (em "myapp")) ", you typically have to write an input/output filter " (verbatim (concat "tm_" (em "myapp"))) " for performing the appropriate rewritings. By looking at the standard plug-ins distributed with " (TeXmacs) " in") (verbatim (document "    $TEXMACS_PATH/plugins")) "you can find several examples of how this can be done.")) (section "Formatted and structured output") (concat "In the " (hlink "previous section" "../devel/interface/interface-pipes.en.tm") ", we have seen that output from applications is encapsulated in blocks of the form") (quotation (document (framed-fragment (verbatim (concat (render-key "DATA_BEGIN") (em "format") ":" (em "message") (render-key "DATA_END")))))) (concat "Currently implemented formats include " (verbatim "verbatim") ", " (verbatim "latex") ", " (verbatim "html") ", " (verbatim "ps") ", and " (verbatim "scheme") ". Certain formats, such as " (verbatim "verbatim") ", allow the " (verbatim (em "message")) " to recursively contain blocks of the same form. The " (verbatim "scheme") " format is used for sending " (TeXmacs) " trees in the form of " (scheme) " expressions.") (paragraph* (concat "The " (verbatim "formula") " plug-in")) (concat "The " (verbatim "formula") " plug-in demonstrates the use of " (LaTeX) " as the output format. It consists of the files") (verbatim (document (concat "    " (example-plugin-link "formula/Makefile")) (concat "    " (example-plugin-link "formula/progs/init-formula.scm")) (concat "    " (example-plugin-link "formula/src/formula.cpp")))) (concat "The body of the main loop of " (verbatim "formula.cpp") " is given by") (cpp-code (document "int i, nr;" "cin <gtr><gtr> nr;" "cout <less><less> DATA_BEGIN <less><less> \"latex:\";" "cout <less><less> \"$\";" "for (i=1; i<less>nr; i++)" "  cout <less><less> \"x_{\" <less><less> i <less><less> \"}+\";" "cout <less><less> \"x_{\" <less><less> i <less><less> \"}$\";" "cout <less><less> DATA_END;" "cout.flush ();")) (concat "Similarly, the use of nested output blocks is demonstrated by the " (verbatim "nested") " plug-in; see in particular the source file " (example-plugin-link "nested/src/nested.cpp") ".") (remark (document (concat "At the moment, we only implemented " (LaTeX) " as a standard transmission format for mathematical formulas, because this is the format which is most widely used. In the future, we intend to implement more semantically secure formats, and we recommend you to keep in mind the possibility of sending your output in tree format.") (concat "Nevertheless, we enriched standard " (LaTeX) " with the " (verbatim "\\*") " and " (verbatim "\\bignone") " commands for multiplication and closing big operators. This allows us to distinguish between") (verbatim (document "    a \\* (b + c)")) (concat "(" (abbr "i.e.") " " (math "a") " multiplied by " (math "b+c") ") and") (verbatim (document "    f(x + y)")) (concat "(" (abbr "i.e.") " " (math "f") " applied to " (math "x+y") "). Similarly, in") (verbatim (document "    \\sum_{i=1}^m a_i \\bignone + \\sum_{j=1}^n b_j \\bignone")) (concat "the " (verbatim "\\bignone") " command is used in order to specify the scopes of the " (verbatim "\\sum") " operators.") (concat "It turns out that the systematic use of the " (verbatim "\\*") " and " (verbatim "\\bignone") " commands, in combination with clean " (LaTeX) " output for the remaining constructs, makes it " (with "font-shape" "italic" "a priori") " possible to associate an appropriate meaning to your output. In particular, this usually makes it possible to write additional routines for copying and pasting formulae between different systems."))) (paragraph* (concat "The " (verbatim "markup") " plug-in")) (concat "It is important to remind that structured output can be combined with the power of " (TeXmacs) " as a structured editor. For instance, the " (verbatim "markup") " plug-in demonstrates the definition of an additional tag " (markup "foo") ", which is used as an additional primitive in the output of the application. More precisely, the " (verbatim "markup") " plug-in consists of the following files:") (verbatim (document (concat "    " (example-plugin-link "markup/Makefile")) (concat "    " (example-plugin-link "markup/packages/session/markup.ts")) (concat "    " (example-plugin-link "markup/progs/init-markup.scm")) (concat "    " (example-plugin-link "markup/src/markup.cpp")))) (concat "The style package " (tmpackage "markup.ts") " contains the following definition for " (markup "foo") ":") (tm-fragment (document (inactive* (math (assign "foo" (macro "x" (frac "1" (concat "1+" (arg "x"))))))))) (concat "The " (markup "foo") " tag is used in the following way in the body of the main loop of " (verbatim "markup.cpp") ":") (cpp-code (document "char buffer[100];" "cin.getline (buffer, 100, '\\n');" "cout <less><less> DATA_BEGIN <less><less> \"latex:\";" "cout <less><less> \"$\\\\foo{\" <less><less> buffer <less><less> \"}$\";" "cout <less><less> DATA_END;" "cout.flush ();")) (concat "Notice that the style package " (tmpackage "markup.ts") " also defines the " (markup "markup-output") " environment:") (tm-fragment (document (inactive* (assign "markup-output" (macro "body" (generic-output (with "par-mode" "center" (arg "body")))))))) (concat "This has the effect of centering the output in sessions started using " (menu "Insert" "Session" "Markup") ".") (section "Output channels, prompts and default input") "Besides blocks of the form" (quotation (document (framed-fragment (verbatim (concat (render-key "DATA_BEGIN") (em "format") ":" (em "message") (render-key "DATA_END")))))) (concat "the " (TeXmacs) " meta-format also allows you to use blocks of the form") (quotation (document (framed-fragment (verbatim (concat (render-key "DATA_BEGIN") (em "channel") "#" (em "message") (render-key "DATA_END")))))) (concat "Here " (verbatim (em "channel")) " specifies an output channel to which the body " (verbatim (em "message")) " has to be sent. The default output channel is " (verbatim "output") ", but we also provide channels " (verbatim "prompt") " and " (verbatim "input") " for specifying the prompt and a default input for the next input in a session. Default inputs may be useful for instance be useful for demo modes of computer algebra systems. In the future, we also plan to support " (verbatim "error") " and " (verbatim "status") " channels.") (paragraph* (concat "The " (verbatim "prompt") " plug-in")) (concat "The " (verbatim "prompt") " plug-in shows how to use prompts. It consists of the files") (verbatim (document (concat "    " (example-plugin-link "prompt/Makefile")) (concat "    " (example-plugin-link "prompt/progs/init-prompt.scm")) (concat "    " (example-plugin-link "prompt/src/prompt.cpp")))) "The routine for displaying the next prompt is given by" (cpp-code (document "void" "next_input () {" "  counter++;" "  cout <less><less> DATA_BEGIN <less><less> \"prompt#\";" "  cout <less><less> \"Input \" <less><less> counter <less><less> \"] \";" "  cout <less><less> DATA_END;" "}")) "This routine is both used for displaying the startup banner" (cpp-code (document "cout <less><less> DATA_BEGIN <less><less> \"verbatim:\";" "cout <less><less> \"A LaTeX -<gtr> TeXmacs converter\";" "next_input ();" "cout <less><less> DATA_END;" "cout.flush ();")) "and in the body of the main loop" (cpp-code (document "char buffer[100];" "cin.getline (buffer, 100, '\\n');" "cout <less><less> DATA_BEGIN <less><less> \"verbatim:\";" "cout <less><less> DATA_BEGIN;" "cout <less><less> \"latex:$\" <less><less> buffer <less><less> \"$\";" "cout <less><less> DATA_END;" "next_input ();" "cout <less><less> DATA_END;" "cout.flush ();")) (section (concat "Sending commands to " (TeXmacs))) (concat "The application may use " (verbatim "command") " as a very particular output format in order to send " (scheme) " commands to " (TeXmacs) ". In other words, the block") (quotation (document (framed-fragment (verbatim (concat (render-key "DATA_BEGIN") "command:" (em "cmd") (render-key "DATA_END")))))) (concat "will send the command " (verbatim (em "cmd")) " to " (TeXmacs) ". Such commands are executed immediately after reception of " (render-key "DATA_END") ". We also recall that such command blocks may be incorporated recursively in larger " (render-key "DATA_BEGIN") "-" (render-key "DATA_END") " blocks.") (paragraph* (concat "The " (verbatim "menus") " plug-in")) (concat "The " (verbatim "nested") " plug-in shows how an application can modify the " (TeXmacs) " menus in an interactive way. The plug-in consists of the files") (verbatim (document (concat "    " (example-plugin-link "menus/Makefile")) (concat "    " (example-plugin-link "menus/progs/init-menus.scm")) (concat "    " (example-plugin-link "menus/src/menus.cpp")))) (concat "The body of the main loop of " (verbatim "menus.cpp") " simply contains") (cpp-code (document "char buffer[100];" "cin.getline (buffer, 100, '\\n');" "cout <less><less> DATA_BEGIN <less><less> \"verbatim:\";" "cout <less><less> DATA_BEGIN <less><less> \"command:(menus-add \\\"\"" "     <less><less> buffer <less><less> \"\\\")\" <less><less> DATA_END;" "cout <less><less> \"Added \" <less><less> buffer <less><less> \" to menu\";" "cout <less><less> DATA_END;" "cout.flush ();")) (concat "The " (scheme) " macro " (scm "menus-add") " is defined in " (verbatim "init-menus.scm") ":") (scm-code (document "(define menu-items '(\"Hi\"))" "" "(tm-menu (menus-menu)" "  (for (entry menu-items)" "    ((eval entry) (insert entry))))" "" "(tm-define (menus-add entry)" "  (set! menu-items (cons entry menu-items)))" "" "(plugin-configure menus" "  (:require (url-exists-in-path? \"menus.bin\"))" "  (:launch \"menus.bin\")" "  (:session \"Menus\"))" "" "(menu-bind plugin-menu" "  (:require (in-menus?))" "  (=<gtr> \"Menus\" (link menus-menu)))")) (concat "The configuration of " (verbatim "menus") " proceeds as usual:") (scm-code (document "(plugin-configure menus" "  (:require (url-exists-in-path? \"menus.bin\"))" "  (:launch \"menus.bin\")" "  (:session \"Menus\"))")) (section "Background evaluations") (concat "Until now, we have always considered interfaces between " (TeXmacs) " and applications which are intended to be used interactively in shell sessions. But there also exists a " (scheme) " command") (scm-code (document (concat "(plugin-eval " (em "plugin") " " (em "session") " " (em "expression") ")"))) (concat "for evaluating an expression using the application. Here " (verbatim (em "plugin")) " is the name of the plug-in, " (verbatim (em "session")) " the name of the session and " (verbatim (em "expression")) " a " (scheme) " expression which represents a " (TeXmacs) " tree.") (paragraph* (concat "The " (verbatim "substitute") " plug-in")) (concat "Background evaluations may for instance be used in order to provide a feature which allows the user to select an expression and replace it by its evaluation. For instance, the " (verbatim "substitute") " plug-in converts mathematical " (LaTeX) " expressions into " (TeXmacs) ", and it provides the " (shortcut "(substitute-substitute)") " keyboard shortcut for replacing a selected text by its conversion. The plug-in consists of the following files") (verbatim (document (concat "    " (example-plugin-link "substitute/Makefile")) (concat "    " (example-plugin-link "substitute/progs/init-substitute.scm")) (concat "    " (example-plugin-link "substitute/src/substitute.cpp")))) (concat "The main evaluation loop of " (verbatim "substitute.cpp") " simply consists of") (cpp-code (document "char buffer[100];" "cin.getline (buffer, 100, '\\n');" "cout <less><less> DATA_BEGIN;" "cout <less><less> \"latex:$\" <less><less> buffer <less><less> \"$\";" "cout <less><less> DATA_END;" "cout.flush ();")) (concat "Moreover, the configuration file " (verbatim "init-substitute.scm") " contains the following code for replacing a selected region by its evaluation") (scm-code (document "(define (substitute-substitute)" "  (import-from (texmacs plugin plugin-cmd))" "  (if (selection-active-any?)" "      (let* ((t (tree-<gtr>stree (the-selection)))" "             (u (plugin-eval \"substitute\" \"default\" t)))" "        (clipboard-cut \"primary\")" "        (insert (stree-<gtr>tree u)))))")) (concat "as well as the keyboard shortcut for " (shortcut "(substitute-substitute)") ":") (scm-code (document "(kbd-map" "  (\"C-F12\" (substitute-substitute)))")) "Notice that these routines should really be defined in a separate module for larger plug-ins." (paragraph* (concat "The " (verbatim "secure") " plug-in")) (concat "Another example of using an interface in the background is the " (verbatim "secure") " plug-in which consists of the files") (verbatim (document (concat "    " (example-plugin-link "secure/Makefile")) (concat "    " (example-plugin-link "secure/packages/secure.ts")) (concat "    " (example-plugin-link "secure/progs/init-secure.scm")) (concat "    " (example-plugin-link "secure/progs/secure-secure.scm")) (concat "    " (example-plugin-link "secure/src/secure.cpp")))) (concat "Just as " (verbatim "substitute.cpp") " above, the main program " (verbatim "secure.cpp") " just converts mathematical " (LaTeX) " expressions to " (TeXmacs) ". The " (verbatim "secure-secure.scm") " module contains the " (em "secure") " " (scheme) " routine " (verbatim "latexer") ":") (scm-code (document "(tm-define (latexer s)" "  (:type (tree -<gtr> object))" "  (:synopsis \"convert LaTeX string to TeXmacs tree using plugin\")" "  (:secure #t)" "  (plugin-eval \"secure\" \"default\" (tree-<gtr>string s)))")) (concat "It is important to define " (verbatim "latexer") " as being secure, so that it can be used in order to define additional markup using the " (markup "extern") " primitive. This is done in the style file " (verbatim "secure.ts") ":") (tm-fragment (document (inactive* (document "See a LaTeX math command as a TeXmacs expression via plug-in" (assign "latexer" (macro "x" (extern "latexer" (arg "x")))))))) (concat "After compilation, installation, relaunching " (TeXmacs) " and selecting " (menu "Document" "Use package" "secure") ", you will now be able to use " (markup "latexer") " as a new primitive. The primitive takes a mathematical " (LaTeX) " expression as its argument and displays its " (TeXmacs) " conversion.") (section "Mathematical and customized input") (concat "The " (TeXmacs) " meta-format allows application output to contain structured text like mathematical formulas. In a similar way, you may use general " (TeXmacs) " content as the input for your application. By default, only the text part of such content is kept and sent to the application as a string. Moreover, all characters in the range 031 are ignored, except for " (verbatim "'\\t'") " and " (verbatim "'\\n'") " which are transformed into spaces. There are two methods to customize the way input is sent to your application. First of all, the configuration option") (scm-code (document (concat "(:serializer ," (em "routine") ")"))) (concat "specifies a scheme function for converting " (TeXmacs) " trees to string input for your application, thereby overriding the default method. This method allows you for instance to treat multi-line input in a particular way or the perform transformations on the " (TeXmacs) " tree.") (concat "The " (scm ":serialize") " option is a very powerful, but also a very abstract way to customize input: it forces you to write a complete input transformation function. In many circumstances, the user really wants to rewrite two dimensional mathematical input to a more standard form, like rewriting " (no-break) (math (frac "a" "b")) " to " (verbatim "((a)/(b))") ". Therefore, a second way for customizing the input is to use the command") (scm-code (document (concat " (plugin-input-converters " (em "myplugin")) (concat "   " (em "rules") ")"))) (concat "This command specifies input conversion rules for " (verbatim (em "myplugin")) " for mathematical input and reasonable defaults are provided by " (TeXmacs) ". Each rule is of one of the following two forms:") (description (document (item* "Leaf transformation rules") (concat "Given two strings " (verbatim (em "symbol")) " and " (verbatim (em "conversion")) ", the rule") (scm-code (document (concat "(" (verbatim (em "symbol")) " " (verbatim (em "conversion")) ")"))) (concat "specifies that the " (TeXmacs) " symbol " (verbatim (em "symbol")) " should be converted to " (verbatim (em "conversion")) ".") (item* "Tag transformation rules") (concat "Given a symbol " (verbatim (em "tag")) " and a " (scheme) " function " (verbatim (em "routine")) ", the rule") (scm-code (document (concat "(" (em "tag") " " (em "routine") ")"))) (concat "specifies that " (verbatim (em "routine")) " will be used as the conversion routine for " (verbatim (em "tag")) ". This routine should just write a string to the standard output. The " (scheme) " function " (scm "plugin-input") " may be used for the recursive transformation of the arguments of the tag."))) (paragraph* (concat "The " (verbatim "input") " plug-in")) (concat "The " (verbatim "input") " plug-in demonstrates the use of customized mathematical input. It consists of the files") (verbatim (document (concat "    " (example-plugin-link "input/Makefile")) (concat "    " (example-plugin-link "input/packages/session/input.ts")) (concat "    " (example-plugin-link "input/progs/init-input.scm")) (concat "    " (example-plugin-link "input/progs/input-input.scm")) (concat "    " (example-plugin-link "input/src/input.cpp")))) (concat "The " (scheme) " configuration code in " (verbatim "init-input.scm") " is given by") (scm-code (document "(plugin-configure input" "  (:require (url-exists-in-path? \"input.bin\"))" "  (:launch \"input.bin\")" "  (:session \"Input\"))" "" "(when (supports-initialize?)" "  (lazy-input-converter (input-input) input))")) (concat "The predicate " (verbatim "supports-initialize?") " tests whether the plug-in is indeed operational (that is, whether " (verbatim "input.bin") " exists in the path). The conversion rules in the module " (verbatim "(input input)") " are added in a lazy manner. In other words, the file " (verbatim "input-input.scm") " will only be loaded when we explicitly request to make a conversion. The conversion rules in " (verbatim "input-input.scm") " are given by") (scm-code (document "(plugin-input-converters input" "  (frac input-input-frac)" "  (special input-input-special)" "  (\"<less>vee<gtr>\" \"||\")" "  (\"<less>wedge<gtr>\" \"&&\"))")) (concat "This will cause " (math "<vee>") " and " (math "<wedge>") " to be rewritten as " (verbatim "||") " and " (verbatim "&&") " respectively. Fractions " (math (frac "a" "b")) " are rewritten as " (verbatim "((a):(b))") " using the routine") (scm-code (document "(define (input-input-frac t)" "  (display \"((\")" "  (plugin-input (car t))" "  (display \"):(\")" "  (plugin-input (cadr t))" "  (display \"))\"))")) (concat "In the additional style file " (verbatim "input.ts") " we also defined some additional markup " (markup "special") ":") (tm-fragment (document (inactive* (assign "special" (macro "body" (block (tformat (cwith "1" "1" "1" "1" "cell-background" "pastel green") (table (row (cell (arg "body"))))))))))) "This tag is rewritten using the special conversion rule" (scm-code (document "(define (input-input-special t)" "  (display \"[[[SPECIAL:\")" "  (plugin-input (car t))" "  (display \"]]]\"))")) (concat "As to the " (c++) " code in " (verbatim "input.cpp") ", the startup banner automatically puts the shell session in mathematical input mode:") (cpp-code (document "cout <less><less> DATA_BEGIN <less><less> \"verbatim:\";" "cout <less><less> DATA_BEGIN <less><less> \"command:(session-use-math-input #t)\"" "     <less><less> DATA_END;" "cout <less><less> \"Convert mathematical input into plain text\";" "cout <less><less> DATA_END;" "cout.flush ();")) "In the main loop, we content ourselves the reproduce the input as output:" (cpp-code (document "char buffer[100];" "cin.getline (buffer, 100, '\\n');" "cout <less><less> DATA_BEGIN <less><less> \"verbatim:\";" "cout <less><less> buffer;" "cout <less><less> DATA_END;" "cout.flush ();")) (section "Tab-completion") (concat "By default, " (TeXmacs) " looks into your document for possible tab-completions. Inside sessions for your application, you might wish to customize this behaviour, so as to complete built-in commands. In order to do this, you have to specify the configuration option") (scm-code (document "(:tab-completion #t)")) (concat "in your " (verbatim (concat "init-" (em "myplugin") ".scm")) " file, so that " (TeXmacs) " will send special tab-completion requests to your application whenever you press " (key "tab") " inside a session. These commands are of the form") (quotation (document (framed-fragment (document (verbatim (document (concat (render-key "DATA_COMMAND") "(complete " (em "input-string") " " (em "cursor-position") ")" (shortcut "(kbd-return)")))))))) (concat "Here " (verbatim "DATA_COMMAND") " stands for the special character " (verbatim "'\\20'") " (ASCII 16). The " (verbatim (em "input-string")) " is the complete string in which the " (key "tab") " occurred and the " (verbatim (em "cursor-position")) " is an integer which specifies the position of the cursor when you pressed " (key "tab") ". " (TeXmacs) " expects your application to return a tuple with all possible tab-completions of the form") (quotation (document (framed-fragment (document (concat (verbatim (concat (render-key "DATA_BEGIN") "scheme:(tuple " (em "root") " " (em "completion-1") " ")) (math "<cdots>") (verbatim (concat " " (em "completion-n") ")")) (render-key "DATA_END")))))) (concat "Here " (verbatim (em "root")) " corresponds to a substring before the cursor for which completions could be found. The strings " (verbatim (em "completion-1")) " until " (verbatim (em "completion-n")) " are the list of completions as they might be inserted at the current cursor position. If no completions could be found, then you may also return the empty string.") (remark (document (concat "In principle, the tab-completion mechanism should still work in mathematical input mode. In that case, the " (verbatim (em "input-string")) " will correspond to the serialization of the " (TeXmacs) " input."))) (remark (document (concat "The way " (TeXmacs) " sends commands to your application can be customized in a similar way as for the input: we provide a " (scm ":commander") " configuration option for this, which works in a similar way as the " (scm ":serializer") " option."))) (paragraph* (concat "The " (verbatim "complete") " plug-in")) (concat "A very rudimentary example of how the tab-completion mechanism works is given by the " (verbatim "complete") " plug-in, which consists of the following files:") (verbatim (document (concat "    " (example-plugin-link "complete/Makefile")) (concat "    " (example-plugin-link "complete/progs/init-complete.scm")) (concat "    " (example-plugin-link "complete/src/complete.cpp")))) (concat "The startup banner in " (verbatim "complete.cpp") " takes care of part of the configuration:") (cpp-code (document "cout <less><less> DATA_BEGIN <less><less> \"verbatim:\";" "format_plugin ();" "cout <less><less> \"We know how to complete 'h'\";" "cout <less><less> DATA_END;" "fflush (stdout);")) (concat "Here " (cpp "format_plugin") " is given by") (cpp-code (document "void" "format_plugin () {" "  // The configuration of a plugin can be completed at startup time." "  // This may be interesting for adding tab-completion a posteriori." "  cout <less><less> DATA_BEGIN <less><less> \"command:\";" "  cout <less><less> \"(plugin-configure complete (:tab-completion #t))\";" "  cout <less><less> DATA_END;" "}")) "In the main loop, we first deal with regular input:" (cpp-code (document "char buffer[100];" "cin.getline (buffer, 100, '\\n');" "if (buffer[0] != DATA_COMMAND) {" "  cout <less><less> DATA_BEGIN <less><less> \"verbatim:\";" "  cout <less><less> \"You typed \" <less><less> buffer;" "  cout <less><less> DATA_END;" "}")) "We next treat the case when a tab-completion command is sent to the application:" (cpp-code (document "else {" "  cout <less><less> DATA_BEGIN <less><less> \"scheme:\";" "  cout <less><less> \"(tuple \\\"h\\\" \\\"ello\\\" \\\"i there\\\" \\\"ola\\\" \\\"opsakee\\\")\";" "  cout <less><less> DATA_END;" "}" "cout.flush ();")) "As you notice, the actual command is ignored, so our example is really very rudimentary." (section "Dynamic libraries") (concat "Instead of connecting your system to " (TeXmacs) " using a pipe, it is also possible to connect it as a dynamically linked library. Although communication through pipes is usually easier to implement, more robust and compatible with gradual output, the second option is faster.") (concat "In order to dynamically link your application to " (TeXmacs) ", you should follow the " (TeXmacs) " communication protocol, which is specified in the following header file:") (verbatim (document (concat "    " (simple-link "$TEXMACS_PATH/include/TeXmacs.h")))) "In this file it is specified that your application should export a data structure" (cpp-code (document "typedef struct package_exports_1 {" "  char* version_protocol; /* \"TeXmacs communication protocol 1\" */" "  char* version_package;" "  char* (*install) (TeXmacs_exports_1* TeXmacs," "                    char* options, char** errors);" "  char* (*evaluate) (char* what, char* session, char** errors);" "} package_exports_1;")) (concat "which contains an installation routine for your application, as well as an evaluation routine for further input (for more information, see the header file). " (TeXmacs) " will on its turn export a structure") (cpp-code (document "typedef struct TeXmacs_exports_1 {" "  char* version_protocol; /* \"TeXmacs communication protocol 1\" */" "  char* version_TeXmacs;" "} TeXmacs_exports_1;")) (concat "It is assumed that each application takes care of its own memory management. Hence, strings created by " (TeXmacs) " will be destroyed by " (TeXmacs) " and strings created by the application need to be destroyed by the application.") (concat "The string " (verbatim "version_protocol") " should contain " (verbatim "\"TeXmacs communication protocol 1\"") " and the string " (verbatim "version_package") " the version of your package. The routine " (verbatim "install") " will be called once by " (TeXmacs) " in order to initialize your system with options " (verbatim "options") ". It communicates the routines exported by " (TeXmacs) " to your system in the form of a pointer to a structure of type " (cpp "TeXmacs_exports_1") ". The routine should return a status message like") (verbatim (document "    \"yourcas-version successfully linked to TeXmacs\"")) (concat "If installation failed, then you should return " (verbatim "NULL") " and " (verbatim "*errors") " should contain an error message.") (concat "The routine " (verbatim "evaluate") " is used to evaluate the expression " (verbatim "what") " inside a " (TeXmacs) "-session with name " (verbatim "session") ". It should return the evaluation of " (verbatim "what") " or " (verbatim "NULL") " if an error occurred. " (verbatim "*errors") " either contains one or more warning messages or an error message, if the evaluation failed. The formats being used obey the same rules as in the case of communication by pipes.") "Finally, the configuration file of your plug-in should contain something as follows:" (scm-code (document (concat "(plugin-configure " (em "myplugin")) (concat "  (:require (url-exists? (url \"$LD_LIBRARY_PATH\" \"lib" (em "myplugin") ".so\")))") (concat "  (:link \"lib" (em "myplugin") ".so\" \"" (em "myplugin") "_exports\" \"\")") (concat "  " (em "further-configuration") ")"))) (concat "Here " (verbatim (concat (em "myplugin") "_exports")) " is a pointer to a structure of the type " (cpp "package_exports_1") ".") (remark (document (concat "It is possible that the communication protocol changes in the future. In that case, the data structures " (verbatim "TeXmacs_exports_1") " and " (verbatim "package_exports_1") " will be replaced by data structures " (verbatim "TeXmacs_exports_n") " and " (verbatim "package_exports_n") ", where " (verbatim "n") " is the version of the protocol. These structures will always have the abstract data structures " (verbatim "TeXmacs_exports") " and " (verbatim "package_exports") " in common, with information about the versions of the protocol, " (TeXmacs) " and your package."))) (paragraph* (concat "The " (verbatim "dynlink") " plug-in")) (concat "The " (verbatim "dynlink") " plug-in gives an example of how to write dynamically linked libraries. It consists of the following files:") (verbatim (document (concat "    " (example-plugin-link "dynlink/Makefile")) (concat "    " (example-plugin-link "dynlink/progs/init-dynlink.scm")) (concat "    " (example-plugin-link "dynlink/src/dynlink.cpp")))) (concat "The " (verbatim "Makefile") " contains") (quotation (document (framed-fragment (document (with "par-par-sep" "0fn" (document (with "font-family" "tt" (document "tmsrc = /home/vdhoeven/texmacs/src/TeXmacs" "CXX = g++" "LD  = g++" "" "lib/libtmdynlink.so: src/dynlink.cpp" "        $(CXX) -I$(tmsrc)/include -c src/dynlink.cpp -o src/dynlink.o" "        $(LD) -shared -o lib/libtmdynlink.so src/dynlink.o")))))))) (concat "so that running it will create a dynamic library " (verbatim "dynlink/lib/libdynlink.so") " from " (verbatim "dynlink.cpp") ". The " (verbatim "tmsrc") " variable should contain " (verbatim "$TEXMACS_PATH") ", so as to find the include file " (verbatim "TeXmacs.h") ". The configuration file " (verbatim "init-dynlink.scm") " simply contains") (scm-code (document "(plugin-configure dynlink" "  (:require (url-exists? (url \"$LD_LIBRARY_PATH\"" "                              \"libtmdynlink.so\")))" "  (:link \"libtmdynlink.so\" \"dynlink_exports\" \"\")" "  (:session \"Dynlink\"))")) (concat "As to the " (c++) " file " (verbatim "dynlink.cpp") ", it contains a string") (cpp-code (document "static char* output= NULL;")) "with the last output, the initialization routine" (cpp-code (document "char*" "dynlink_install (TeXmacs_exports_1* TM, char* opts, char** errs) {" "  output= (char*) malloc (50);" "  strcpy (output, \"\\2verbatim:Started dynamic link\\5\");" "  return output;" "}")) "the evaluation routine" (cpp-code (document "char*" "dynlink_eval (char* what, char* session, char** errors) {" "  free (output);" "  output= (char*) malloc (50 + strlen (what));" "  strcpy (output, \"\\2verbatim:You typed \");" "  strcat (output, what);" "  strcat (output, \"\\5\");" "  return output;" "}")) "and the data structure with the public exports:" (cpp-code (document "package_exports_1 dynlink_exports= {" "  \"TeXmacs communication protocol 1\"," "  \"Dynlink 1\"," "  dynlink_install," "  dynlink_eval" "};")) (concat "Notice that the application takes care of the memory allocation and deallocation of " (cpp "output") ".") (section "Miscellaneous features") (concat "Several other features are supported in order to write interfaces between " (TeXmacs) " and extern applications. Some of these are very hairy or quite specific. Let us briefly describe a few miscellaneous features:") (paragraph* "Interrupts") (concat "The stop icon can be used in order to interrupt the evaluation of some input. When pressing this button, " (TeXmacs) " will just send a " (verbatim "SIGINT") " signal to your application. It expects your application to finish the output as usual. In particular, you should close all open " (render-key "DATA_BEGIN") "-blocks.") (paragraph* "Testing whether the input is complete") (concat "Some systems start a multiline input mode as soon as you start to define a function or when you enter an opening bracket without a matching closing bracket. " (TeXmacs) " allows your application to implement a special predicate for testing whether the input is complete. First of all, this requires you to specify the configuration option") (scm-code (document "(:test-input-done #t)")) (concat "As soon as you will press " (shortcut "(kbd-return)") " in your input, " (TeXmacs) " will then send the command") (quotation (document (framed-fragment (document (verbatim (document (concat (render-key "DATA_COMMAND") "(input-done? " (em "input-string") ")" (shortcut "(kbd-return)")))))))) "Your application should reply with a message of the form" (quotation (document (framed-fragment (document (verbatim (concat (render-key "DATA_BEGIN") "scheme:" (em "done") (render-key "DATA_END"))))))) (concat "where " (verbatim (em "done")) " is either " (scm "#t") " or " (scm "#f") ". The " (verbatim "multiline") " plug-in provides an example of this mechanism (see in particular the file " (example-plugin-link "multiline/src/multiline.cpp") ").") (section "Writing documentation") (concat "Documentation for your plug-in " (verbatim "myplugin") " should be put in the " (verbatim "doc") " subdirectory of the main directory " (verbatim "myplugin") ". We recommend to write at least the following three documentation files:") (description-long (document (concat (item* (verbatim "myplugin.en.tm")) "This file should mainly contain a " (markup "traverse") " tag with links to the other documentation files, as described in the section ``" (hlink (concat "traversing the " (TeXmacs) " documentation") "../devel/interface/{/Users/Owner/.TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/asymptote/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/axiom/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cadabra/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/cocoa5/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/dratex/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/eukleides/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/feynmf/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/fricas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/giac/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gnuplot/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/graphviz/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/gtybalt/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lisp/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/lush/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/macaulay2/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maple/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathemagix/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mathematica/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/matlab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/maxima/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mupad/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/mycas/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/octave/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/pari/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/python/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/qcl/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/r/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/reduce/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/sage/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/scilab/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/shell/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/texgraph/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/xypic/doc:/Applications/TeXmacs-1.99.4.app/Contents/Resources/share/TeXmacs/plugins/yacas/doc}/about/contribute/documentation/traversal.en.tm") "''.") (concat (item* (verbatim "myplugin-abstract.en.tm")) "This file should contain a short description of the purpose of the plugin-in. If appropriate, then you should also describe how to get the plug-in and how to install it. The contents of this file should also be suitable for publication on the web site of " (TeXmacs) ".") (concat (item* (verbatim "myplugin-demo.en.tm")) "This file should contain a short demonstration of your plug-in, such as an example session."))) (concat "The first two files are mandatory, if you want your plug-in to show up in the " (menu "Help" "Plug-ins") " menu. Please refrain from putting too many images in the documentation files, so as to keep the size of the documentation reasonable when integrated into the main " (TeXmacs) " distribution.") (section "Plans for the future") (concat "There are many improvements to be made in the " (TeXmacs) " interface to computer algebra systems. First of all, the computer algebra sessions have to be improved (better hyphenation, folding, more dynamic subexpressions, etc.).") "As to interfaces with computer algebra systems, out main plans consist of providing tools for semantically safe communication between several system. This probably will be implemented in the form of a set of plug-ins which will provide conversion services." (the-index "idx" (document "")))) (initial (collection (associate "page-medium" "paper"))))